                });
            }
        }

        // Modify your init function to call initializeBoard
        function init() {
            // ... your existing init code ...
            
            // Initialize board with project data first
            initializeBoard();
            
            // Then load any local storage updates
            loadFromLocalStorage();
            
            // ... rest of your init code ...
        }

        // Global variables
        const projectId = window.location.pathname.split('/project/')[1];

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);
<!DOCTYPE html>

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Without reset.css: inconsistent element styling across browsers -->
    <link rel="stylesheet" href="/css/reset.css" />
    <link rel="stylesheet" href="/css/style.css" />
    <link rel="stylesheet" href="/css/dragula.css"/>
    <!-- Without font preconnect: slow font loading and page render -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,400;0,700;0,900;1,400;1,700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    
    <title>Project Template</title>
    <style>
        .drag-container {
            display: flex;
            flex-wrap: wrap;
            height: fit-content;
            overflow-y: auto;
        }
        .dragColumn {
            border: 1px solid #ccc;
            padding: 10px;
            background-color: #f9f9f9;
            box-sizing: border-box;
            word-wrap: break-word;
            margin: 10px;
            flex: 1 0 10%;
            position: relative;
           display: flex;
           position: relative;

           flex-flow: column nowrap;
           align-items: inherit;
           justify-content: flex-start;
        }
        .gu-mirror{
            /*this was required to flip right-side -up the dragged objects.  */
            transform: rotate(0deg);
        }
        .handle, .bar{
            border:  1px solid #ccc;
            font-size: 1.5rem;
            width: 3vh;
            height: 3vh;
            padding: 0.1vh 0 0 0;
            display: inline-block;
            text-align: center;
            background-image: url(/images/Icons2.webp);
            background-color: goldenrod;
            background-size: 1155%;
            background-position: 90.5% 37%;
            border-radius: 22%;
        }
        .dragDocument {
            padding: 12px 45px 12px 12px; /* Add padding on the right for icons */
            margin: 8px 0;
            border-radius: 4px;
           background-color: #08CF65;
            position: relative;
            cursor: move;
        }
        .document-container {
           position: relative;
            width: 100%;
        }
        /* Create a container for the icons */
        .document-icons {
            position: absolute;
            top: 50%;
            right: -35px; /* Adjust based on padding */
            transform: translateY(-50%);
           display: flex;
            gap: 8px;
            align-items: center;
        }
        .deleteButton {
            border: 1px solid #ccc;
            width: 24px;
            height: 24px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background-image: url(/images/Icons1.webp);
            background-color: transparent;
            background-size: 1300%;
            background-position: 63% 37%;
            border-radius: 4px;
            position: absolute;
            top: 8px;
            right: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .deleteButton:hover {
            background-color: #ff4444;
            border-color: #ff0000;
            background-image: url(/images/Icons1.webp);
        }
        .dragDocument .deleteButton{
            align-self: flex-end;
        }
        .newDocPopupButton {
            border: 1px solid #ccc;
            font-size: 1.5rem;
            width: 3vw;
            height: 3vh;
            padding: 0.1vh 0 0 0;
            display: flex
;       
            text-align: center;
            background-image: url(/images/Icons1.webp);
            background-color: lightgrey;
            background-size: 1000%;
            background-position: 36% 63%;
            border-radius: 22%;
            position: relative;
            margin: 1% 1%;
            
        }
         nav.columnNav{
            display: flex;
            flex-flow: row nowrap;
            justify-content: space-between;
            position: relative;
            align-items: baseline;
        }
        #createDocumentForm{
            border: 1px solid black;
            position: fixed;
            width: 30%;
            z-index: 2;
            background-color: white;
            top: 50%;
            left: calc(50% + 400px);
            transform: translate(-50%, -50%);
        }
        body{
            position: relative;
            height: 100vh;
        }
        footer{
            position: sticky;
            top: 100vh;
        }
        .close-btn {
            position: absolute;
            right: 10px;
            top: 10px;
            font-size: 24px;
            cursor: pointer;
            color: #666;
            transition: color 0.2s;
        }
        
        .close-btn:hover {
            color: #000;
        }

        .form-header {
            position: relative;
            padding: 15px;
            border-bottom: 1px solid #ddd;
            margin-bottom: 15px;
        }

        .column-color-picker,
        .document-color-picker {
            width: 25px;
            height: 25px;
            padding: 0;
            border: 1px solid #ccc;
            border-radius: 4px;
            cursor: pointer;
            background-color: transparent;
            transition: transform 0.2s ease;
        }

        .column-color-picker:hover,
        .document-color-picker:hover {
            transform: scale(1.1);
        }

        .column-color-picker::-webkit-color-swatch-wrapper,
        .document-color-picker::-webkit-color-swatch-wrapper {
            padding: 0;
        }

        .column-color-picker::-webkit-color-swatch,
        .document-color-picker::-webkit-color-swatch {
            border: none;
            border-radius: 3px;
        }

        .column-color-picker::-moz-color-swatch,
        .document-color-picker::-moz-color-swatch {
            border: none;
            border-radius: 3px;
        }

        .dragColumn {
            transition: background-color 0.3s ease;
            min-height: 50px; /* Ensure columns are droppable when empty */
        }

        nav.columnNav {
            display: flex;
            flex-flow: row nowrap;
            justify-content: flex-start;
            position: relative;
            align-items: center;
            gap: 8px;
            padding: 5px;
        }

        .button-container {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 10px;
        }

        .dragDocument:hover {
            transform: translateY(-2px);
        }

        .gu-mirror {
            cursor: grabbing;
        }

        .gu-transit {
            opacity: 0.4;
            background-color: #f0f0f0;
        }

        .document-color-picker {
            width: 24px;
            height: 24px;
            padding: 0;
            border: 1px solid #ccc;
            border-radius: 4px;
            cursor: pointer;
        }

        .document-content {
            margin-right: 30px; /* Space for delete button */
        }

        .document-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .document-header h2 {
            margin: 0;
            font-size: 16px;
            font-weight: bold;
            color: #333;
            flex-grow: 1;
        }

        .dragDocument p {
            margin: 5px 0 0 0;
            font-size: 14px;
            color: #333;
        }

        .deleteButton {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 24px;
            height: 24px;
        }
    </style>
  </head>

  <body onload="init()">
    <!-- Without header: navigation missing -->
    <%- include('partials/header') %>

    <div class="project-header">
        <h1><%= project.name %></h1>
        <p><%= project.description %></p>
    </div>

    <!-- Without this form: no way to c
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        function saveToLocalStorage() {
            const boardState = {
                columns: Array.from(document.querySelectorAll('.dragColumn')).map(column => {
                    const documents = Array.from(column.querySelectorAll('.dragDocument')).map(doc => ({
                        id: doc.id,
                        title: doc.querySelector('h2').textContent,
                        description: doc.querySelector('p').textContent,
                        backgroundColor: doc.style.backgroundColor || '#08CF65'
                    }));

                    return {
                        id: column.id,
                        title: column.querySelector('.title').textContent,
                        backgroundColor: column.style.backgroundColor || '#f9f9f9',
                        documents: documents
                    };
                })
            };

            localStorage.setItem('kanbanBoard', JSON.stringify(boardState));
        }

        function createDocumentFromSaved(doc) {
            const documentLineItem = document.createElement('li');
            documentLineItem.className = 'dragDocument';
            documentLineItem.id = doc.id;
            documentLineItem.style.backgroundColor = doc.backgroundColor;

            const docContainer = document.createElement('div');
            docContainer.className = 'document-container';

            // Add title
            const docTitle = document.createElement('h2');
            docTitle.textContent = doc.title;
            docTitle.style.fontWeight = 'bold';
            docTitle.addEventListener("dblclick", () => edit(docTitle));
            docContainer.appendChild(docTitle);

            // Add description
            const docDescription = document.createElement('p');
            docDescription.textContent = doc.description;
            docDescription.addEventListener("dblclick", () => edit(docDescription));
            docContainer.appendChild(docDescription);

            // Add color picker
            const colorPicker = document.createElement('input');
            colorPicker.type = 'color';
            colorPicker.className = 'document-color-picker';
            colorPicker.value = doc.backgroundColor || '#08CF65';
            colorPicker.style.position = 'absolute';
            colorPicker.style.right = '40px';
            colorPicker.style.top = '10px';
            colorPicker.addEventListener('input', (e) => {
                documentLineItem.style.backgroundColor = e.target.value;
                saveToLocalStorage();
            });
            docContainer.appendChild(colorPicker);

            // Add delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.dataset.document = documentLineItem.id;
            deleteMe.addEventListener("click", () => deleteDocument(deleteMe.dataset.document));
            docContainer.appendChild(deleteMe);

            documentLineItem.appendChild(docContainer);
            return documentLineItem;
        }

        function createColumnFromSaved(column) {
            const newColumn = document.createElement('ul');
            newColumn.className = 'dragColumn';
            newColumn.id = column.id;
            newColumn.style.backgroundColor = column.backgroundColor;

            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = column.backgroundColor || '#f9f9f9';
            colorPicker.addEventListener('input', (e) => {
                newColumn.style.backgroundColor = e.target.value;
                saveToLocalStorage();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.dataset.column = newColumn.id;
            deleteMe.addEventListener("click", () => deleteDocument(deleteMe.dataset.column));
            buttonContainer.appendChild(deleteMe);

            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = column.title;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);

            // Create saved documents
            if (column.documents) {
                column.documents.forEach(doc => {
                    const documentLineItem = createDocumentFromSaved(doc);
                    newColumn.appendChild(documentLineItem);
                });
            }

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Then define init
        function init() {
            // Get DOM elements
            const createColumnForm = document.getElementById('createColumnForm');
            const createDocumentForm = document.getElementById('createDocumentForm');
            const dragparent = document.getElementById('dragparent');

            // Add event listeners
            if (createColumnForm) {
                createColumnForm.addEventListener('submit', function(event) {
                    event.preventDefault();
                    createColumnFunc(event);
                });
            }

            if (createDocumentForm) {
                createDocumentForm.addEventListener('submit', function(event) {
                event.preventDefault();
                    createDocumentFunc(event);
                });
            }

            const closeBtn = document.querySelector('.close-btn');
            if (closeBtn) {
                closeBtn.addEventListener('click', function() {
                    const createDocumentForm = document.getElementById('createDocumentForm');
                    createDocumentForm.setAttribute('hidden', '');
                });
            }

            // Load saved project data
            loadProjectFromSession();
            
            // Initialize dragula
            initializeDragula();
            
            // Setup autosave
            setupAutosave();
        }

        // Define initializeDragula first
        function initializeDragula() {
            const dragparent = document.getElementById('dragparent');
            
            // Clean up existing drakes
            if (window.columnDrake) {
                window.columnDrake.destroy();
            }
            if (window.documentDrake) {
                window.documentDrake.destroy();
            }
            
            // Initialize column drake
            window.columnDrake = dragula([dragparent], {
                        moves: function (el, container, handle) {
                    return el.classList.contains('dragColumn') && 
                           (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');
                },
                accepts: function (el, target) {
                    return el.classList.contains('dragColumn') && target === dragparent;
                },
                direction: 'horizontal'
            });

            // Initialize document drake
            window.documentDrake = dragula(listOfColumn, {
                moves: function (el) {
                    return el.classList.contains('dragDocument');
                },
                accepts: function (el, target) {
                    return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');
                },
                revertOnSpill: true,
                removeOnSpill: false
            });

            // Add event listeners for drag operations
        let listOfColumn = [];
        const projectId = window.location.pathname.split('/project/')[1];

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            window.columnDrake.on('drop', () => {
                saveProjectToSession();
                saveProjectToDatabase();
            });
            
            window.documentDrake.on('drop', () => {
                saveProjectToSession();
                saveProjectToDatabase();
            });
        }

        function createDocumentPopup(columnData) {
            const theDocPopupForm = document.getElementById('createDocumentForm');
                 theDocPopupForm.toggleAttribute("hidden");
                 const popupButton = document.getElementById('createDoc');
                 popupButton.setAttribute('data-id', columnData);
            const documentTitle = document.getElementById('documentTitle');
            documentTitle.focus();
            }

            function createDocumentFunc(event) {
                event.preventDefault();
            const columnID = document.getElementById("createDoc").dataset.id;
                const documentLineItem = document.createElement('li');
                documentLineItem.className = 'dragDocument';
            documentLineItem.id = `doc-${Math.random()}`;

            // Create document container
            const docContainer = document.createElement('div');
            docContainer.className = 'document-container';

            // Add title
                const docTitle = document.createElement('h2');
                const documentTitle = document.getElementById('documentTitle').value;
                docTitle.textContent = documentTitle;
            docTitle.style.fontWeight = 'bold';
            docTitle.addEventListener("dblclick", () => edit(docTitle));
            docContainer.appendChild(docTitle);
                
            // Add description
                const docDescription = document.createElement('p');
                const documentDescription = document.getElementById('documentDescription').value;
            docDescription.textContent = documentDescription;
            docDescription.addEventListener("dblclick", () => edit(docDescription));
            docContainer.appendChild(docDescription);

            // Add color picker
            const colorPicker = document.createElement('input');
            colorPicker.type = 'color';
            colorPicker.className = 'document-color-picker';
            colorPicker.value = '#08CF65';
            colorPicker.style.position = 'absolute';
            colorPicker.style.right = '40px';
            colorPicker.style.top = '10px';
            colorPicker.addEventListener('input', (e) => {
                documentLineItem.style.backgroundColor = e.target.value;
                saveProjectToSession();
            });
            docContainer.appendChild(colorPicker);
            
            // Add delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.dataset.document = documentLineItem.id;
            deleteMe.addEventListener("click", () => deleteDocument(deleteMe.dataset.document));
            docContainer.appendChild(deleteMe);

            // Add container to document
            documentLineItem.appendChild(docContainer);

            // Add to column
                const parentColumn = document.getElementById(`${columnID}`);
                parentColumn.appendChild(documentLineItem);

            // Reset and close form
            document.getElementById('createDocumentForm').reset();
            createDocumentPopup(null);

            // Save to session storage
            saveProjectToSession();
        }

        function deleteDocument(id) {
            const element = document.getElementById(id);
            if (!element) return;

            // Check if it's a column or document
            const isColumn = element.classList.contains('dragColumn');
            
            if (confirm(`Are you sure you want to delete this ${isColumn ? 'column' : 'document'}?`)) {
                if (isColumn) {
                    // Remove from listOfColumn array
                    const index = listOfColumn.indexOf(element);
                    if (index > -1) {
                        listOfColumn.splice(index, 1);
                    }
                }
                
                // Remove the element
                element.remove();
                
                // Save changes
                saveProjectToSession();
                saveProjectToDatabase();
            }
        }

        function edit(element){
            let text = element.textContent
            element.textContent = ''
            const rewrite =document.createElement('input');
            rewrite.classList.add('form-control');
            rewrite.id = "editInput";
            rewrite.type ="textbox";
            rewrite.placeholder = text
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Then define init
        function init() {
            // Get DOM elements
            const createColumnForm = document.getElementById('createColumnForm');
            const createDocumentForm = document.getElementById('createDocumentForm');
            const dragparent = document.getElementById('dragparent');

            // Add event listeners
            if (createColumnForm) {
                createColumnForm.addEventListener('submit', function(event) {
                    event.preventDefault();
                    createColumnFunc(event);
                });
            }

            if (createDocumentForm) {
                createDocumentForm.addEventListener('submit', function(event) {
                event.preventDefault();
                    createDocumentFunc(event);
                });
            }

            const closeBtn = document.querySelector('.close-btn');
            if (closeBtn) {
                closeBtn.addEventListener('click', function() {
                    const createDocumentForm = document.getElementById('createDocumentForm');
                    createDocumentForm.setAttribute('hidden', '');
                });
            }

            // Load saved project data
            loadProjectFromSession();
            
            // Initialize dragula
            initializeDragula();
            
            // Setup autosave
            setupAutosave();
        }

        // Define initializeDragula first
        function initializeDragula() {
            const dragparent = document.getElementById('dragparent');
            
            // Clean up existing drakes
            if (window.columnDrake) {
                window.columnDrake.destroy();
            }
            if (window.documentDrake) {
                window.documentDrake.destroy();
            }
            
            // Initialize column drake
            window.columnDrake = dragula([dragparent], {
                        moves: function (el, container, handle) {
            rewrite.addEventListener("keydown", function(event) {
                if (event.key === "Enter") {
                  event.preventDefault(); // the page would reload otherwise.
                  console.log(rewrite.value||"it's empty")
                  element.textContent = rewrite.value||rewrite.placeholder
                  delete rewrite
                }if (event.key === "Escape") {
                    console.log('escape')
                    element.textContent = text;
                    rewrite.remove(); // Properly remove the input element from the DOM
                }
            })
            rewrite.addEventListener("blur",  function(event) {
                element.textContent = text;
                rewrite.remove(); // Properly remove the input element from the DOM
            })
            element.appendChild(rewrite).focus();
        }

        // Update the saveProjectToSession function
                    return el.classList.contains('dragColumn') && 
                           (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');
                },
                accepts: function (el, target) {
                    return el.classList.contains('dragColumn') && target === dragparent;
                },
                direction: 'horizontal'
            });

            // Initialize document drake
            window.documentDrake = dragula(listOfColumn, {
                moves: function (el) {
                    return el.classList.contains('dragDocument');
                },
                accepts: function (el, target) {
                    return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');
                },
                revertOnSpill: true,
                removeOnSpill: false
            });

            // Add event listeners for drag operations
        function saveProjectToSession() {
            try {
                const columns = Array.from(document.getElementsByClassName('dragColumn')).map(column => {
                    // Get documents with null checks
                    const documents = Array.from(column.getElementsByClassName('dragDocument')).map(doc => {
                        const title = doc.querySelector('h2')?.textContent || '';
                        const description = doc.querySelector('p')?.textContent || '';
                        return {
                            id: doc.id,
                            title: title,
                            description: description,
                            backgroundColor: doc.style.backgroundColor
                        };
                    });

                    // Get column title with null check
                    const titleElement = column.querySelector('.title');
                    return {
                        id: column.id,
                        title: titleElement ? titleElement.textContent : '',
                        backgroundColor: column.style.backgroundColor,
                        documents: documents
                    };
                });

                const projectData = {
                    id: projectId,
                    columns: columns,
                    lastModified: new Date().toISOString()
                };

                // Save to session storage
                sessionStorage.setItem(`project_${projectId}`, JSON.stringify(projectData));

                // Update allProjects list
                let allProjects = JSON.parse(sessionStorage.getItem('allProjects') || '[]');
                const projectIndex = allProjects.findIndex(p => p.id === projectId);
                
                if (projectIndex === -1) {
                    allProjects.push(projectData);
                } else {
                    allProjects[projectIndex] = projectData;
                }
                
                sessionStorage.setItem('allProjects', JSON.stringify(allProjects));
            } catch (error) {
                console.error('Error saving project to session:', error);
            }
        }

        // Update the saveProjectToDatabase function
        async function saveProjectToDatabase() {
            try {
                const projectData = JSON.parse(sessionStorage.getItem(`project_${projectId}`));
                if (!projectData) return;

                const response = await fetch(`/project/${projectId}/save`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(projectData)
                });

                if (!response.ok) {
                    throw new Error('Failed to save project');
                }

                // Update last saved timestamp
                projectData.lastSaved = new Date().toISOString();
                sessionStorage.setItem(`project_${projectId}`, JSON.stringify(projectData));

            } catch (error) {
                console.error('Error saving project:', error);
            }
        }

        // Add autosave functionality
        function setupAutosave() {
            // Save every 30 seconds
            setInterval(() => {
                saveProjectToSession();
                saveProjectToDatabase();
            }, 30000);

            // Save when user leaves the page
            window.addEventListener('beforeunload', function(e) {
                saveProjectToSession();
                saveProjectToDatabase();
            });

            // Save after any drag operation
            if (window.columnDrake) {
                window.columnDrake.on('drop', () => {
                    saveProjectToSession();
                    saveProjectToDatabase();
                });
            }
            if (window.documentDrake) {
                window.documentDrake.on('drop', () => {
                    saveProjectToSession();
                    saveProjectToDatabase();
                });
            }
        }

        // Update the loadProjectFromSession function
        function loadProjectFromSession() {
            try {
                const savedData = sessionStorage.getItem(`project_${projectId}`);
                
                if (!savedData) {
                    console.log('No saved data found for project:', projectId);
                    return;
                }

                const projectData = JSON.parse(savedData);
                
                // Clear existing columns
                const dragparent = document.getElementById('dragparent');
                dragparent.innerHTML = '';
                listOfColumn = []; // Reset column list
                
                // Recreate columns and documents
                if (projectData.columns && Array.isArray(projectData.columns)) {
                    projectData.columns.forEach(columnData => {
                        if (!columnData) return;
                        
                        const newColumn = document.createElement('ul');
                        newColumn.className = 'dragColumn';
                        newColumn.id = columnData.id || `column-${Math.random()}`;
                        newColumn.style.backgroundColor = columnData.backgroundColor || '#f9f9f9';

                        // Create column nav
                        const columnNav = document.createElement('nav');
                        columnNav.className = 'columnNav';

                        // Create button container
                        const buttonContainer = document.createElement('div');
                        buttonContainer.className = 'button-container';

                        // Add document button
                        const newDocPopup = document.createElement("button");
                        newDocPopup.className = 'newDocPopupButton';
                        newDocPopup.dataset.column = newColumn.id;
                        newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
                        buttonContainer.appendChild(newDocPopup);

                        // Add color picker
                        const colorPicker = document.createElement("input");
                        colorPicker.type = "color";
                        colorPicker.className = 'column-color-picker';
                        colorPicker.value = columnData.backgroundColor || '#f9f9f9';
                        colorPicker.addEventListener('input', async (e) => {
                            newColumn.style.backgroundColor = e.target.value;
                            await saveColumnColor(newColumn.id, e.target.value);
                            saveProjectToSession();
                        });
                        buttonContainer.appendChild(colorPicker);

                        // Delete button
                        const deleteMe = document.createElement("button");
                        deleteMe.className = 'deleteButton';
                        deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
                        buttonContainer.appendChild(deleteMe);

                        // Add the button container to nav
                        columnNav.appendChild(buttonContainer);

                        // Add title
                        const title = document.createElement('h1');
                        title.className = 'title';
                        title.textContent = columnData.title || '';
                        title.addEventListener("dblclick", () => edit(title));
                        columnNav.appendChild(title);

                        newColumn.appendChild(columnNav);
                        dragparent.appendChild(newColumn);
                        listOfColumn.push(newColumn);

                        // Create documents for this column
                        if (columnData.documents && Array.isArray(columnData.documents)) {
                            columnData.documents.forEach(docData => {
                                if (!docData) return;
                                const doc = createDocumentElement(docData);
                                newColumn.appendChild(doc);
                            });
                        }
                    });
                }
                
                // Reinitialize dragula
                initializeDragula();
            } catch (error) {
                console.error('Error loading project from session:', error);
            }
        }

        // Helper function to create document elements
        function createDocumentElement(docData) {
            const doc = document.createElement('li');
            doc.className = 'dragDocument';
            doc.id = docData.id;
            doc.style.backgroundColor = docData.backgroundColor;

            const container = document.createElement('div');
            container.className = 'document-container';

            // Add title
            const title = document.createElement('h2');
            title.textContent = docData.title;
            title.addEventListener("dblclick", () => edit(title));
            container.appendChild(title);

            // Add description
            const description = document.createElement('p');
            description.textContent = docData.description;
            description.addEventListener("dblclick", () => edit(description));
            container.appendChild(description);

            // Add color picker
            const colorPicker = document.createElement('input');
            colorPicker.type = 'color';
            colorPicker.className = 'document-color-picker';
            colorPicker.value = docData.backgroundColor;
            colorPicker.addEventListener('input', (e) => {
                doc.style.backgroundColor = e.target.value;
                saveProjectToSession();
            });
            container.appendChild(colorPicker);

            // Add delete button
            const deleteButton = document.createElement("button");
            deleteButton.className = 'deleteButton';
            deleteButton.dataset.document = doc.id;
            deleteButton.addEventListener("click", () => deleteDocument(deleteButton.dataset.document));
            container.appendChild(deleteButton);

            doc.appendChild(container);
            return doc;
        }
    </script>
  </body>
</html>
