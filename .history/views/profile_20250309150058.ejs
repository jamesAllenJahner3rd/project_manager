<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- css link -->
    <link rel="stylesheet" href="/css/reset.css" />
    <link rel="stylesheet" href="/css/style.css" />
    <!-- fonts link -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,400;0,700;0,900;1,400;1,700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <!-- Font Awesome link -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <title>User Profile</title>
    <title>User Profile</title>
  </head>
  <body>
    <!-- header -->
    <%- include('partials/header') %>
    <h1>Adjust your profile here</h1>
    <a href="/">To index Page</a>
    <section class="hero">
      <div class="content-wrapper">
        <!-- Project Creation Form -->
        <div class="form-container">
          <form action="/profile/project" method="POST">
            <div class="form-group">
              <label for="name">Project Name</label>
              <input type="text" name="name" id="name" class="form-control" required>
            </div>
            <div class="form-group">
              <label for="description">Description</label>
              <textarea name="description" id="description" class="form-control" required></textarea>
            </div>
            <div class="form-group">
              <label for="startDate">Start Date</label>
              <input type="date" name="startDate" id="startDate" class="form-control" required>
            </div>
            <div class="form-group">
              <label for="endDate">End Date</label>
              <input type="date" name="endDate" id="endDate" class="form-control" required>
            </div>
            <div class="form-group">
              <label for="status">Status</label>
              <select name="status" id="status" class="form-control">
                <option value="Not Started">Not Started</option>
                <option value="In Progress">In Progress</option>
                <option value="Completed">Completed</option>
              </select>
            </div>
            <button type="submit" class="btn btn-primary">Create Project</button>
          </form>
        </div>

        <!-- Project List -->
        <div class="project-list-container">
          <ul class="project-list">
            <% if (typeof projectList !== 'undefined' && Array.isArray(projectList) && projectList.length > 0) { %>
              <% for(let i = 0; i < projectList.length; i++) { %>
                <li class="project-item">
                  <div class="project-header">
                    <div class="project-title">
                      <h3><%= projectList[i].name %></h3>
                    </div>
                    <div class="project-actions">
                      <button class="edit-btn" data-id="<%= projectList[i]._id %>">
                        <i class="fas fa-edit"></i>
                      </button>
                      <button class="delete-btn" data-id="<%= projectList[i]._id %>">
                        <i class="fas fa-trash-alt"></i>
                      </button>
                    </div>
                  </div>
                  
                  <div class="project-documents">
                    <div class="document-column" data-project-id="<%= projectList[i]._id %>">
                      <h3>Documents</h3>
                      <div class="document-list" id="documentList-<%= projectList[i]._id %>">
                        <!-- Documents will be loaded here dynamically -->
                      </div>
                      <button class="add-document-btn" onclick="showAddDocumentModal('<%= projectList[i]._id %>')">
                        Add Document
                      </button>
                    </div>
                  </div>
                </li>
              <% } %>
            <% } else { %>
              <li>No projects found.</li>
            <% } %>
          </ul>
        </div>
      </div>
    </section>
    <!-- Add Modal HTML -->
    <div id="editProjectModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h1>Edit Project</h1>
            <form id="editProjectForm" method="POST">
                <div class="form-group">
                    <label for="name">Project Name</label>
                    <input type="text" name="name" id="name" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea name="description" id="description" class="form-control" required></textarea>
                </div>
                <div class="form-group">
                    <label for="startDate">Start Date</label>
                    <input type="date" name="startDate" id="startDate" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="endDate">End Date</label>
                    <input type="date" name="endDate" id="endDate" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="status">Status</label>
                    <select name="status" id="status" class="form-control">
                        <option value="Not Started">Not Started</option>
                        <option value="In Progress">In Progress</option>
                        <option value="Completed">Completed</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">Update Project</button>
            </form>
        </div>
    </div>
    <!-- Add Document Modal -->
    <div id="addDocumentModal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h2>Add New Document</h2>
            <form id="addDocumentForm">
                <div class="form-group">
                    <label for="documentTitle">Title</label>
                    <input type="text" id="documentTitle" name="title" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="documentContent">Content</label>
                    <textarea id="documentContent" name="content" class="form-control" required></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Add Document</button>
            </form>
        </div>
    </div>
    <footer>
      all thanks goes to the 100devs
    </footer>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const editModal = document.getElementById('editProjectModal');
        const closeBtn = editModal.querySelector('.close');
        const editForm = document.getElementById('editProjectForm');
        let currentProjectId = null;

        // Delete project functionality
        const deleteButtons = document.querySelectorAll('.delete-btn');
        deleteButtons.forEach(button => {
          button.addEventListener('click', function(event) {
            const projectId = event.target.closest('button').getAttribute('data-id');
            fetch(`/profile/project/${projectId}/delete`, {
              method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                window.location.reload();
              } else {
                alert('Failed to delete project');
              }
            });
          });
        });

        // Edit project functionality
        const editButtons = document.querySelectorAll('.edit-btn');
        editButtons.forEach(button => {
          button.addEventListener('click', async function(e) {
            e.preventDefault();
            currentProjectId = this.getAttribute('data-id');
            
            try {
              // Fetch project data
              const response = await fetch(`/profile/project/${currentProjectId}/data`);
              const project = await response.json();
              
              // Populate form
              editForm.querySelector('#name').value = project.name;
              editForm.querySelector('#description').value = project.description;
              editForm.querySelector('#startDate').value = project.startDate.split('T')[0];
              editForm.querySelector('#endDate').value = project.endDate.split('T')[0];
              editForm.querySelector('#status').value = project.status;
              
              // Show modal
              editModal.style.display = 'block';
            } catch (error) {
              console.error('Error:', error);
              alert('Failed to load project data');
            }
          });
        });

        // Close modal when clicking (x)
        closeBtn.onclick = function() {
          editModal.style.display = 'none';
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
          if (event.target == editModal) {
            editModal.style.display = 'none';
          }
        }

        // Handle form submission
        editForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          const formData = {
            name: this.querySelector('#name').value,
            description: this.querySelector('#description').value,
            startDate: this.querySelector('#startDate').value,
            endDate: this.querySelector('#endDate').value,
            status: this.querySelector('#status').value
          };

          try {
            const response = await fetch(`/profile/project/${currentProjectId}?_method=PUT`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(formData)
            });

            if (response.ok) {
              window.location.reload();
            } else {
              alert('Failed to update project');
            }
          } catch (error) {
            console.error('Error:', error);
            alert('Failed to update project');
          }
        });

        let currentColumnId = null;

        function showAddDocumentModal(projectId) {
            currentColumnId = projectId;
            const modal = document.getElementById('addDocumentModal');
            modal.style.display = 'block';
        }

        // Load documents for each project
        async function loadDocuments(projectId) {
            try {
                const response = await fetch(`/profile/project/${projectId}/documents`);
                const documents = await response.json();
                const documentList = document.getElementById(`documentList-${projectId}`);
                
                documentList.innerHTML = documents.map(doc => `
                    <div class="document-card" draggable="true" data-id="${doc._id}">
                        <h4>${doc.title}</h4>
                        <p>${doc.content}</p>
                        <div class="document-actions">
                            <button onclick="editDocument('${doc._id}')">Edit</button>
                            <button onclick="deleteDocument('${doc._id}')">Delete</button>
                        </div>
                    </div>
                `).join('');
                
                // Add drag and drop functionality
                setupDragAndDrop();
            } catch (error) {
                console.error('Error loading documents:', error);
            }
        }

        // Initialize drag and drop
        function setupDragAndDrop() {
            const documents = document.querySelectorAll('.document-card');
            const columns = document.querySelectorAll('.document-column');
            
            documents.forEach(doc => {
                doc.addEventListener('dragstart', handleDragStart);
                doc.addEventListener('dragend', handleDragEnd);
            });
            
            columns.forEach(column => {
                column.addEventListener('dragover', handleDragOver);
                column.addEventListener('drop', handleDrop);
            });
        }

        // Add document form submission
        document.getElementById('addDocumentForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const title = document.getElementById('documentTitle').value;
            const content = document.getElementById('documentContent').value;
            
            try {
                const response = await fetch(`/profile/project/${currentColumnId}/document`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ title, content, columnId: currentColumnId })
                });
                
                if (response.ok) {
                    document.getElementById('addDocumentModal').style.display = 'none';
                    loadDocuments(currentColumnId);
                }
            } catch (error) {
                console.error('Error adding document:', error);
            }
        });

        // Load documents for all projects on page load
        document.addEventListener('DOMContentLoaded', () => {
            const projects = document.querySelectorAll('[data-project-id]');
            projects.forEach(project => {
                loadDocuments(project.dataset.projectId);
            });
        });

        // Modal elements
        const addDocumentModal = document.getElementById('addDocumentModal');
        const closeModalButtons = document.getElementsByClassName('close-modal');
        let currentProjectId = null;

        // Function to show modal
        window.showAddDocumentModal = function(projectId) {
            currentProjectId = projectId;
            addDocumentModal.style.display = 'block';
            // Reset form
            document.getElementById('addDocumentForm').reset();
        }

        // Close modal when clicking (x)
        Array.from(closeModalButtons).forEach(button => {
            button.addEventListener('click', function() {
                addDocumentModal.style.display = 'none';
            });
        });

        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target === addDocumentModal) {
                addDocumentModal.style.display = 'none';
            }
        });

        // Handle document form submission
        document.getElementById('addDocumentForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (!currentProjectId) {
                console.error('No project selected');
                return;
            }

            const formData = {
                title: document.getElementById('documentTitle').value,
                content: document.getElementById('documentContent').value,
                projectId: currentProjectId
            };

            try {
                const response = await fetch(`/profile/project/${currentProjectId}/document`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    // Close modal
                    addDocumentModal.style.display = 'none';
                    // Refresh documents list
                    loadDocuments(currentProjectId);
                } else {
                    console.error('Error adding document:', response.statusText);
                }
            } catch (error) {
                console.error('Error adding document:', error);
            }
        });
      });
    </script>
  </body>
</html> 