            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
                });
            const title = document.createElement('h1');
            title.className = 'title';
            }
        }

        // Modify your init function to call initializeBoard
        function init() {
            // ... your existing init code ...
            
            // Initialize board with project data first
            initializeBoard();
            
            // Then load any local storage updates
            loadFromLocalStorage();
            
            // ... rest of your init code ...
        }

        // Global variables
        const projectId = window.location.pathname.split('/project/')[1];

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Global variables
        const projectId = window.location.pathname.split('/project/')[1];

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
                event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;
                        
                        const newColumn = document.createElement('ul');
                        const columnNav = document.createElement('nav');
                        columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
                        const buttonContainer = document.createElement('div');
                        buttonContainer.className = 'button-container';

                        // Add document button
                        const newDocPopup = document.createElement("button");
                        newDocPopup.className = 'newDocPopupButton';
                        newDocPopup.dataset.column = newColumn.id;
                        newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
                        buttonContainer.appendChild(newDocPopup);

                        // Add color picker
                        const colorPicker = document.createElement("input");
                        colorPicker.type = "color";
                        colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
                        colorPicker.addEventListener('input', async (e) => {
                            newColumn.style.backgroundColor = e.target.value;
                            await saveColumnColor(newColumn.id, e.target.value);
                            saveProjectToSession();
                        });
                        buttonContainer.appendChild(colorPicker);

                        // Delete button
                        const deleteMe = document.createElement("button");
                        deleteMe.className = 'deleteButton';
                        deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
                        buttonContainer.appendChild(deleteMe);

                        // Add the button container to nav
                        columnNav.appendChild(buttonContainer);

                        // Add title
                        const title = document.createElement('h1');
                        title.className = 'title';
            title.textContent = columnContent;
                        title.addEventListener("dblclick", () => edit(title));
                        columnNav.appendChild(title);

                        newColumn.appendChild(columnNav);
                        dragparent.appendChild(newColumn);
                        listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            const newColumn = document.createElement('ul');
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            newDocPopup.dataset.column = newColumn.id;
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
                saveProjectToSession();

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer.appendChild(deleteMe);

            // Add the button container to nav
            columnNav.appendChild(buttonContainer);

            // Add title
            const title = document.createElement('h1');
            title.className = 'title';
            title.textContent = columnContent;
            title.addEventListener("dblclick", () => edit(title));
            columnNav.appendChild(title);

            newColumn.appendChild(columnNav);
            dragparent.appendChild(newColumn);
            listOfColumn.push(newColumn);
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            document.getElementById('createColumnForm').reset();

            // Save to session storage
            saveProjectToSession();

            // Reinitialize dragula
            initializeDragula();
        }

        // Define createColumnFunc before init
        function createColumnFunc(event) {
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;
            event.preventDefault();
            const dragparent = document.getElementById('dragparent');
            const columnContent = document.getElementById('columnContent').value;

            const newColumn = document.createElement('ul');
            const columnNav = document.createElement('nav');
            columnNav.className = 'columnNav';

            newColumn.className = 'dragColumn';
            newColumn.id = `column-${Math.random()}`;

            // Create a container for buttons
            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            // Add document button
            const newDocPopup = document.createElement("button");
            newDocPopup.className = 'newDocPopupButton';
            newDocPopup.dataset.column = newColumn.id;
            newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
            buttonContainer.appendChild(newDocPopup);

            // Add color picker
            const colorPicker = document.createElement("input");
            colorPicker.type = "color";
            colorPicker.className = 'column-color-picker';
            colorPicker.value = '#f9f9f9';
            colorPicker.addEventListener('input', async (e) => {
                newColumn.style.backgroundColor = e.target.value;
                await saveColumnColor(newColumn.id, e.target.value);
                saveProjectToSession();
            });
            buttonContainer.appendChild(colorPicker);

            // Delete button
            const deleteMe = document.createElement("button");
            deleteMe.className = 'deleteButton';
            deleteMe.addEventListener("click", () => deleteDocument(newColumn.id));
            buttonContainer