<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- css link -->
    <link rel="stylesheet" href="/css/reset.css" />
    <link rel="stylesheet" href="/css/style.css" />
    <!-- fonts link -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,400;0,700;0,900;1,400;1,700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <!-- Font Awesome link -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <title>User Profile</title>
    <title>User Profile</title>
    <style>
        /* ... existing styles ... */
        
        .edit-btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            position: relative;
            width: 30px;
            height: 30px;
            margin-left: 5px;
            border: none;
            background: none;
            cursor: pointer;
        }

        .edit-btn i {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 16px;
            color: #666;
        }

        .edit-btn:hover i {
            color: #333;
        }

        .project-list {
            list-style: none;
            padding: 0;
            margin: 20px 0;
        }

        .project-item {
            background: #fff;
            border: 1px solid #ddd;
            border-radius: 8px;
            margin-bottom: 20px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .project-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        .project-header a {
            font-size: 1.2em;
            font-weight: bold;
            color: #333;
            text-decoration: none;
        }

        .project-actions {
            display: flex;
            gap: 10px;
        }

        .project-documents {
            margin-top: 15px;
        }

        .document-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .document-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 15px;
            padding: 10px 0;
        }

        .document-card {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            padding: 15px;
            position: relative;
        }

        .document-card h4 {
            margin: 0 0 10px 0;
            font-weight: bold;
        }

        .document-card p {
            margin: 0;
            color: #666;
            font-size: 0.9em;
        }

        .document-actions {
            display: flex;
            gap: 8px;
            margin-top: 10px;
        }

        .add-document-btn {
            background: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 12px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .add-document-btn:hover {
            background: #0056b3;
        }
    </style>
  </head>
  <body>
    <!-- header -->
    <%- include('partials/header') %>
    <h1>Adjust your profile here</h1>
    <a href="/">To index Page</a>
    <section class="profile-layout">
      <!-- Project Creation Form -->
      <form action="/project/createProject" method="POST">
        <div class="form-group">
          <label for="name">Project Name</label>
          <input type="text" name="name" id="name" class="form-control" required>
        </div>
        <div class="form-group">
          <label for="description">Description</label>
          <textarea name="description" id="description" class="form-control" required></textarea>
        </div>
        <div class="form-group">
          <label for="startDate">Start Date</label>
          <input type="date" name="startDate" id="startDate" class="form-control" required>
        </div>
        <div class="form-group">
          <label for="endDate">End Date</label>
          <input type="date" name="endDate" id="endDate" class="form-control" required>
        </div>
        <div class="form-group">
          <label for="status">Status</label>
          <select name="status" id="status" class="form-control">
            <option value="Not Started">Not Started</option>
            <option value="In Progress">In Progress</option>
            <option value="Completed">Completed</option>
          </select>
        </div>
        <button type="submit" class="btn btn-primary">Create Project</button>
      </form>

      <!-- Project List -->
      <ul class="project-list">
        <% if (typeof projectList !== 'undefined' && projectList.length > 0) { %>
          <% projectList.forEach(project => { %>
            <li class="project-item">
                <div class="project-header">
                    <a href="/project/<%= project._id %>"><%= project.name %></a>
                    <div class="project-actions">
                        <button class="delete-btn" data-id="<%= project._id %>">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                        <a href="/profile/project/<%= project._id %>/edit" class="edit-btn">
                            <i class="fas fa-edit"></i>
                        </a>
                    </div>
                </div>
                
                <div class="project-details">
                    <p><strong>Status:</strong> <%= project.status %></p>
                    <p><strong>Columns:</strong> <%= project.columns ? project.columns.length : 0 %></p>
                    <p><strong>Documents:</strong> <%= project.columns ? project.columns.reduce((sum, col) => sum + (col.documents ? col.documents.length : 0), 0) : 0 %></p>
                </div>
            </li>
          <% }) %>
        <% } else { %>
          <li>No projects found</li>
        <% } %>
      </ul>
    </section>
    <!-- Add Modal HTML -->
    <div id="editModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <form id="editProjectForm">
          <div class="form-group">
            <label for="editName">Project Name</label>
            <input type="text" name="name" id="editName" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="editDescription">Description</label>
            <textarea name="description" id="editDescription" class="form-control" required></textarea>
          </div>
          <div class="form-group">
            <label for="editStartDate">Start Date</label>
            <input type="date" name="startDate" id="editStartDate" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="editEndDate">End Date</label>
            <input type="date" name="endDate" id="editEndDate" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="editStatus">Status</label>
            <select name="status" id="editStatus" class="form-control">
              <option value="Not Started">Not Started</option>
              <option value="In Progress">In Progress</option>
              <option value="Completed">Completed</option>
            </select>
          </div>
          <button type="submit" class="btn btn-primary">Update Project</button>
        </form>
      </div>
    </div>
    <!-- Add Document Modal -->
    <div id="addDocumentModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <form id="addDocumentForm">
                <div class="form-group">
                    <label for="documentTitle">Title</label>
                    <input type="text" id="documentTitle" required>
                </div>
                <div class="form-group">
                    <label for="documentContent">Content</label>
                    <textarea id="documentContent" required></textarea>
                </div>
                <button type="submit">Add Document</button>
            </form>
        </div>
    </div>
    <footer>
      all thanks goes to the 100devs
    </footer>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const modal = document.getElementById('editModal');
        const addDocumentModal = document.getElementById('addDocumentModal');
        const span = document.getElementsByClassName('close')[0];
        const editProjectForm = document.getElementById('editProjectForm');
        let currentProjectId = null;

        // Delete project functionality
        const deleteButtons = document.querySelectorAll('.delete-btn');
        deleteButtons.forEach(button => {
          button.addEventListener('click', async function(event) {
            // Prevent any parent elements from handling the click
            event.stopPropagation();
            
            if (confirm('Are you sure you want to delete this project?')) {
              const projectId = this.getAttribute('data-id');
              try {
                const response = await fetch(`/profile/project/${projectId}/delete`, {
                  method: 'DELETE',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });
                
                const data = await response.json();
                if (data.success) {
                  // Remove the project item from the DOM
                  this.closest('.project-item').remove();
                } else {
                  alert('Failed to delete project');
                }
              } catch (error) {
                console.error('Error:', error);
                alert('Failed to delete project');
              }
            }
          });
        });

        // Edit project functionality
        const editButtons = document.querySelectorAll('.edit-btn');
        editButtons.forEach(button => {
          button.addEventListener('click', async function(event) {
            event.preventDefault();
            event.stopPropagation();
            
            const projectId = this.getAttribute('href').split('/edit')[0].split('project/')[1];
            currentProjectId = projectId;
            
            try {
              // Fetch project data
              const response = await fetch(`/profile/project/${projectId}/data`);
              if (!response.ok) throw new Error('Failed to fetch project data');
              
              const project = await response.json();
              
              // Populate form
              document.getElementById('editName').value = project.name;
              document.getElementById('editDescription').value = project.description;
              document.getElementById('editStartDate').value = project.startDate.split('T')[0];
              document.getElementById('editEndDate').value = project.endDate.split('T')[0];
              document.getElementById('editStatus').value = project.status;
              
              // Show modal
              modal.style.display = 'block';
            } catch (error) {
              console.error('Error:', error);
              alert('Failed to load project data');
            }
          });
        });

        // Close modal when clicking (x)
        span.onclick = function() {
          modal.style.display = 'none';
        }

        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
            if (event.target === addDocumentModal) {
                addDocumentModal.style.display = 'none';
                // Clear form fields
                document.getElementById('documentTitle').value = '';
                document.getElementById('documentContent').value = '';
            }
        });

        // Close modal when pressing Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                if (modal.style.display === 'block') {
                    modal.style.display = 'none';
                }
            }
        });

        // Close button functionality
        document.querySelectorAll('.close').forEach(closeBtn => {
            closeBtn.addEventListener('click', function() {
                const modal = this.closest('.modal');
                modal.style.display = 'none';
            });
        });

        // Handle form submission
        editProjectForm.addEventListener('submit', async function(event) {
          event.preventDefault();
          
          const formData = {
            name: document.getElementById('editName').value,
            description: document.getElementById('editDescription').value,
            startDate: document.getElementById('editStartDate').value,
            endDate: document.getElementById('editEndDate').value,
            status: document.getElementById('editStatus').value
          };

          try {
            const response = await fetch(`/profile/project/${currentProjectId}?_method=PUT`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(formData)
            });

            if (response.ok) {
              window.location.reload();
            } else {
              alert('Failed to update project');
            }
          } catch (error) {
            console.error('Error:', error);
            alert('Failed to update project');
          }
        });

        let currentColumnId = null;

        function showAddDocumentModal(projectId) {
            currentColumnId = projectId;
            const modal = document.getElementById('addDocumentModal');
            modal.style.display = 'block';
        }

        // Load documents for each project
        async function loadDocuments(projectId) {
            try {
                const response = await fetch(`/profile/project/${projectId}/documents`);
                const documents = await response.json();
                const documentList = document.getElementById(`documentList-${projectId}`);
                
                documentList.innerHTML = documents.map(doc => `
                    <div class="document-card" draggable="true" data-id="${doc._id}">
                        <h4>${doc.title}</h4>
                        <p>${doc.content}</p>
                        <div class="document-actions">
                            <button onclick="editDocument('${doc._id}')">Edit</button>
                            <button onclick="deleteDocument('${doc._id}')">Delete</button>
                        </div>
                    </div>
                `).join('');
                
                // Add drag and drop functionality
                setupDragAndDrop();
            } catch (error) {
                console.error('Error loading documents:', error);
            }
        }

        // Initialize drag and drop
        function setupDragAndDrop() {
            const documents = document.querySelectorAll('.document-card');
            const columns = document.querySelectorAll('.document-column');
            
            documents.forEach(doc => {
                doc.addEventListener('dragstart', handleDragStart);
                doc.addEventListener('dragend', handleDragEnd);
            });
            
            columns.forEach(column => {
                column.addEventListener('dragover', handleDragOver);
                column.addEventListener('drop', handleDrop);
            });
        }

        // Add document form submission
        document.getElementById('addDocumentForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const title = document.getElementById('documentTitle').value;
            const content = document.getElementById('documentContent').value;
            
            try {
                const response = await fetch(`/profile/project/${currentColumnId}/document`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ title, content, columnId: currentColumnId })
                });
                
                if (response.ok) {
                    document.getElementById('addDocumentModal').style.display = 'none';
                    loadDocuments(currentColumnId);
                }
            } catch (error) {
                console.error('Error adding document:', error);
            }
        });

        // Load documents for all projects on page load
        document.addEventListener('DOMContentLoaded', () => {
            const projects = document.querySelectorAll('[data-project-id]');
            projects.forEach(project => {
                loadDocuments(project.dataset.projectId);
            });
        });

        // In your form submission handler
        document.querySelector('form[action="/project/createProject"]').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = {
                name: document.getElementById('name').value,
                description: document.getElementById('description').value,
                startDate: document.getElementById('startDate').value,
                endDate: document.getElementById('endDate').value,
                status: document.getElementById('status').value,
                columns: [] // Initialize empty columns array
            };

            try {
                const response = await fetch('/project/createProject', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    window.location.reload();
                }
            } catch (error) {
                console.error('Error:', error);
            }
        });
      });
    </script>
  </body>
</html> 