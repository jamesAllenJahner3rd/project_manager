<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Without reset.css: inconsistent element styling across browsers -->
    <link rel="stylesheet" href="/css/reset.css" />
    <link rel="stylesheet" href="/css/style.css" />
    <link rel="stylesheet" href="/css/dragula.css"/>
    <!-- Without font preconnect: slow font loading and page render -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,400;0,700;0,900;1,400;1,700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    
    <title>Project Template</title>
    <style>
        .drag-container {
            display: flex;
            flex-wrap: wrap;
            height: fit-content;
            overflow-y: auto;
        }
        .dragColumn {
            border: 1px solid #ccc;
            padding: 10px;
            background-color: #f9f9f9;
            box-sizing: border-box;
            word-wrap: break-word;
            margin: 10px;
            flex: 1 0 10%;
            position: relative;
           display: flex;
           position: relative;

           flex-flow: column nowrap;
           align-items: inherit;
           justify-content: flex-start;
        }
        .gu-mirror{
            /*this was required to flip right-side -up the dragged objects.  */
            transform: rotate(0deg);
        }
        .handle, .bar{
            border:  1px solid #ccc;
            font-size: 1.5rem;
            width: 3vh;
            height: 3vh;
            padding: 0.1vh 0 0 0;
            display: inline-block;
            text-align: center;
            background-image: url(/images/Icons2.webp);
            background-color: goldenrod;
            background-size: 1155%;
            background-position: 90.5% 37%;
            border-radius: 22%;
        }
        .dragDocument {
            padding: 12px 45px 12px 12px; /* Add padding on the right for icons */
            margin: 8px 0;
            border-radius: 4px;
            background-color: #08CF65;
            position: relative;
            cursor: move;
        }
        .document-container {
            position: relative;
            width: 100%;
        }
        /* Create a container for the icons */
        .document-icons {
            position: absolute;
            top: 50%;
            right: -35px; /* Adjust based on padding */
            transform: translateY(-50%);
            display: flex;
            gap: 8px;
            align-items: center;
        }
        .deleteButton {
            border: 1px solid #ccc;
            width: 24px;
            height: 24px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background-image: url(/images/Icons1.webp);
            background-color: transparent;
            background-size: 1300%;
            background-position: 63% 37%;
            border-radius: 4px;
            position: absolute;
            top: 8px;
            right: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .deleteButton:hover {
            background-color: #ff4444;
            border-color: #ff0000;
            background-image: url(/images/Icons1.webp);
        }
        .dragDocument .deleteButton{
            align-self: flex-end;
        }
        .newDocPopupButton {
            border: 1px solid #ccc;
            font-size: 1.5rem;
            width: 3vw;
            height: 3vh;
            padding: 0.1vh 0 0 0;
            display: flex
;       
            text-align: center;
            background-image: url(/images/Icons1.webp);
            background-color: lightgrey;
            background-size: 1000%;
            background-position: 36% 63%;
            border-radius: 22%;
            position: relative;
            margin: 1% 1%;
            
        }
         nav.columnNav{
            display: flex;
            flex-flow: row nowrap;
            justify-content: space-between;
            position: relative;
            align-items: baseline;
        }
        #createDocumentForm{
            border: 1px solid black;
            position: fixed;
            width: 30%;
            z-index: 2;
            background-color: white;
            top: 50%;
            left: calc(50% + 400px);
            transform: translate(-50%, -50%);
        }
        body{
            position: relative;
            height: 100vh;
        }
        footer{
            position: sticky;
            top: 100vh;
        }
        .close-btn {
            position: absolute;
            right: 10px;
            top: 10px;
            font-size: 24px;
            cursor: pointer;
            color: #666;
            transition: color 0.2s;
        }
        
        .close-btn:hover {
            color: #000;
        }

        .form-header {
            position: relative;
            padding: 15px;
            border-bottom: 1px solid #ddd;
            margin-bottom: 15px;
        }

        .column-color-picker,
        .document-color-picker {
            width: 25px;
            height: 25px;
            padding: 0;
            border: 1px solid #ccc;
            border-radius: 4px;
            cursor: pointer;
            background-color: transparent;
            transition: transform 0.2s ease;
        }

        .column-color-picker:hover,
        .document-color-picker:hover {
            transform: scale(1.1);
        }

        .column-color-picker::-webkit-color-swatch-wrapper,
        .document-color-picker::-webkit-color-swatch-wrapper {
            padding: 0;
        }

        .column-color-picker::-webkit-color-swatch,
        .document-color-picker::-webkit-color-swatch {
            border: none;
            border-radius: 3px;
        }

        .column-color-picker::-moz-color-swatch,
        .document-color-picker::-moz-color-swatch {
            border: none;
            border-radius: 3px;
        }

        .dragColumn {
            transition: background-color 0.3s ease;
            min-height: 50px; /* Ensure columns are droppable when empty */
        }

        nav.columnNav {
            display: flex;
            flex-flow: row nowrap;
            justify-content: flex-start;
            position: relative;
            align-items: center;
            gap: 8px;
            padding: 5px;
        }

        .button-container {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 10px;
        }

        .dragDocument:hover {
            transform: translateY(-2px);
        }

        .gu-mirror {
            cursor: grabbing;
        }

        .gu-transit {
            opacity: 0.4;
            background-color: #f0f0f0;
        }

        .document-color-picker {
            width: 24px;
            height: 24px;
            padding: 0;
            border: 1px solid #ccc;
            border-radius: 4px;
            cursor: pointer;
        }

        .document-content {
            margin-right: 30px; /* Space for delete button */
        }

        .document-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .document-header h2 {
            margin: 0;
            font-size: 16px;
            font-weight: bold;
            color: #333;
            flex-grow: 1;
        }

        .dragDocument p {
            margin: 5px 0 0 0;
            font-size: 14px;
            color: #333;
        }

        .deleteButton {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 24px;
            height: 24px;
        }
    </style>
  </head>

  <body onload="init()">
    <!-- Without header: navigation missing -->
    <%- include('partials/header') %>

    <!-- Without this form: no way to c
     new columns -->
    <form id="createColumnForm">
        <div class="form-group">
            <label for="columnContent">Column Content</label>
            <input type="text" id="columnContent" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-primary">Create Column</button>
    </form>

    <!-- Without hidden attribute: form shows before any columns exist -->
    <form id="createDocumentForm" hidden class="document-form">
        <div class="form-header">
        <h2>Create Document</h2>
            <span class="close-btn">&times;</span>
        </div>
        <div class="form-group">
            <label for="documentTitle">Document Title</label>
            <input type="text" id="documentTitle" class="form-control" required>
            
            <label for="documentDescription">Document Description</label>
            <textarea id="documentDescription" class="form-control"></textarea>
            
            <div class="form-buttons">
                <input type="button" id="documentColumn" class="form-control btn-secondary" value="Column">
                <input type="button" id="documentAssignee" class="form-control btn-secondary" value="Assignee">
                <input type="button" id="documentLabel" class="form-control btn-secondary" value="Label">
                <input type="button" id="documentProject" class="form-control btn-secondary" value="Assign to Project">
                <input type="button" id="MileStone" class="form-control btn-secondary" value="MileStone">
            </div>
        </div>
        <button type="submit" class="btn btn-primary" id='createDoc'>Create Document</button>
    </form>

    <!-- Without this container: nowhere to place dragable columns -->
    <div id="dragparent" class="drag-container"></div>

    <!-- Without footer: missing page closure and contact info -->
    <%- include('partials/footer') %>
    
    <!-- Without main.js: core application features missing -->
    <script src="/js/main.js"></script>
    <!-- Without dragula.js: no drag-and-drop functionality -->
    <script src="/js/dragula.js"></script>

    <script>
        // Without this array: unable to track columns for dragula integration
        let listOfColumn = [];

        function init() {
            const createColumnForm = document.getElementById('createColumnForm');
            const createDocumentForm = document.getElementById('createDocumentForm');
            const dragparent = document.getElementById('dragparent');
            let columnDrake;
            let documentDrake;

            // Move these functions to be accessible in the entire init scope
            function initDragula() {
                // Initialize column dragula
                if (columnDrake) {
                    columnDrake.destroy();
                }
                
                columnDrake = dragula([dragparent], {
                    moves: function (el, container, handle) {
                        return el.classList.contains('dragColumn') && 
                               (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');
                    },
                    accepts: function (el, target) {
                        return el.classList.contains('dragColumn') && target === dragparent;
                    },
                    direction: 'horizontal'
                });

                // Save column order after drag
                columnDrake.on('drop', function() {
                    saveToLocalStorage();
                });

                // Initialize document dragula with updated column list
                if (documentDrake) {
                    documentDrake.destroy();
                }

                // Get fresh list of columns
                listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));
                
                documentDrake = dragula(listOfColumn, {
                    moves: function (el, container, handle) {
                        return el.classList.contains('dragDocument');
                    },
                    accepts: function (el, target) {
                        return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');
                    },
                    revertOnSpill: true,
                    removeOnSpill: false
                });

                documentDrake.on('drop', function(el, target, source) {
                    if (target !== source) {
                        const documentId = el.id;
                        const newColumnId = target.id;
                        const oldColumnId = source.id;
                        updateDocumentColumn(documentId, newColumnId, oldColumnId);
                    }
                    saveToLocalStorage();
                });
            }

            function saveToLocalStorage() {
                const boardState = {
                    columns: Array.from(document.querySelectorAll('.dragColumn')).map(column => {
                        const documents = Array.from(column.querySelectorAll('.dragDocument')).map(doc => ({
                            id: doc.id,
                            title: doc.querySelector('h2').textContent,
                            description: doc.querySelector('p').textContent,
                            backgroundColor: doc.style.backgroundColor || '#08CF65',
                            colorPickerValue: doc.querySelector('.document-color-picker').value
                        }));

                        return {
                            id: column.id,
                            title: column.querySelector('.title').textContent,
                            backgroundColor: column.style.backgroundColor || '#f9f9f9',
                            colorPickerValue: column.querySelector('.column-color-picker').value,
                            documents: documents
                        };
                    })
                };

                localStorage.setItem('kanbanBoard', JSON.stringify(boardState));
            }

            function loadFromLocalStorage() {
                const savedData = localStorage.getItem('kanbanBoard');
                if (!savedData) return;

                const boardState = JSON.parse(savedData);
                
                // Clear existing columns
                dragparent.innerHTML = '';
                listOfColumn = [];

                boardState.columns.forEach(column => {
                    createColumnFromSaved(column);
                });

                // Reinitialize dragula after loading
                initDragula();
            }

            function createColumnFromSaved(column) {
                const newColumn = document.createElement('ul');
                newColumn.className = 'dragColumn';
                newColumn.id = column.id;
                newColumn.style.backgroundColor = column.backgroundColor;

                // Create column structure (nav, buttons, etc.)
                const columnNav = document.createElement('nav');
                const buttonContainer = document.createElement('div');
                buttonContainer.className = 'button-container';

                // Add document button
                const newDocPopup = document.createElement("button");
                newDocPopup.className = 'newDocPopupButton';
                newDocPopup.dataset.column = newColumn.id;
                newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
                buttonContainer.appendChild(newDocPopup);

                // Add color picker
                const colorPicker = document.createElement("input");
                colorPicker.type = "color";
                colorPicker.className = 'column-color-picker';
                colorPicker.value = column.colorPickerValue;
                colorPicker.addEventListener('input', (e) => {
                    newColumn.style.backgroundColor = e.target.value;
                    saveToLocalStorage();
                });
                buttonContainer.appendChild(colorPicker);

                // Delete button
                const deleteMe = document.createElement("button");
                deleteMe.className = 'deleteButton';
                deleteMe.dataset.column = newColumn.id;
                deleteMe.addEventListener("click", () => deleteDocument(deleteMe.dataset.column));
                buttonContainer.appendChild(deleteMe);

                columnNav.appendChild(buttonContainer);

                // Add title
                const title = document.createElement('h1');
                title.className = 'title';
                title.textContent = column.title;
                title.addEventListener("dblclick", () => edit(title));
                columnNav.appendChild(title);

                newColumn.appendChild(columnNav);

                // Create saved documents
                column.documents.forEach(doc => {
                    const documentLineItem = createDocumentFromSaved(doc);
                    newColumn.appendChild(documentLineItem);
                });

                dragparent.appendChild(newColumn);
                listOfColumn.push(newColumn);
            }

            function createDocumentFromSaved(doc) {
                const documentLineItem = document.createElement('li');
                documentLineItem.className = 'dragDocument';
                documentLineItem.id = doc.id;
                documentLineItem.style.backgroundColor = doc.backgroundColor;

                const docContainer = document.createElement('div');
                docContainer.className = 'document-container';

                // Add title
                const docTitle = document.createElement('h2');
                docTitle.textContent = doc.title;
                docTitle.style.fontWeight = 'bold';
                docTitle.addEventListener("dblclick", () => edit(docTitle));
                docContainer.appendChild(docTitle);

                // Add description
                const docDescription = document.createElement('p');
                docDescription.textContent = doc.description;
                docDescription.addEventListener("dblclick", () => edit(docDescription));
                docContainer.appendChild(docDescription);

                // Add color picker
                const colorPicker = document.createElement('input');
                colorPicker.type = 'color';
                colorPicker.className = 'document-color-picker';
                colorPicker.value = doc.colorPickerValue;
                colorPicker.style.position = 'absolute';
                colorPicker.style.right = '40px';
                colorPicker.style.top = '10px';
                colorPicker.addEventListener('input', (e) => {
                    documentLineItem.style.backgroundColor = e.target.value;
                    saveToLocalStorage();
                });
                docContainer.appendChild(colorPicker);

                // Add delete button
                const deleteMe = document.createElement("button");
                deleteMe.className = 'deleteButton';
                deleteMe.dataset.document = documentLineItem.id;
                deleteMe.addEventListener("click", () => deleteDocument(deleteMe.dataset.document));
                docContainer.appendChild(deleteMe);

                documentLineItem.appendChild(docContainer);
                return documentLineItem;
            }

            // Without this event listener: document form submission not handled
            createDocumentForm.addEventListener('submit', createDocumentFunc);

            // Without this event listener: columns can't be created
                // Add to column
                const parentColumn = document.getElementById(`${columnID}`);
                parentColumn.appendChild(documentLineItem);

                // Reset and close form
                createDocumentForm.reset();
                createDocumentPopup(null);

                // Add this at the end of the function
                saveToLocalStorage();
            }

            // Function to update document's column in database
            async function updateDocumentColumn(documentId, newColumnId, oldColumnId) {
                try {
                    const response = await fetch(`/projects/documents/${documentId}/move`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            newColumnId: newColumnId,
                            oldColumnId: oldColumnId
                        })
                    });

                    if (!response.ok) {
                        console.error('Failed to update document column');
                    }
                } catch (error) {
                    console.error('Error updating document column:', error);
                }
            }

            // Call loadFromLocalStorage when page loads
            loadFromLocalStorage();

            // Load saved state when page loads
            loadFromLocalStorage();

            // Add save to localStorage after drag operations
            documentDrake.on('drop', function(el, target, source) {
                // ... existing drop code ...
                saveToLocalStorage();
            });
        }

        function deleteDocument(docID){
            theDoomedDocument = document.getElementById(docID)
            if(theDoomedDocument){
                theDoomedDocument.parentNode.removeChild(theDoomedDocument)
            }

            // Add save to localStorage after deletion
            saveToLocalStorage();
        }
        function edit(element){
            let text = element.textContent
            element.textContent = ''
            const rewrite =document.createElement('input');
            rewrite.classList.add('form-control');
            rewrite.id = "editInput";
            rewrite.type ="textbox";
            rewrite.placeholder = text
            rewrite.addEventListener("keydown", function(event) {
                if (event.key === "Enter") {
                  event.preventDefault(); // the page would reload otherwise.
                  console.log(rewrite.value||"it's empty")
                  element.textContent = rewrite.value||rewrite.placeholder
                  delete rewrite
                }if (event.key === "Escape") {
                    console.log('escape')
                    element.textContent = text;
                    rewrite.remove(); // Properly remove the input element from the DOM
                }
            })
            rewrite.addEventListener("blur",  function(event) {
                element.textContent = text;
                rewrite.remove(); // Properly remove the input element from the DOM
            })
            element.appendChild(rewrite).focus();

            // Add save to localStorage after editing
            saveToLocalStorage();
        }
    </script>
  </body>
</html>
