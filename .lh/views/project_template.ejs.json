{
    "sourceFile": "views/project_template.ejs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1741548554850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741549951158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,8 +136,27 @@\n     </style>\n   </head>\n \n   <body onload=\"init()\">\n+    <!-- Move the form here, right after body opens -->\n+    <div id=\"createDocumentForm\" style=\"display: none;\">\n+        <h2>Create Document</h2>\n+        <div class=\"form-group\">\n+            <label for=\"documentTitle\">Document Title</label>\n+            <input type=\"text\" id=\"documentTitle\" class=\"form-control\" required>\n+            \n+            <label for=\"documentDescription\">Document Description</label>\n+            <input type=\"textbox\" id=\"documentDescription\" class=\"form-control\">\n+            \n+            <input type=\"button\" id=\"documentColumn\" class=\"form-control\" value=\"Column\">\n+            <input type=\"button\" id=\"documentAssignee\" class=\"form-control\" value=\"Assignee\">\n+            <input type=\"button\" id=\"documentLabel\" class=\"form-control\" value=\"Label\">\n+            <input type=\"button\" id=\"documentProject\" class=\"form-control\" value=\"Assign to Project\">\n+            <input type=\"button\" id=\"MileStone\" class=\"form-control\" value=\"MileStone\">\n+        </div>\n+        <button type=\"submit\" class=\"btn btn-primary\" id='createDoc'>Create Document</button>\n+        <button type=\"button\" class=\"btn btn-secondary\" onclick=\"closeDocumentForm()\">Cancel</button>\n+    </div>\n     <!-- Without header: navigation missing -->\n     <%- include('partials/header') %>\n \n     <!-- Without this form: no way to c\n"
                },
                {
                    "date": 1741550065728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,27 +136,8 @@\n     </style>\n   </head>\n \n   <body onload=\"init()\">\n-    <!-- Move the form here, right after body opens -->\n-    <div id=\"createDocumentForm\" style=\"display: none;\">\n-        <h2>Create Document</h2>\n-        <div class=\"form-group\">\n-            <label for=\"documentTitle\">Document Title</label>\n-            <input type=\"text\" id=\"documentTitle\" class=\"form-control\" required>\n-            \n-            <label for=\"documentDescription\">Document Description</label>\n-            <input type=\"textbox\" id=\"documentDescription\" class=\"form-control\">\n-            \n-            <input type=\"button\" id=\"documentColumn\" class=\"form-control\" value=\"Column\">\n-            <input type=\"button\" id=\"documentAssignee\" class=\"form-control\" value=\"Assignee\">\n-            <input type=\"button\" id=\"documentLabel\" class=\"form-control\" value=\"Label\">\n-            <input type=\"button\" id=\"documentProject\" class=\"form-control\" value=\"Assign to Project\">\n-            <input type=\"button\" id=\"MileStone\" class=\"form-control\" value=\"MileStone\">\n-        </div>\n-        <button type=\"submit\" class=\"btn btn-primary\" id='createDoc'>Create Document</button>\n-        <button type=\"button\" class=\"btn btn-secondary\" onclick=\"closeDocumentForm()\">Cancel</button>\n-    </div>\n     <!-- Without header: navigation missing -->\n     <%- include('partials/header') %>\n \n     <!-- Without this form: no way to c\n"
                },
                {
                    "date": 1741550568162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,23 +150,29 @@\n         <button type=\"submit\" class=\"btn btn-primary\">Create Column</button>\n     </form>\n \n     <!-- Without hidden attribute: form shows before any columns exist -->\n-    <form id=\"createDocumentForm\" hidden>\n-        <h2>Create Document</h2>\n+    <form id=\"createDocumentForm\" hidden class=\"document-form\">\n+        <div class=\"form-header\">\n+            <h2>Create Document</h2>\n+            <span class=\"close-btn\">&times;</span>\n+        </div>\n         <div class=\"form-group\">\n             <label for=\"documentTitle\">Document Title</label>\n             <input type=\"text\" id=\"documentTitle\" class=\"form-control\" required>\n-            <input type=\"button\" id=\"documentColumn\" class=\"form-control\" value=\"Column\">\n+            \n             <label for=\"documentDescription\">Document Description</label>\n-            <input type=\"textbox\" id=\"documentDescription\" class=\"form-control\">\n+            <textarea id=\"documentDescription\" class=\"form-control\"></textarea>\n             \n-            <input type=\"button\" id=\"documentAssignee\" class=\"form-control\" value=\"Assignee\">\n-            <input type=\"button\" id=\"documentLabel\" class=\"form-control\" value=\"Label\">\n-            <input type=\"button\" id=\"documentProject\" class=\"form-control\" value=\"Assign to Project\">\n-            <input type=\"button\" id=\"MileStone\" class=\"form-control\" value=\"MileStone\">\n+            <div class=\"form-buttons\">\n+                <input type=\"button\" id=\"documentColumn\" class=\"form-control btn-secondary\" value=\"Column\">\n+                <input type=\"button\" id=\"documentAssignee\" class=\"form-control btn-secondary\" value=\"Assignee\">\n+                <input type=\"button\" id=\"documentLabel\" class=\"form-control btn-secondary\" value=\"Label\">\n+                <input type=\"button\" id=\"documentProject\" class=\"form-control btn-secondary\" value=\"Assign to Project\">\n+                <input type=\"button\" id=\"MileStone\" class=\"form-control btn-secondary\" value=\"MileStone\">\n+            </div>\n         </div>\n-        <button type=\"submit\" class=\"btn btn-primary\" id='createDoc' data-id=\"<%- %>\"\">Create Document</button>\n+        <button type=\"submit\" class=\"btn btn-primary\" id='createDoc'>Create Document</button>\n     </form>\n \n     <!-- Without this container: nowhere to place dragable columns -->\n     <div id=\"dragparent\" class=\"drag-container\"></div>\n"
                },
                {
                    "date": 1741550622287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,14 +117,15 @@\n             align-items: baseline;\n         }\n         #createDocumentForm{\n             border: 1px solid black;\n-            position : fixed;\n+            position: fixed;\n             width: 30%;\n             z-index: 2;\n             background-color: white;\n-            top:auto;\n-            left:auto;\n+            top: 50%;\n+            left: calc(50% + 400px);\n+            transform: translate(-50%, -50%);\n         }\n         body{\n             position: relative;\n             height: 100vh;\n"
                },
                {
                    "date": 1741550711382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,8 +133,28 @@\n         footer{\n             position: sticky;\n             top: 100vh;\n         }\n+        .close-btn {\n+            position: absolute;\n+            right: 10px;\n+            top: 10px;\n+            font-size: 24px;\n+            cursor: pointer;\n+            color: #666;\n+            transition: color 0.2s;\n+        }\n+        \n+        .close-btn:hover {\n+            color: #000;\n+        }\n+\n+        .form-header {\n+            position: relative;\n+            padding: 15px;\n+            border-bottom: 1px solid #ddd;\n+            margin-bottom: 15px;\n+        }\n     </style>\n   </head>\n \n   <body onload=\"init()\">\n"
                },
                {
                    "date": 1741551682886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,14 +220,24 @@\n \n             // Without this event listener: columns can't be created\n             createColumnForm.addEventListener('submit',createColumnFunc )\n \n-            function createColumnFunc (event) {\n+            // Add this near the beginning of init()\n+            const closeBtn = document.querySelector('.close-btn');\n+            closeBtn.addEventListener('click', function() {\n+                const createDocumentForm = document.getElementById('createDocumentForm');\n+                createDocumentForm.setAttribute('hidden', '');\n+            });\n+\n+            // Move dragula initialization outside of createColumnFunc\n+            let columnDrake;\n+\n+            function createColumnFunc(event) {\n                 event.preventDefault();\n                 const columnContent = document.getElementById('columnContent').value;\n \n                 const newColumn = document.createElement('ul');\n-                const columnNav = document.createElement('nav')\n+                const columnNav = document.createElement('nav');\n \n                 newColumn.className = 'dragColumn';\n                 newColumn.id = `column-${Math.random()}`;\n \n@@ -258,30 +268,24 @@\n                 dragparent.appendChild(newColumn);\n                 listOfColumn.push(newColumn);\n                 createColumnForm.reset();\n \n-                // Without this check: document form might appear with no columns\n-               \n+                // Destroy existing dragula instance if it exists\n+                if (columnDrake) {\n+                    columnDrake.destroy();\n+                }\n \n-                    // Without dragula initialization: items within columns not draggable\n-                    dragula(listOfColumn, {\n-                        //with out the handl the column will try to move with the documents\n-                        moves: function (el, container, handle) {\n-                            return handle.classList.contains('bar')\n-                        },\n-                        //this must be here to keep the document from above the title.\n-                        accepts: function(el, target, source, sibling){\n-                           return !sibling || (!sibling.classList.contains('title')&& !sibling.classList.contains('handle'));\n-                        },\n-                        //this is important to how the dragula detects the drag.\n-                        direction: 'vertical'\n-                    })\n-                //      if (document.querySelector('.dragColumn')) {\n-                //     document.getElementById('createDocumentForm').removeAttribute(\"hidden\");});\n-                // } else {\n-                //     document.getElementById('createDocumentForm').setAttribute(\"hidden\");\n-                // }\n-            };\n+                // Create new dragula instance with all columns\n+                columnDrake = dragula(listOfColumn, {\n+                    moves: function (el, container, handle) {\n+                        return handle.classList.contains('bar');\n+                    },\n+                    accepts: function(el, target, source, sibling) {\n+                        return !sibling || (!sibling.classList.contains('title') && !sibling.classList.contains('handle'));\n+                    },\n+                    direction: 'vertical'\n+                });\n+            }\n \n             function createDocumentPopup(columnData){\n                 console.log(columnData)\n                 const theDocPopupForm =document.getElementById('createDocumentForm')\n"
                },
                {
                    "date": 1741625924724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,8 +153,64 @@\n             padding: 15px;\n             border-bottom: 1px solid #ddd;\n             margin-bottom: 15px;\n         }\n+\n+        .column-color-picker {\n+            width: 30px;\n+            height: 30px;\n+            padding: 0;\n+            border: none;\n+            border-radius: 4px;\n+            cursor: pointer;\n+            margin-left: 5px;\n+        }\n+\n+        .column-color-picker::-webkit-color-swatch-wrapper {\n+            padding: 0;\n+        }\n+\n+        .column-color-picker::-webkit-color-swatch {\n+            border: none;\n+            border-radius: 4px;\n+        }\n+\n+        .dragColumn {\n+            transition: background-color 0.3s ease;\n+        }\n+\n+        nav.columnNav {\n+            display: flex;\n+            flex-flow: row nowrap;\n+            justify-content: flex-start;\n+            position: relative;\n+            align-items: center;\n+            gap: 8px;\n+            padding: 5px;\n+        }\n+\n+        .button-container {\n+            display: flex;\n+            align-items: center;\n+            gap: 8px;\n+            margin-bottom: 10px;\n+        }\n+\n+        .column-color-picker {\n+            width: 25px;\n+            height: 25px;\n+            padding: 0;\n+            border: 1px solid #ccc;\n+            border-radius: 4px;\n+            cursor: pointer;\n+            background-color: transparent;\n+        }\n+\n+        nav.columnNav {\n+            display: flex;\n+            flex-direction: column;\n+            padding: 10px;\n+            border-\n     </style>\n   </head>\n \n   <body onload=\"init()\">\n@@ -240,48 +296,62 @@\n \n                 newColumn.className = 'dragColumn';\n                 newColumn.id = `column-${Math.random()}`;\n \n-                // Without handle: column can't be dragged\n-                const handleBar = document.createElement('span');\n-                handleBar.className = \"handle\";\n-                columnNav.appendChild(handleBar);\n-                const newDocPopup = document.createElement(\"button\")\n-                newDocPopup.className = 'newDocPopupButton'\n-                newDocPopup.dataset.column = newColumn.id\n-                newDocPopup.addEventListener(\"click\",()=>createDocumentPopup(newDocPopup.dataset.column))\n-                columnNav.appendChild(newDocPopup)\n-                columnNav.classList.add(\"columnNav\")\n+                // Create a container for buttons\n+                const buttonContainer = document.createElement('div');\n+                buttonContainer.className = 'button-container';\n \n+                // Add document button\n+                const newDocPopup = document.createElement(\"button\");\n+                newDocPopup.className = 'newDocPopupButton';\n+                newDocPopup.dataset.column = newColumn.id;\n+                newDocPopup.addEventListener(\"click\", () => createDocumentPopup(newDocPopup.dataset.column));\n+                buttonContainer.appendChild(newDocPopup);\n+\n+                // Add color picker\n+                const colorPicker = document.createElement(\"input\");\n+                colorPicker.type = \"color\";\n+                colorPicker.className = 'column-color-picker';\n+                colorPicker.value = '#f9f9f9';\n+                colorPicker.addEventListener('change', (e) => {\n+                    newColumn.style.backgroundColor = e.target.value;\n+                });\n+                buttonContainer.appendChild(colorPicker);\n+\n+                // Delete button\n+                const deleteMe = document.createElement(\"button\");\n+                deleteMe.className = 'deleteButton';\n+                deleteMe.dataset.column = newColumn.id;\n+                deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.column));\n+                buttonContainer.appendChild(deleteMe);\n+\n+                // Add the button container to nav\n+                columnNav.appendChild(buttonContainer);\n+\n+                // Add title\n                 const title = document.createElement('h1');\n-                title.className ='title';\n+                title.className = 'title';\n                 title.textContent = columnContent;\n-                title.addEventListener(\"dblclick\",()=> edit(title))\n+                title.addEventListener(\"dblclick\", () => edit(title));\n                 columnNav.appendChild(title);\n-                //the D in CRUD\n-                const deleteMe = document.createElement(\"button\")\n-                deleteMe.className = 'deleteButton'\n-                deleteMe.dataset.column = newColumn.id\n-                deleteMe.addEventListener(\"click\",()=>deleteDocument(deleteMe.dataset.column))\n-                columnNav.appendChild(deleteMe)\n-                \n-                newColumn.appendChild(columnNav)\n+\n+                newColumn.appendChild(columnNav);\n                 dragparent.appendChild(newColumn);\n                 listOfColumn.push(newColumn);\n                 createColumnForm.reset();\n \n-                // Destroy existing dragula instance if it exists\n+                // Update dragula for columns\n                 if (columnDrake) {\n                     columnDrake.destroy();\n                 }\n \n-                // Create new dragula instance with all columns\n                 columnDrake = dragula(listOfColumn, {\n                     moves: function (el, container, handle) {\n-                        return handle.classList.contains('bar');\n+                        return true;\n                     },\n                     accepts: function(el, target, source, sibling) {\n-                        return !sibling || (!sibling.classList.contains('title') && !sibling.classList.contains('handle'));\n+                        return true;\n                     },\n                     direction: 'vertical'\n                 });\n             }\n@@ -335,12 +405,21 @@\n                 createDocumentPopup(null)\n             }\n         }\n \n-        // Without this initialization: columns not draggable\n+        // Update main dragula instance for columns with swap behavior\n         dragula([dragparent], {\n             moves: function (el, container, handle) {\n-                return handle.classList.contains('handle');\n+                return true;\n+            },\n+            direction: 'horizontal',\n+            revertOnSpill: true,\n+            removeOnSpill: false\n+        }).on('drop', function(el, target, source, sibling) {\n+            // Handle the swap\n+            if (sibling && sibling !== el) {\n+                target.insertBefore(sibling, el);\n+                return true; // Allow dragging from anywhere\n             }\n         });\n         function deleteDocument(docID){\n             theDoomedDocument = document.getElementById(docID)\n"
                },
                {
                    "date": 1741626075821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n                 const colorPicker = document.createElement(\"input\");\n                 colorPicker.type = \"color\";\n                 colorPicker.className = 'column-color-picker';\n                 colorPicker.value = '#f9f9f9';\n-                colorPicker.addEventListener('change', (e) => {\n+                colorPicker.addEventListener('input', (e) => {\n                     newColumn.style.backgroundColor = e.target.value;\n                 });\n                 buttonContainer.appendChild(colorPicker);\n \n"
                },
                {
                    "date": 1741627252952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,18 +286,37 @@\n \n             // Move dragula initialization outside of createColumnFunc\n             let columnDrake;\n \n-            function createColumnFunc(event) {\n-                event.preventDefault();\n-                const columnContent = document.getElementById('columnContent').value;\n+            async function loadProjectState() {\n+                const projectId = window.location.pathname.split('/project/')[1];\n+                try {\n+                    const response = await fetch(`/project/${projectId}`);\n+                    const project = await response.json();\n+                    \n+                    // Clear existing columns\n+                    dragparent.innerHTML = '';\n+                    \n+                    // Recreate columns and documents\n+                    project.columns.sort((a, b) => a.order - b.order).forEach(column => {\n+                        const columnEl = createColumnFromData(column);\n+                        \n+                        // Add documents to column\n+                        column.documents.sort((a, b) => a.order - b.order).forEach(doc => {\n+                            createDocumentFromData(doc, columnEl);\n+                        });\n+                    });\n+                } catch (error) {\n+                    console.error('Error loading project:', error);\n+                }\n+            }\n \n+            function createColumnFromData(columnData) {\n                 const newColumn = document.createElement('ul');\n-                const columnNav = document.createElement('nav');\n-\n                 newColumn.className = 'dragColumn';\n-                newColumn.id = `column-${Math.random()}`;\n-\n+                newColumn.id = columnData._id;\n+                newColumn.style.backgroundColor = columnData.backgroundColor;\n+                \n                 // Create a container for buttons\n                 const buttonContainer = document.createElement('div');\n                 buttonContainer.className = 'button-container';\n \n@@ -325,21 +344,21 @@\n                 deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.column));\n                 buttonContainer.appendChild(deleteMe);\n \n                 // Add the button container to nav\n+                const columnNav = document.createElement('nav');\n                 columnNav.appendChild(buttonContainer);\n \n                 // Add title\n                 const title = document.createElement('h1');\n                 title.className = 'title';\n-                title.textContent = columnContent;\n+                title.textContent = columnData.title;\n                 title.addEventListener(\"dblclick\", () => edit(title));\n                 columnNav.appendChild(title);\n \n                 newColumn.appendChild(columnNav);\n                 dragparent.appendChild(newColumn);\n                 listOfColumn.push(newColumn);\n-                createColumnForm.reset();\n \n                 // Update dragula for columns\n                 if (columnDrake) {\n                     columnDrake.destroy();\n@@ -353,8 +372,10 @@\n                         return true;\n                     },\n                     direction: 'vertical'\n                 });\n+\n+                return newColumn;\n             }\n \n             function createDocumentPopup(columnData){\n                 console.log(columnData)\n@@ -364,9 +385,8 @@\n                  popupButton.setAttribute('data-id', columnData);\n \n             }\n \n-\n             function createDocumentFunc(event) {\n                 event.preventDefault();\n                 const columnID =document.getElementById(\"createDoc\").dataset.id\n                 const documentLineItem = document.createElement('li');\n@@ -403,8 +423,56 @@\n                 parentColumn.appendChild(documentLineItem);\n                 createDocumentForm.reset();\n                 createDocumentPopup(null)\n             }\n+\n+            // Update createColumnFunc to save to database\n+            async function createColumnFunc(event) {\n+                event.preventDefault();\n+                const projectId = window.location.pathname.split('/project/')[1];\n+                const columnContent = document.getElementById('columnContent').value;\n+                \n+                try {\n+                    const response = await fetch(`/project/${projectId}/columns`, {\n+                        method: 'POST',\n+                        headers: {\n+                            'Content-Type': 'application/json'\n+                        },\n+                        body: JSON.stringify({\n+                            title: columnContent,\n+                            backgroundColor: '#f9f9f9'\n+                        })\n+                    });\n+                    \n+                    const columnData = await response.json();\n+                    createColumnFromData(columnData);\n+                    createColumnForm.reset();\n+                } catch (error) {\n+                    console.error('Error creating column:', error);\n+                }\n+            }\n+\n+            // Add event listener for dragula drops to save positions\n+            columnDrake.on('drop', async function(el, target, source, sibling) {\n+                try {\n+                    // Update column positions\n+                    const columns = Array.from(dragparent.children);\n+                    const updates = columns.map((column, index) => \n+                        fetch(`/project/columns/${column.id}`, {\n+                            method: 'PUT',\n+                            headers: { 'Content-Type': 'application/json' },\n+                            body: JSON.stringify({ order: index })\n+                        })\n+                    );\n+                    \n+                    await Promise.all(updates);\n+                } catch (error) {\n+                    console.error('Error updating positions:', error);\n+                }\n+            });\n+\n+            // Load project state when page loads\n+            loadProjectState();\n         }\n \n         // Update main dragula instance for columns with swap behavior\n         dragula([dragparent], {\n"
                },
                {
                    "date": 1741627453784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,13 +425,23 @@\n                 createDocumentPopup(null)\n             }\n \n             // Update createColumnFunc to save to database\n-            async function createColumnFunc(event) {\n+            function createColumnFunc(event) {\n                 event.preventDefault();\n-                const projectId = window.location.pathname.split('/project/')[1];\n                 const columnContent = document.getElementById('columnContent').value;\n                 \n+                // Create column data object\n+                const columnData = {\n+                    title: columnContent,\n+                    backgroundColor: '#f9f9f9',\n+                    _id: `column-${Math.random()}` // Temporary ID until saved to database\n+                };\n+\n+                // Create the column in the UI\n+                const columnEl = createColumnFromData(columnData);\n+                \n+                // Get project ID from URL\n                 try {\n                     const response = await fetch(`/project/${projectId}/columns`, {\n                         method: 'POST',\n                         headers: {\n@@ -469,9 +479,9 @@\n                     console.error('Error updating positions:', error);\n                 }\n             });\n \n-            // Load project state when page loads\n+            // Load project state immediately when page loads\n             loadProjectState();\n         }\n \n         // Update main dragula instance for columns with swap behavior\n"
                },
                {
                    "date": 1741627508046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,37 +286,18 @@\n \n             // Move dragula initialization outside of createColumnFunc\n             let columnDrake;\n \n-            async function loadProjectState() {\n-                const projectId = window.location.pathname.split('/project/')[1];\n-                try {\n-                    const response = await fetch(`/project/${projectId}`);\n-                    const project = await response.json();\n-                    \n-                    // Clear existing columns\n-                    dragparent.innerHTML = '';\n-                    \n-                    // Recreate columns and documents\n-                    project.columns.sort((a, b) => a.order - b.order).forEach(column => {\n-                        const columnEl = createColumnFromData(column);\n-                        \n-                        // Add documents to column\n-                        column.documents.sort((a, b) => a.order - b.order).forEach(doc => {\n-                            createDocumentFromData(doc, columnEl);\n-                        });\n-                    });\n-                } catch (error) {\n-                    console.error('Error loading project:', error);\n-                }\n-            }\n+            function createColumnFunc(event) {\n+                event.preventDefault();\n+                const columnContent = document.getElementById('columnContent').value;\n \n-            function createColumnFromData(columnData) {\n                 const newColumn = document.createElement('ul');\n+                const columnNav = document.createElement('nav');\n+\n                 newColumn.className = 'dragColumn';\n-                newColumn.id = columnData._id;\n-                newColumn.style.backgroundColor = columnData.backgroundColor;\n-                \n+                newColumn.id = `column-${Math.random()}`;\n+\n                 // Create a container for buttons\n                 const buttonContainer = document.createElement('div');\n                 buttonContainer.className = 'button-container';\n \n@@ -344,21 +325,21 @@\n                 deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.column));\n                 buttonContainer.appendChild(deleteMe);\n \n                 // Add the button container to nav\n-                const columnNav = document.createElement('nav');\n                 columnNav.appendChild(buttonContainer);\n \n                 // Add title\n                 const title = document.createElement('h1');\n                 title.className = 'title';\n-                title.textContent = columnData.title;\n+                title.textContent = columnContent;\n                 title.addEventListener(\"dblclick\", () => edit(title));\n                 columnNav.appendChild(title);\n \n                 newColumn.appendChild(columnNav);\n                 dragparent.appendChild(newColumn);\n                 listOfColumn.push(newColumn);\n+                createColumnForm.reset();\n \n                 // Update dragula for columns\n                 if (columnDrake) {\n                     columnDrake.destroy();\n@@ -372,10 +353,8 @@\n                         return true;\n                     },\n                     direction: 'vertical'\n                 });\n-\n-                return newColumn;\n             }\n \n             function createDocumentPopup(columnData){\n                 console.log(columnData)\n@@ -385,8 +364,9 @@\n                  popupButton.setAttribute('data-id', columnData);\n \n             }\n \n+\n             function createDocumentFunc(event) {\n                 event.preventDefault();\n                 const columnID =document.getElementById(\"createDoc\").dataset.id\n                 const documentLineItem = document.createElement('li');\n@@ -423,66 +403,8 @@\n                 parentColumn.appendChild(documentLineItem);\n                 createDocumentForm.reset();\n                 createDocumentPopup(null)\n             }\n-\n-            // Update createColumnFunc to save to database\n-            function createColumnFunc(event) {\n-                event.preventDefault();\n-                const columnContent = document.getElementById('columnContent').value;\n-                \n-                // Create column data object\n-                const columnData = {\n-                    title: columnContent,\n-                    backgroundColor: '#f9f9f9',\n-                    _id: `column-${Math.random()}` // Temporary ID until saved to database\n-                };\n-\n-                // Create the column in the UI\n-                const columnEl = createColumnFromData(columnData);\n-                \n-                // Get project ID from URL\n-                try {\n-                    const response = await fetch(`/project/${projectId}/columns`, {\n-                        method: 'POST',\n-                        headers: {\n-                            'Content-Type': 'application/json'\n-                        },\n-                        body: JSON.stringify({\n-                            title: columnContent,\n-                            backgroundColor: '#f9f9f9'\n-                        })\n-                    });\n-                    \n-                    const columnData = await response.json();\n-                    createColumnFromData(columnData);\n-                    createColumnForm.reset();\n-                } catch (error) {\n-                    console.error('Error creating column:', error);\n-                }\n-            }\n-\n-            // Add event listener for dragula drops to save positions\n-            columnDrake.on('drop', async function(el, target, source, sibling) {\n-                try {\n-                    // Update column positions\n-                    const columns = Array.from(dragparent.children);\n-                    const updates = columns.map((column, index) => \n-                        fetch(`/project/columns/${column.id}`, {\n-                            method: 'PUT',\n-                            headers: { 'Content-Type': 'application/json' },\n-                            body: JSON.stringify({ order: index })\n-                        })\n-                    );\n-                    \n-                    await Promise.all(updates);\n-                } catch (error) {\n-                    console.error('Error updating positions:', error);\n-                }\n-            });\n-\n-            // Load project state immediately when page loads\n-            loadProjectState();\n         }\n \n         // Update main dragula instance for columns with swap behavior\n         dragula([dragparent], {\n"
                },
                {
                    "date": 1741627651365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,10 +312,11 @@\n                 const colorPicker = document.createElement(\"input\");\n                 colorPicker.type = \"color\";\n                 colorPicker.className = 'column-color-picker';\n                 colorPicker.value = '#f9f9f9';\n-                colorPicker.addEventListener('input', (e) => {\n+                colorPicker.addEventListener('input', async (e) => {\n                     newColumn.style.backgroundColor = e.target.value;\n+                    await saveColumnColor(newColumn.id, e.target.value);\n                 });\n                 buttonContainer.appendChild(colorPicker);\n \n                 // Delete button\n@@ -413,13 +414,26 @@\n             },\n             direction: 'horizontal',\n             revertOnSpill: true,\n             removeOnSpill: false\n-        }).on('drop', function(el, target, source, sibling) {\n-            // Handle the swap\n-            if (sibling && sibling !== el) {\n-                target.insertBefore(sibling, el);\n-                return true; // Allow dragging from anywhere\n+        }).on('drop', async (el, target, source, sibling) => {\n+            try {\n+                const documents = Array.from(target.children);\n+                const updates = documents.map((doc, index) => {\n+                    return fetch(`/projects/documents/${doc.id}`, {\n+                        method: 'PUT',\n+                        headers: {\n+                            'Content-Type': 'application/json'\n+                        },\n+                        body: JSON.stringify({\n+                            columnId: target.id,\n+                            position: index\n+                        })\n+                    });\n+                });\n+                await Promise.all(updates);\n+            } catch (error) {\n+                console.error('Error updating document positions:', error);\n             }\n         });\n         function deleteDocument(docID){\n             theDoomedDocument = document.getElementById(docID)\n@@ -452,7 +466,21 @@\n                 rewrite.remove(); // Properly remove the input element from the DOM\n             })\n             element.appendChild(rewrite).focus();\n         }\n+\n+        async function saveColumnColor(columnId, color) {\n+            try {\n+                await fetch(`/projects/columns/${columnId}`, {\n+                    method: 'PUT',\n+                    headers: {\n+                        'Content-Type': 'application/json'\n+                    },\n+                    body: JSON.stringify({ backgroundColor: color })\n+                });\n+            } catch (error) {\n+                console.error('Error saving column color:', error);\n+            }\n+        }\n     </script>\n   </body>\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741627866678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -404,8 +404,56 @@\n                 parentColumn.appendChild(documentLineItem);\n                 createDocumentForm.reset();\n                 createDocumentPopup(null)\n             }\n+\n+            // Load saved project data\n+            async function loadProjectData() {\n+                const projectId = window.location.pathname.split('/project/')[1];\n+                try {\n+                    const response = await fetch(`/profile/project/${projectId}/data`);\n+                    const project = await response.json();\n+                    \n+                    // Create columns from saved data\n+                    project.columns.forEach(column => {\n+                        const newColumn = createColumnFromData(column);\n+                        \n+                        // Create documents for each column\n+                        column.documents.forEach(doc => {\n+                            createDocumentFromData(doc, newColumn.id);\n+                        });\n+                    });\n+                } catch (error) {\n+                    console.error('Error loading project:', error);\n+                }\n+            }\n+\n+            function createColumnFromData(columnData) {\n+                const newColumn = document.createElement('ul');\n+                newColumn.className = 'dragColumn';\n+                newColumn.id = columnData._id;\n+                newColumn.style.backgroundColor = columnData.backgroundColor;\n+\n+                // Create column content (similar to createColumnFunc but using saved data)\n+                // ... rest of column creation code ...\n+\n+                return newColumn;\n+            }\n+\n+            function createDocumentFromData(docData, columnId) {\n+                const documentLineItem = document.createElement('li');\n+                documentLineItem.className = 'dragDocument';\n+                documentLineItem.id = docData._id;\n+\n+                // Create document content (similar to createDocumentFunc but using saved data)\n+                // ... rest of document creation code ...\n+\n+                const parentColumn = document.getElementById(columnId);\n+                parentColumn.appendChild(documentLineItem);\n+            }\n+\n+            // Call loadProjectData when page loads\n+            loadProjectData();\n         }\n \n         // Update main dragula instance for columns with swap behavior\n         dragula([dragparent], {\n"
                },
                {
                    "date": 1741628000835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,76 +286,105 @@\n \n             // Move dragula initialization outside of createColumnFunc\n             let columnDrake;\n \n-            function createColumnFunc(event) {\n+            async function createColumnFunc(event) {\n                 event.preventDefault();\n                 const columnContent = document.getElementById('columnContent').value;\n+                const projectId = window.location.pathname.split('/project/')[1];\n \n-                const newColumn = document.createElement('ul');\n-                const columnNav = document.createElement('nav');\n+                try {\n+                    // Save column to database\n+                    const response = await fetch(`/project/${projectId}/columns`, {\n+                        method: 'POST',\n+                        headers: {\n+                            'Content-Type': 'application/json'\n+                        },\n+                        body: JSON.stringify({\n+                            title: columnContent,\n+                            backgroundColor: '#f9f9f9', // default color\n+                            position: listOfColumn.length // current position\n+                        })\n+                    });\n \n-                newColumn.className = 'dragColumn';\n-                newColumn.id = `column-${Math.random()}`;\n+                    if (!response.ok) {\n+                        throw new Error('Failed to create column');\n+                    }\n \n-                // Create a container for buttons\n-                const buttonContainer = document.createElement('div');\n-                buttonContainer.className = 'button-container';\n+                    const columnData = await response.json();\n \n-                // Add document button\n-                const newDocPopup = document.createElement(\"button\");\n-                newDocPopup.className = 'newDocPopupButton';\n-                newDocPopup.dataset.column = newColumn.id;\n-                newDocPopup.addEventListener(\"click\", () => createDocumentPopup(newDocPopup.dataset.column));\n-                buttonContainer.appendChild(newDocPopup);\n+                    // Create column in UI\n+                    const newColumn = document.createElement('ul');\n+                    const columnNav = document.createElement('nav');\n \n-                // Add color picker\n-                const colorPicker = document.createElement(\"input\");\n-                colorPicker.type = \"color\";\n-                colorPicker.className = 'column-color-picker';\n-                colorPicker.value = '#f9f9f9';\n-                colorPicker.addEventListener('input', async (e) => {\n-                    newColumn.style.backgroundColor = e.target.value;\n-                    await saveColumnColor(newColumn.id, e.target.value);\n-                });\n-                buttonContainer.appendChild(colorPicker);\n+                    newColumn.className = 'dragColumn';\n+                    newColumn.id = columnData._id; // Use the ID from database\n \n-                // Delete button\n-                const deleteMe = document.createElement(\"button\");\n-                deleteMe.className = 'deleteButton';\n-                deleteMe.dataset.column = newColumn.id;\n-                deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.column));\n-                buttonContainer.appendChild(deleteMe);\n+                    // Create a container for buttons\n+                    const buttonContainer = document.createElement('div');\n+                    buttonContainer.className = 'button-container';\n \n-                // Add the button container to nav\n-                columnNav.appendChild(buttonContainer);\n+                    // Add document button\n+                    const newDocPopup = document.createElement(\"button\");\n+                    newDocPopup.className = 'newDocPopupButton';\n+                    newDocPopup.dataset.column = newColumn.id;\n+                    newDocPopup.addEventListener(\"click\", () => createDocumentPopup(newDocPopup.dataset.column));\n+                    buttonContainer.appendChild(newDocPopup);\n \n-                // Add title\n-                const title = document.createElement('h1');\n-                title.className = 'title';\n-                title.textContent = columnContent;\n-                title.addEventListener(\"dblclick\", () => edit(title));\n-                columnNav.appendChild(title);\n+                    // Add color picker\n+                    const colorPicker = document.createElement(\"input\");\n+                    colorPicker.type = \"color\";\n+                    colorPicker.className = 'column-color-picker';\n+                    colorPicker.value = '#f9f9f9';\n+                    colorPicker.addEventListener('input', async (e) => {\n+                        newColumn.style.backgroundColor = e.target.value;\n+                        await saveColumnColor(newColumn.id, e.target.value);\n+                    });\n+                    buttonContainer.appendChild(colorPicker);\n \n-                newColumn.appendChild(columnNav);\n-                dragparent.appendChild(newColumn);\n-                listOfColumn.push(newColumn);\n-                createColumnForm.reset();\n+                    // Delete button\n+                    const deleteMe = document.createElement(\"button\");\n+                    deleteMe.className = 'deleteButton';\n+                    deleteMe.dataset.column = newColumn.id;\n+                    deleteMe.addEventListener(\"click\", async () => {\n+                        await deleteColumn(deleteMe.dataset.column);\n+                        deleteDocument(deleteMe.dataset.column);\n+                    });\n+                    buttonContainer.appendChild(deleteMe);\n \n-                // Update dragula for columns\n-                if (columnDrake) {\n-                    columnDrake.destroy();\n+                    // Add the button container to nav\n+                    columnNav.appendChild(buttonContainer);\n+\n+                    // Add title\n+                    const title = document.createElement('h1');\n+                    title.className = 'title';\n+                    title.textContent = columnContent;\n+                    title.addEventListener(\"dblclick\", () => edit(title));\n+                    columnNav.appendChild(title);\n+\n+                    newColumn.appendChild(columnNav);\n+                    dragparent.appendChild(newColumn);\n+                    listOfColumn.push(newColumn);\n+                    createColumnForm.reset();\n+\n+                    // Update dragula\n+                    if (columnDrake) {\n+                        columnDrake.destroy();\n+                    }\n+\n+                    columnDrake = dragula(listOfColumn, {\n+                        moves: function (el, container, handle) {\n+                            return true;\n+                        },\n+                        accepts: function(el, target, source, sibling) {\n+                            return true;\n+                        },\n+                        direction: 'vertical'\n+                    });\n+\n+                } catch (error) {\n+                    console.error('Error creating column:', error);\n                 }\n-\n-                columnDrake = dragula(listOfColumn, {\n-                    moves: function (el, container, handle) {\n-                        return true;\n-                    },\n-                    accepts: function(el, target, source, sibling) {\n-                        return true;\n-                    },\n-                    direction: 'vertical'\n-                });\n             }\n \n             function createDocumentPopup(columnData){\n                 console.log(columnData)\n@@ -528,7 +557,23 @@\n             } catch (error) {\n                 console.error('Error saving column color:', error);\n             }\n         }\n+\n+        // Add function to delete column from database\n+        async function deleteColumn(columnId) {\n+            try {\n+                const projectId = window.location.pathname.split('/project/')[1];\n+                const response = await fetch(`/project/${projectId}/columns/${columnId}`, {\n+                    method: 'DELETE'\n+                });\n+\n+                if (!response.ok) {\n+                    throw new Error('Failed to delete column');\n+                }\n+            } catch (error) {\n+                console.error('Error deleting column:', error);\n+            }\n+        }\n     </script>\n   </body>\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741628069424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n \n     <!-- Without hidden attribute: form shows before any columns exist -->\n     <form id=\"createDocumentForm\" hidden class=\"document-form\">\n         <div class=\"form-header\">\n-            <h2>Create Document</h2>\n+        <h2>Create Document</h2>\n             <span class=\"close-btn\">&times;</span>\n         </div>\n         <div class=\"form-group\">\n             <label for=\"documentTitle\">Document Title</label>\n@@ -286,105 +286,76 @@\n \n             // Move dragula initialization outside of createColumnFunc\n             let columnDrake;\n \n-            async function createColumnFunc(event) {\n+            function createColumnFunc(event) {\n                 event.preventDefault();\n                 const columnContent = document.getElementById('columnContent').value;\n-                const projectId = window.location.pathname.split('/project/')[1];\n \n-                try {\n-                    // Save column to database\n-                    const response = await fetch(`/project/${projectId}/columns`, {\n-                        method: 'POST',\n-                        headers: {\n-                            'Content-Type': 'application/json'\n-                        },\n-                        body: JSON.stringify({\n-                            title: columnContent,\n-                            backgroundColor: '#f9f9f9', // default color\n-                            position: listOfColumn.length // current position\n-                        })\n-                    });\n+                const newColumn = document.createElement('ul');\n+                const columnNav = document.createElement('nav');\n \n-                    if (!response.ok) {\n-                        throw new Error('Failed to create column');\n-                    }\n+                newColumn.className = 'dragColumn';\n+                newColumn.id = `column-${Math.random()}`;\n \n-                    const columnData = await response.json();\n+                // Create a container for buttons\n+                const buttonContainer = document.createElement('div');\n+                buttonContainer.className = 'button-container';\n \n-                    // Create column in UI\n-                    const newColumn = document.createElement('ul');\n-                    const columnNav = document.createElement('nav');\n+                // Add document button\n+                const newDocPopup = document.createElement(\"button\");\n+                newDocPopup.className = 'newDocPopupButton';\n+                newDocPopup.dataset.column = newColumn.id;\n+                newDocPopup.addEventListener(\"click\", () => createDocumentPopup(newDocPopup.dataset.column));\n+                buttonContainer.appendChild(newDocPopup);\n \n-                    newColumn.className = 'dragColumn';\n-                    newColumn.id = columnData._id; // Use the ID from database\n+                // Add color picker\n+                const colorPicker = document.createElement(\"input\");\n+                colorPicker.type = \"color\";\n+                colorPicker.className = 'column-color-picker';\n+                colorPicker.value = '#f9f9f9';\n+                colorPicker.addEventListener('input', async (e) => {\n+                    newColumn.style.backgroundColor = e.target.value;\n+                    await saveColumnColor(newColumn.id, e.target.value);\n+                });\n+                buttonContainer.appendChild(colorPicker);\n \n-                    // Create a container for buttons\n-                    const buttonContainer = document.createElement('div');\n-                    buttonContainer.className = 'button-container';\n+                // Delete button\n+                const deleteMe = document.createElement(\"button\");\n+                deleteMe.className = 'deleteButton';\n+                deleteMe.dataset.column = newColumn.id;\n+                deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.column));\n+                buttonContainer.appendChild(deleteMe);\n \n-                    // Add document button\n-                    const newDocPopup = document.createElement(\"button\");\n-                    newDocPopup.className = 'newDocPopupButton';\n-                    newDocPopup.dataset.column = newColumn.id;\n-                    newDocPopup.addEventListener(\"click\", () => createDocumentPopup(newDocPopup.dataset.column));\n-                    buttonContainer.appendChild(newDocPopup);\n+                // Add the button container to nav\n+                columnNav.appendChild(buttonContainer);\n \n-                    // Add color picker\n-                    const colorPicker = document.createElement(\"input\");\n-                    colorPicker.type = \"color\";\n-                    colorPicker.className = 'column-color-picker';\n-                    colorPicker.value = '#f9f9f9';\n-                    colorPicker.addEventListener('input', async (e) => {\n-                        newColumn.style.backgroundColor = e.target.value;\n-                        await saveColumnColor(newColumn.id, e.target.value);\n-                    });\n-                    buttonContainer.appendChild(colorPicker);\n+                // Add title\n+                const title = document.createElement('h1');\n+                title.className = 'title';\n+                title.textContent = columnContent;\n+                title.addEventListener(\"dblclick\", () => edit(title));\n+                columnNav.appendChild(title);\n \n-                    // Delete button\n-                    const deleteMe = document.createElement(\"button\");\n-                    deleteMe.className = 'deleteButton';\n-                    deleteMe.dataset.column = newColumn.id;\n-                    deleteMe.addEventListener(\"click\", async () => {\n-                        await deleteColumn(deleteMe.dataset.column);\n-                        deleteDocument(deleteMe.dataset.column);\n-                    });\n-                    buttonContainer.appendChild(deleteMe);\n+                newColumn.appendChild(columnNav);\n+                dragparent.appendChild(newColumn);\n+                listOfColumn.push(newColumn);\n+                createColumnForm.reset();\n \n-                    // Add the button container to nav\n-                    columnNav.appendChild(buttonContainer);\n-\n-                    // Add title\n-                    const title = document.createElement('h1');\n-                    title.className = 'title';\n-                    title.textContent = columnContent;\n-                    title.addEventListener(\"dblclick\", () => edit(title));\n-                    columnNav.appendChild(title);\n-\n-                    newColumn.appendChild(columnNav);\n-                    dragparent.appendChild(newColumn);\n-                    listOfColumn.push(newColumn);\n-                    createColumnForm.reset();\n-\n-                    // Update dragula\n-                    if (columnDrake) {\n-                        columnDrake.destroy();\n-                    }\n-\n-                    columnDrake = dragula(listOfColumn, {\n+                // Update dragula for columns\n+                if (columnDrake) {\n+                    columnDrake.destroy();\n+                }\n+               \n+                columnDrake = dragula(listOfColumn, {\n                         moves: function (el, container, handle) {\n-                            return true;\n+                        return true;\n                         },\n-                        accepts: function(el, target, source, sibling) {\n-                            return true;\n+                    accepts: function(el, target, source, sibling) {\n+                        return true;\n                         },\n                         direction: 'vertical'\n-                    });\n-\n-                } catch (error) {\n-                    console.error('Error creating column:', error);\n-                }\n+                });\n             }\n \n             function createDocumentPopup(columnData){\n                 console.log(columnData)\n@@ -557,23 +528,7 @@\n             } catch (error) {\n                 console.error('Error saving column color:', error);\n             }\n         }\n-\n-        // Add function to delete column from database\n-        async function deleteColumn(columnId) {\n-            try {\n-                const projectId = window.location.pathname.split('/project/')[1];\n-                const response = await fetch(`/project/${projectId}/columns/${columnId}`, {\n-                    method: 'DELETE'\n-                });\n-\n-                if (!response.ok) {\n-                    throw new Error('Failed to delete column');\n-                }\n-            } catch (error) {\n-                console.error('Error deleting column:', error);\n-            }\n-        }\n     </script>\n   </body>\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741628189659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -452,38 +452,80 @@\n             }\n \n             // Call loadProjectData when page loads\n             loadProjectData();\n-        }\n \n-        // Update main dragula instance for columns with swap behavior\n-        dragula([dragparent], {\n-            moves: function (el, container, handle) {\n-                return true;\n-            },\n-            direction: 'horizontal',\n-            revertOnSpill: true,\n-            removeOnSpill: false\n-        }).on('drop', async (el, target, source, sibling) => {\n-            try {\n-                const documents = Array.from(target.children);\n-                const updates = documents.map((doc, index) => {\n-                    return fetch(`/projects/documents/${doc.id}`, {\n+            // Initialize dragula for documents\n+            const documentDrake = dragula(listOfColumn, {\n+                moves: function (el, container, handle) {\n+                    return el.classList.contains('dragDocument'); // Only move documents\n+                },\n+                accepts: function (el, target, source, sibling) {\n+                    return target.classList.contains('dragColumn'); // Accept drops only in columns\n+                }\n+            });\n+\n+            // Handle document drops between columns\n+            documentDrake.on('drop', async function (el, target, source, sibling) {\n+                try {\n+                    const documentId = el.id;\n+                    const newColumnId = target.id;\n+                    const oldColumnId = source.id;\n+                    \n+                    // Get the new position in the target column\n+                    const documents = Array.from(target.children);\n+                    const newPosition = documents.indexOf(el);\n+\n+                    // Update the document's position in the database\n+                    const response = await fetch(`/projects/documents/${documentId}/move`, {\n                         method: 'PUT',\n                         headers: {\n                             'Content-Type': 'application/json'\n                         },\n                         body: JSON.stringify({\n-                            columnId: target.id,\n-                            position: index\n+                            newColumnId: newColumnId,\n+                            oldColumnId: oldColumnId,\n+                            position: newPosition\n                         })\n                     });\n+\n+                    if (!response.ok) {\n+                        throw new Error('Failed to update document position');\n+                    }\n+\n+                    // Update positions of all documents in both columns\n+                    await updateDocumentPositions(target);\n+                    if (source !== target) {\n+                        await updateDocumentPositions(source);\n+                    }\n+\n+                } catch (error) {\n+                    console.error('Error moving document:', error);\n+                    // Optionally revert the drag if the save failed\n+                    documentDrake.cancel(true);\n+                }\n+            });\n+\n+            // Helper function to update document positions\n+            async function updateDocumentPositions(column) {\n+                const documents = Array.from(column.children);\n+                const updates = documents.map((doc, index) => {\n+                    if (doc.classList.contains('dragDocument')) {\n+                        return fetch(`/projects/documents/${doc.id}/position`, {\n+                            method: 'PUT',\n+                            headers: {\n+                                'Content-Type': 'application/json'\n+                            },\n+                            body: JSON.stringify({\n+                                position: index\n+                            })\n+                        });\n+                    }\n                 });\n                 await Promise.all(updates);\n-            } catch (error) {\n-                console.error('Error updating document positions:', error);\n             }\n-        });\n+        }\n+\n         function deleteDocument(docID){\n             theDoomedDocument = document.getElementById(docID)\n             if(theDoomedDocument){\n                 theDoomedDocument.parentNode.removeChild(theDoomedDocument)\n"
                },
                {
                    "date": 1741628196289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,10 @@\n            position: relative;\n            flex-flow: column nowrap;\n            align-items: flex-start;\n            justify-content: flex-start;\n+           cursor: move;\n+           transition: transform 0.2s ease;\n         }\n         .deleteButton {\n             border: 1px solid #ccc;\n             font-size: 1.5rem;\n@@ -175,8 +177,9 @@\n         }\n \n         .dragColumn {\n             transition: background-color 0.3s ease;\n+            min-height: 50px; /* Ensure columns are droppable when empty */\n         }\n \n         nav.columnNav {\n             display: flex;\n@@ -209,8 +212,21 @@\n             display: flex;\n             flex-direction: column;\n             padding: 10px;\n             border-\n+\n+        .dragDocument:hover {\n+            transform: translateY(-2px);\n+        }\n+\n+        .gu-mirror {\n+            cursor: grabbing;\n+        }\n+\n+        .gu-transit {\n+            opacity: 0.4;\n+            background-color: #f0f0f0;\n+        }\n     </style>\n   </head>\n \n   <body onload=\"init()\">\n"
                },
                {
                    "date": 1741628265779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,8 +225,22 @@\n         .gu-transit {\n             opacity: 0.4;\n             background-color: #f0f0f0;\n         }\n+\n+        .dragDocument {\n+            cursor: grab;\n+            margin: 8px 0;\n+            padding: 10px;\n+            background-color: white;\n+            border: 1px solid #ddd;\n+            border-radius: 4px;\n+            transition: transform 0.2s ease, box-shadow 0.2s ease;\n+        }\n+\n+        .dragDocument:hover {\n+            transform: translateY(-2px);\n+        }\n     </style>\n   </head>\n \n   <body onload=\"init()\">\n@@ -472,74 +486,33 @@\n \n             // Initialize dragula for documents\n             const documentDrake = dragula(listOfColumn, {\n                 moves: function (el, container, handle) {\n-                    return el.classList.contains('dragDocument'); // Only move documents\n+                    return el.classList.contains('dragDocument'); // Allow dragging documents\n                 },\n-                accepts: function (el, target, source, sibling) {\n-                    return target.classList.contains('dragColumn'); // Accept drops only in columns\n+                accepts: function (el, target) {\n+                    return target.classList.contains('dragColumn'); // Allow dropping in columns\n+                },\n+                revertOnSpill: true, // Return to original position if dropped outside\n+                removeOnSpill: false // Don't remove if dropped outside\n+            });\n+\n+            // Handle document drops\n+            documentDrake.on('drop', function (el, target, source) {\n+                if (target !== source) {\n+                    console.log('Document moved from', source.id, 'to', target.id);\n+                    // You can add database update logic here if needed\n                 }\n             });\n \n-            // Handle document drops between columns\n-            documentDrake.on('drop', async function (el, target, source, sibling) {\n-                try {\n-                    const documentId = el.id;\n-                    const newColumnId = target.id;\n-                    const oldColumnId = source.id;\n-                    \n-                    // Get the new position in the target column\n-                    const documents = Array.from(target.children);\n-                    const newPosition = documents.indexOf(el);\n+            // Add visual feedback during drag\n+            documentDrake.on('drag', function (el) {\n+                el.classList.add('is-dragging');\n+            });\n \n-                    // Update the document's position in the database\n-                    const response = await fetch(`/projects/documents/${documentId}/move`, {\n-                        method: 'PUT',\n-                        headers: {\n-                            'Content-Type': 'application/json'\n-                        },\n-                        body: JSON.stringify({\n-                            newColumnId: newColumnId,\n-                            oldColumnId: oldColumnId,\n-                            position: newPosition\n-                        })\n-                    });\n-\n-                    if (!response.ok) {\n-                        throw new Error('Failed to update document position');\n-                    }\n-\n-                    // Update positions of all documents in both columns\n-                    await updateDocumentPositions(target);\n-                    if (source !== target) {\n-                        await updateDocumentPositions(source);\n-                    }\n-\n-                } catch (error) {\n-                    console.error('Error moving document:', error);\n-                    // Optionally revert the drag if the save failed\n-                    documentDrake.cancel(true);\n-                }\n+            documentDrake.on('dragend', function (el) {\n+                el.classList.remove('is-dragging');\n             });\n-\n-            // Helper function to update document positions\n-            async function updateDocumentPositions(column) {\n-                const documents = Array.from(column.children);\n-                const updates = documents.map((doc, index) => {\n-                    if (doc.classList.contains('dragDocument')) {\n-                        return fetch(`/projects/documents/${doc.id}/position`, {\n-                            method: 'PUT',\n-                            headers: {\n-                                'Content-Type': 'application/json'\n-                            },\n-                            body: JSON.stringify({\n-                                position: index\n-                            })\n-                        });\n-                    }\n-                });\n-                await Promise.all(updates);\n-            }\n         }\n \n         function deleteDocument(docID){\n             theDoomedDocument = document.getElementById(docID)\n"
                },
                {
                    "date": 1741628370010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -483,36 +483,60 @@\n \n             // Call loadProjectData when page loads\n             loadProjectData();\n \n-            // Initialize dragula for documents\n-            const documentDrake = dragula(listOfColumn, {\n-                moves: function (el, container, handle) {\n-                    return el.classList.contains('dragDocument'); // Allow dragging documents\n+            // Get all columns for dragula containers\n+            const columns = document.querySelectorAll('.dragColumn');\n+            \n+            // Initialize dragula with all columns as containers\n+            const documentDrake = dragula(Array.from(columns), {\n+                moves: function (el) {\n+                    return el.classList.contains('dragDocument'); // Only move documents\n                 },\n                 accepts: function (el, target) {\n-                    return target.classList.contains('dragColumn'); // Allow dropping in columns\n+                    return target.classList.contains('dragColumn'); // Accept drops in any column\n                 },\n-                revertOnSpill: true, // Return to original position if dropped outside\n-                removeOnSpill: false // Don't remove if dropped outside\n+                revertOnSpill: true,\n+                removeOnSpill: false\n             });\n \n-            // Handle document drops\n+            // Handle successful drops\n             documentDrake.on('drop', function (el, target, source) {\n                 if (target !== source) {\n-                    console.log('Document moved from', source.id, 'to', target.id);\n-                    // You can add database update logic here if needed\n+                    // Document was moved to a different column\n+                    const documentId = el.id;\n+                    const newColumnId = target.id;\n+                    const oldColumnId = source.id;\n+\n+                    // Update the document's parent in the DOM\n+                    target.appendChild(el);\n+\n+                    // Optional: Update the database to persist the change\n+                    updateDocumentColumn(documentId, newColumnId, oldColumnId);\n                 }\n             });\n \n-            // Add visual feedback during drag\n-            documentDrake.on('drag', function (el) {\n-                el.classList.add('is-dragging');\n-            });\n+            // Function to update document's column in database\n+            async function updateDocumentColumn(documentId, newColumnId, oldColumnId) {\n+                try {\n+                    const response = await fetch(`/projects/documents/${documentId}/move`, {\n+                        method: 'PUT',\n+                        headers: {\n+                            'Content-Type': 'application/json'\n+                        },\n+                        body: JSON.stringify({\n+                            newColumnId: newColumnId,\n+                            oldColumnId: oldColumnId\n+                        })\n+                    });\n \n-            documentDrake.on('dragend', function (el) {\n-                el.classList.remove('is-dragging');\n-            });\n+                    if (!response.ok) {\n+                        console.error('Failed to update document column');\n+                    }\n+                } catch (error) {\n+                    console.error('Error updating document column:', error);\n+                }\n+            }\n         }\n \n         function deleteDocument(docID){\n             theDoomedDocument = document.getElementById(docID)\n"
                },
                {
                    "date": 1741628494248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -585,5 +585,45 @@\n             }\n         }\n     </script>\n   </body>\n+</html>\n+                element.textContent = text;\n+                rewrite.remove(); // Properly remove the input element from the DOM\n+            })\n+            element.appendChild(rewrite).focus();\n+        }\n+\n+        async function saveColumnColor(columnId, color) {\n+            try {\n+                await fetch(`/projects/columns/${columnId}`, {\n+                    method: 'PUT',\n+                    headers: {\n+                        'Content-Type': 'application/json'\n+                    },\n+                    body: JSON.stringify({ backgroundColor: color })\n+                });\n+            } catch (error) {\n+                console.error('Error saving column color:', error);\n+            }\n+        }\n+    </script>\n+  </body>\n+</html>\n+    </script>\n+  </body>\n+</html>\n+                console.error('Error saving column color:', error);\n+            }\n+        }\n+    </script>\n+  </body>\n+</html>\n+            }\n+        }\n+    </script>\n+  </body>\n+</html>\n+        }\n+    </script>\n+  </body>\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741628612896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,20 +227,70 @@\n             background-color: #f0f0f0;\n         }\n \n         .dragDocument {\n-            cursor: grab;\n+            cursor: move;\n+            padding: 15px;\n             margin: 8px 0;\n-            padding: 10px;\n-            background-color: white;\n             border: 1px solid #ddd;\n             border-radius: 4px;\n-            transition: transform 0.2s ease, box-shadow 0.2s ease;\n+            box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n+            transition: background-color 0.3s ease;\n+            position: relative;\n         }\n \n-        .dragDocument:hover {\n-            transform: translateY(-2px);\n+        .document-header {\n+            display: flex;\n+            justify-content: space-between;\n+            align-items: center;\n+            margin-bottom: 8px;\n         }\n+\n+        .document-header h2 {\n+            margin: 0;\n+            font-size: 16px;\n+            font-weight: bold;\n+            color: #333;\n+        }\n+\n+        .dragDocument p {\n+            margin: 0;\n+            font-size: 14px;\n+            color: #666;\n+            line-height: 1.4;\n+        }\n+\n+        .color-picker-container {\n+            display: flex;\n+            align-items: center;\n+        }\n+\n+        .document-color-picker {\n+            width: 24px;\n+            height: 24px;\n+            padding: 0;\n+            border: 1px solid #ddd;\n+            border-radius: 4px;\n+            cursor: pointer;\n+            margin-left: 8px;\n+            visibility: visible;\n+            opacity: 1;\n+        }\n+\n+        .document-color-picker::-webkit-color-swatch-wrapper {\n+            padding: 0;\n+        }\n+\n+        .document-color-picker::-webkit-color-swatch {\n+            border: none;\n+            border-radius: 3px;\n+        }\n+\n+        .deleteButton {\n+            position: absolute;\n+            top: 8px;\n+            right: 8px;\n+        }\n     </style>\n   </head>\n \n   <body onload=\"init()\">\n@@ -585,8 +635,9 @@\n             }\n         }\n     </script>\n   </body>\n+</html>\n </html>                element.textContent = text;\n                 rewrite.remove(); // Properly remove the input element from the DOM\n             })\n             element.appendChild(rewrite).focus();\n"
                },
                {
                    "date": 1741628702812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,18 +227,20 @@\n             background-color: #f0f0f0;\n         }\n \n         .dragDocument {\n-            cursor: move;\n-            padding: 15px;\n+            padding: 12px;\n             margin: 8px 0;\n-            border: 1px solid #ddd;\n             border-radius: 4px;\n-            box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n-            transition: background-color 0.3s ease;\n+            background-color: #08CF65;\n             position: relative;\n+            cursor: move;\n         }\n \n+        .document-content {\n+            margin-right: 30px; /* Space for delete button */\n+        }\n+\n         .document-header {\n             display: flex;\n             justify-content: space-between;\n             align-items: center;\n@@ -249,47 +251,33 @@\n             margin: 0;\n             font-size: 16px;\n             font-weight: bold;\n             color: #333;\n+            flex-grow: 1;\n         }\n \n-        .dragDocument p {\n-            margin: 0;\n-            font-size: 14px;\n-            color: #666;\n-            line-height: 1.4;\n-        }\n-\n-        .color-picker-container {\n-            display: flex;\n-            align-items: center;\n-        }\n-\n         .document-color-picker {\n             width: 24px;\n             height: 24px;\n             padding: 0;\n             border: 1px solid #ddd;\n             border-radius: 4px;\n             cursor: pointer;\n             margin-left: 8px;\n-            visibility: visible;\n-            opacity: 1;\n         }\n \n-        .document-color-picker::-webkit-color-swatch-wrapper {\n-            padding: 0;\n+        .dragDocument p {\n+            margin: 5px 0 0 0;\n+            font-size: 14px;\n+            color: #333;\n         }\n \n-        .document-color-picker::-webkit-color-swatch {\n-            border: none;\n-            border-radius: 3px;\n-        }\n-\n         .deleteButton {\n             position: absolute;\n             top: 8px;\n             right: 8px;\n+            width: 24px;\n+            height: 24px;\n         }\n     </style>\n   </head>\n \n@@ -636,44 +624,4 @@\n         }\n     </script>\n   </body>\n </html>\n-</html>                element.textContent = text;\n-                rewrite.remove(); // Properly remove the input element from the DOM\n-            })\n-            element.appendChild(rewrite).focus();\n-        }\n-\n-        async function saveColumnColor(columnId, color) {\n-            try {\n-                await fetch(`/projects/columns/${columnId}`, {\n-                    method: 'PUT',\n-                    headers: {\n-                        'Content-Type': 'application/json'\n-                    },\n-                    body: JSON.stringify({ backgroundColor: color })\n-                });\n-            } catch (error) {\n-                console.error('Error saving column color:', error);\n-            }\n-        }\n-    </script>\n-  </body>\n-</html>\n-    </script>\n-  </body>\n-</html>\n-                console.error('Error saving column color:', error);\n-            }\n-        }\n-    </script>\n-  </body>\n-</html>\n-            }\n-        }\n-    </script>\n-  </body>\n-</html>\n-        }\n-    </script>\n-  </body>\n-</html>\n"
                }
            ],
            "date": 1741548554850,
            "name": "Commit-0",
            "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <!-- Without reset.css: inconsistent element styling across browsers -->\n    <link rel=\"stylesheet\" href=\"/css/reset.css\" />\n    <link rel=\"stylesheet\" href=\"/css/style.css\" />\n    <link rel=\"stylesheet\" href=\"/css/dragula.css\"/>\n    <!-- Without font preconnect: slow font loading and page render -->\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,400;0,700;0,900;1,400;1,700&display=swap\" rel=\"stylesheet\">\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap\" rel=\"stylesheet\">\n    \n    <title>Project Template</title>\n    <style>\n        .drag-container {\n            display: flex;\n            flex-wrap: wrap;\n            height: fit-content;\n            overflow-y: auto;\n        }\n        .dragColumn {\n            border: 1px solid #ccc;\n            padding: 10px;\n            background-color: #f9f9f9;\n            box-sizing: border-box;\n            word-wrap: break-word;\n            margin: 10px;\n            flex: 1 0 10%;\n            position: relative;\n           display: flex;\n           position: relative;\n\n           flex-flow: column nowrap;\n           align-items: inherit;\n           justify-content: flex-start;\n        }\n        .gu-mirror{\n            /*this was required to flip right-side -up the dragged objects.  */\n            transform: rotate(0deg);\n        }\n        .handle, .bar{\n            border:  1px solid #ccc;\n            font-size: 1.5rem;\n            width: 3vh;\n            height: 3vh;\n            padding: 0.1vh 0 0 0;\n            display: inline-block;\n            text-align: center;\n            background-image: url(/images/Icons2.webp);\n            background-color: goldenrod;\n            background-size: 1155%;\n            background-position: 90.5% 37%;\n            border-radius: 22%;\n        }\n        .dragDocument {\n           border: 1px, solid, black;\n           background-color: #08CF65;\n           z-index: 1;\n           position: relative;\n           display: flex;\n           position: relative;\n           flex-flow: column nowrap;\n           align-items: flex-start;\n           justify-content: flex-start;\n        }\n        .deleteButton {\n            border: 1px solid #ccc;\n            font-size: 1.5rem;\n            width: 3vh;\n            height: 3vh;\n            padding: 0.1vh 0 0 0;\n            display: flex;\n            text-align: center;\n            background-image: url(/images/Icons1.webp);\n            background-color: lightgrey;\n            background-size: 1300%;\n            background-position: 63% 37%;\n            border-radius: 22%;\n            position: relative;\n            /* bottom: 7%; */\n            /* left: 95%; */\n            margin: 1% 1%;\n            /* justify-self: flex-end; */\n            /* flex-direction: row; */\n            /* align-self: flex-end; */\n        }\n        .dragDocument .deleteButton{\n            align-self: flex-end;\n        }\n        .newDocPopupButton {\n            border: 1px solid #ccc;\n            font-size: 1.5rem;\n            width: 3vw;\n            height: 3vh;\n            padding: 0.1vh 0 0 0;\n            display: flex\n;       \n            text-align: center;\n            background-image: url(/images/Icons1.webp);\n            background-color: lightgrey;\n            background-size: 1000%;\n            background-position: 36% 63%;\n            border-radius: 22%;\n            position: relative;\n            margin: 1% 1%;\n            \n        }\n         nav.columnNav{\n            display: flex;\n            flex-flow: row nowrap;\n            justify-content: space-between;\n            position: relative;\n            align-items: baseline;\n        }\n        #createDocumentForm{\n            border: 1px solid black;\n            position : fixed;\n            width: 30%;\n            z-index: 2;\n            background-color: white;\n            top:auto;\n            left:auto;\n        }\n        body{\n            position: relative;\n            height: 100vh;\n        }\n        footer{\n            position: sticky;\n            top: 100vh;\n        }\n    </style>\n  </head>\n\n  <body onload=\"init()\">\n    <!-- Without header: navigation missing -->\n    <%- include('partials/header') %>\n\n    <!-- Without this form: no way to c\n     new columns -->\n    <form id=\"createColumnForm\">\n        <div class=\"form-group\">\n            <label for=\"columnContent\">Column Content</label>\n            <input type=\"text\" id=\"columnContent\" class=\"form-control\" required>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Create Column</button>\n    </form>\n\n    <!-- Without hidden attribute: form shows before any columns exist -->\n    <form id=\"createDocumentForm\" hidden>\n        <h2>Create Document</h2>\n        <div class=\"form-group\">\n            <label for=\"documentTitle\">Document Title</label>\n            <input type=\"text\" id=\"documentTitle\" class=\"form-control\" required>\n            <input type=\"button\" id=\"documentColumn\" class=\"form-control\" value=\"Column\">\n            <label for=\"documentDescription\">Document Description</label>\n            <input type=\"textbox\" id=\"documentDescription\" class=\"form-control\">\n            \n            <input type=\"button\" id=\"documentAssignee\" class=\"form-control\" value=\"Assignee\">\n            <input type=\"button\" id=\"documentLabel\" class=\"form-control\" value=\"Label\">\n            <input type=\"button\" id=\"documentProject\" class=\"form-control\" value=\"Assign to Project\">\n            <input type=\"button\" id=\"MileStone\" class=\"form-control\" value=\"MileStone\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\" id='createDoc' data-id=\"<%- %>\"\">Create Document</button>\n    </form>\n\n    <!-- Without this container: nowhere to place dragable columns -->\n    <div id=\"dragparent\" class=\"drag-container\"></div>\n\n    <!-- Without footer: missing page closure and contact info -->\n    <%- include('partials/footer') %>\n    \n    <!-- Without main.js: core application features missing -->\n    <script src=\"/js/main.js\"></script>\n    <!-- Without dragula.js: no drag-and-drop functionality -->\n    <script src=\"/js/dragula.js\"></script>\n\n    <script>\n        // Without this array: unable to track columns for dragula integration\n        let listOfColumn = [];\n\n        function init() {\n            const createColumnForm = document.getElementById('createColumnForm');\n            const createDocumentForm = document.getElementById('createDocumentForm');\n            const dragparent = document.getElementById('dragparent');\n\n            // Without this event listener: document form submission not handled\n            createDocumentForm.addEventListener('submit', createDocumentFunc);\n\n            // Without this event listener: columns can't be created\n            createColumnForm.addEventListener('submit',createColumnFunc )\n\n            function createColumnFunc (event) {\n                event.preventDefault();\n                const columnContent = document.getElementById('columnContent').value;\n\n                const newColumn = document.createElement('ul');\n                const columnNav = document.createElement('nav')\n\n                newColumn.className = 'dragColumn';\n                newColumn.id = `column-${Math.random()}`;\n\n                // Without handle: column can't be dragged\n                const handleBar = document.createElement('span');\n                handleBar.className = \"handle\";\n                columnNav.appendChild(handleBar);\n                const newDocPopup = document.createElement(\"button\")\n                newDocPopup.className = 'newDocPopupButton'\n                newDocPopup.dataset.column = newColumn.id\n                newDocPopup.addEventListener(\"click\",()=>createDocumentPopup(newDocPopup.dataset.column))\n                columnNav.appendChild(newDocPopup)\n                columnNav.classList.add(\"columnNav\")\n\n                const title = document.createElement('h1');\n                title.className ='title';\n                title.textContent = columnContent;\n                title.addEventListener(\"dblclick\",()=> edit(title))\n                columnNav.appendChild(title);\n                //the D in CRUD\n                const deleteMe = document.createElement(\"button\")\n                deleteMe.className = 'deleteButton'\n                deleteMe.dataset.column = newColumn.id\n                deleteMe.addEventListener(\"click\",()=>deleteDocument(deleteMe.dataset.column))\n                columnNav.appendChild(deleteMe)\n                \n                newColumn.appendChild(columnNav)\n                dragparent.appendChild(newColumn);\n                listOfColumn.push(newColumn);\n                createColumnForm.reset();\n\n                // Without this check: document form might appear with no columns\n               \n\n                    // Without dragula initialization: items within columns not draggable\n                    dragula(listOfColumn, {\n                        //with out the handl the column will try to move with the documents\n                        moves: function (el, container, handle) {\n                            return handle.classList.contains('bar')\n                        },\n                        //this must be here to keep the document from above the title.\n                        accepts: function(el, target, source, sibling){\n                           return !sibling || (!sibling.classList.contains('title')&& !sibling.classList.contains('handle'));\n                        },\n                        //this is important to how the dragula detects the drag.\n                        direction: 'vertical'\n                    })\n                //      if (document.querySelector('.dragColumn')) {\n                //     document.getElementById('createDocumentForm').removeAttribute(\"hidden\");});\n                // } else {\n                //     document.getElementById('createDocumentForm').setAttribute(\"hidden\");\n                // }\n            };\n\n            function createDocumentPopup(columnData){\n                console.log(columnData)\n                const theDocPopupForm =document.getElementById('createDocumentForm')\n                 theDocPopupForm.toggleAttribute(\"hidden\");\n                 const popupButton = document.getElementById('createDoc');\n                 popupButton.setAttribute('data-id', columnData);\n\n            }\n\n\n            function createDocumentFunc(event) {\n                event.preventDefault();\n                const columnID =document.getElementById(\"createDoc\").dataset.id\n                const documentLineItem = document.createElement('li');\n                documentLineItem.className = 'dragDocument';\n                documentLineItem.id = `id-${Math.random()}`\n\n                // Without bar class: document item not draggable\n                const handleBar = document.createElement('span');\n                handleBar.className = \"bar\";\n                // handleBar.textContent = '+';\n                documentLineItem.appendChild(handleBar);\n\n                const docTitle = document.createElement('h2');\n                const documentTitle = document.getElementById('documentTitle').value;\n                docTitle.textContent = documentTitle;\n                docTitle.addEventListener(\"dblclick\",()=> edit(docTitle))\n                documentLineItem.appendChild(docTitle);\n                \n                const docDescription = document.createElement('p');\n                const documentDescription = document.getElementById('documentDescription').value;\n                docDescription.textContent = documentTitle;\n                docDescription.addEventListener(\"dblclick\",()=> edit(docDescription))\n                documentLineItem.appendChild(docDescription);\n                \n                const docColumnList = document.qudocumentColumn\n                //the D in CRUD\n                const deleteMe = document.createElement(\"button\")\n                deleteMe.className = 'deleteButton'\n                deleteMe.dataset.document = documentLineItem.id\n                deleteMe.addEventListener(\"click\",()=>deleteDocument(deleteMe.dataset.document))\n                documentLineItem.appendChild(deleteMe)\n                // Without this selector: document not attached to DOM\n                const parentColumn = document.getElementById(`${columnID}`);\n                parentColumn.appendChild(documentLineItem);\n                createDocumentForm.reset();\n                createDocumentPopup(null)\n            }\n        }\n\n        // Without this initialization: columns not draggable\n        dragula([dragparent], {\n            moves: function (el, container, handle) {\n                return handle.classList.contains('handle');\n            }\n        });\n        function deleteDocument(docID){\n            theDoomedDocument = document.getElementById(docID)\n            if(theDoomedDocument){\n                theDoomedDocument.parentNode.removeChild(theDoomedDocument)\n            }\n        }\n        function edit(element){\n            let text = element.textContent\n            element.textContent = ''\n            const rewrite =document.createElement('input');\n            rewrite.classList.add('form-control');\n            rewrite.id = \"editInput\";\n            rewrite.type =\"textbox\";\n            rewrite.placeholder = text\n            rewrite.addEventListener(\"keydown\", function(event) {\n                if (event.key === \"Enter\") {\n                  event.preventDefault(); // the page would reload otherwise.\n                  console.log(rewrite.value||\"it's empty\")\n                  element.textContent = rewrite.value||rewrite.placeholder\n                  delete rewrite\n                }if (event.key === \"Escape\") {\n                    console.log('escape')\n                    element.textContent = text;\n                    rewrite.remove(); // Properly remove the input element from the DOM\n                }\n            })\n            rewrite.addEventListener(\"blur\",  function(event) {\n                element.textContent = text;\n                rewrite.remove(); // Properly remove the input element from the DOM\n            })\n            element.appendChild(rewrite).focus();\n        }\n    </script>\n  </body>\n</html>"
        }
    ]
}