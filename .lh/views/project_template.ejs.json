{
    "sourceFile": "views/project_template.ejs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1741897495743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741897577973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -334,8 +334,31 @@\n     <script>\n         // Without this array: unable to track columns for dragula integration\n         let listOfColumn = [];\n \n+        // Add these functions before init()\n+        function saveToLocalStorage() {\n+            const boardState = {\n+                columns: Array.from(document.querySelectorAll('.dragColumn')).map(column => {\n+                    const documents = Array.from(column.querySelectorAll('.dragDocument')).map(doc => ({\n+                        id: doc.id,\n+                        title: doc.querySelector('h2').textContent,\n+                        description: doc.querySelector('p').textContent,\n+                        backgroundColor: doc.style.backgroundColor || '#08CF65'\n+                    }));\n+\n+                    return {\n+                        id: column.id,\n+                        title: column.querySelector('.title').textContent,\n+                        backgroundColor: column.style.backgroundColor || '#f9f9f9',\n+                        documents: documents\n+                    };\n+                })\n+            };\n+\n+            localStorage.setItem('kanbanBoard', JSON.stringify(boardState));\n+        }\n+\n         function init() {\n             const createColumnForm = document.getElementById('createColumnForm');\n             const createDocumentForm = document.getElementById('createDocumentForm');\n             const dragparent = document.getElementById('dragparent');\n@@ -394,32 +417,8 @@\n                     saveToLocalStorage();\n                 });\n             }\n \n-            function saveToLocalStorage() {\n-                const boardState = {\n-                    columns: Array.from(document.querySelectorAll('.dragColumn')).map(column => {\n-                        const documents = Array.from(column.querySelectorAll('.dragDocument')).map(doc => ({\n-                            id: doc.id,\n-                            title: doc.querySelector('h2').textContent,\n-                            description: doc.querySelector('p').textContent,\n-                            backgroundColor: doc.style.backgroundColor || '#08CF65',\n-                            colorPickerValue: doc.querySelector('.document-color-picker').value\n-                        }));\n-\n-                        return {\n-                            id: column.id,\n-                            title: column.querySelector('.title').textContent,\n-                            backgroundColor: column.style.backgroundColor || '#f9f9f9',\n-                            colorPickerValue: column.querySelector('.column-color-picker').value,\n-                            documents: documents\n-                        };\n-                    })\n-                };\n-\n-                localStorage.setItem('kanbanBoard', JSON.stringify(boardState));\n-            }\n-\n             function loadFromLocalStorage() {\n                 const savedData = localStorage.getItem('kanbanBoard');\n                 if (!savedData) return;\n \n@@ -592,9 +591,9 @@\n             });\n         }\n \n         function deleteDocument(docID){\n-            theDoomedDocument = document.getElementById(docID)\n+            const theDoomedDocument = document.getElementById(docID)\n             if(theDoomedDocument){\n                 theDoomedDocument.parentNode.removeChild(theDoomedDocument)\n             }\n \n"
                },
                {
                    "date": 1741897622328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,12 +331,11 @@\n     <!-- Without dragula.js: no drag-and-drop functionality -->\n     <script src=\"/js/dragula.js\"></script>\n \n     <script>\n-        // Without this array: unable to track columns for dragula integration\n         let listOfColumn = [];\n \n-        // Add these functions before init()\n+        // Add saveToLocalStorage outside init\n         function saveToLocalStorage() {\n             const boardState = {\n                 columns: Array.from(document.querySelectorAll('.dragColumn')).map(column => {\n                     const documents = Array.from(column.querySelectorAll('.dragDocument')).map(doc => ({\n@@ -364,8 +363,35 @@\n             const dragparent = document.getElementById('dragparent');\n             let columnDrake;\n             let documentDrake;\n \n+            // Add createColumnFunc inside init\n+            function createColumnFunc(event) {\n+                event.preventDefault();\n+                // ... rest of your column creation code ...\n+                saveToLocalStorage();\n+            }\n+\n+            // Add createDocumentFunc inside init\n+            function createDocumentFunc(event) {\n+                event.preventDefault();\n+                // ... rest of your document creation code ...\n+                saveToLocalStorage();\n+            }\n+\n+            // Add event listeners\n+            createColumnForm.addEventListener('submit', createColumnFunc);\n+            createDocumentForm.addEventListener('submit', createDocumentFunc);\n+\n+            // Initialize dragula\n+            initDragula();\n+\n+            // Load saved data\n+            loadFromLocalStorage();\n+        }\n+\n+        // Keep these functions outside init\n+        function deleteDocument(docID) {\n             // Move these functions to be accessible in the entire init scope\n             function initDragula() {\n                 // Initialize column dragula\n                 if (columnDrake) {\n"
                },
                {
                    "date": 1741897690694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,9 +333,8 @@\n \n     <script>\n         let listOfColumn = [];\n \n-        // Add saveToLocalStorage outside init\n         function saveToLocalStorage() {\n             const boardState = {\n                 columns: Array.from(document.querySelectorAll('.dragColumn')).map(column => {\n                     const documents = Array.from(column.querySelectorAll('.dragDocument')).map(doc => ({\n@@ -356,305 +355,255 @@\n \n             localStorage.setItem('kanbanBoard', JSON.stringify(boardState));\n         }\n \n-        function init() {\n-            const createColumnForm = document.getElementById('createColumnForm');\n-            const createDocumentForm = document.getElementById('createDocumentForm');\n-            const dragparent = document.getElementById('dragparent');\n-            let columnDrake;\n-            let documentDrake;\n+        function createDocumentFromSaved(doc) {\n+            const documentLineItem = document.createElement('li');\n+            documentLineItem.className = 'dragDocument';\n+            documentLineItem.id = doc.id;\n+            documentLineItem.style.backgroundColor = doc.backgroundColor;\n \n-            // Add createColumnFunc inside init\n-            function createColumnFunc(event) {\n-                event.preventDefault();\n-                // ... rest of your column creation code ...\n-                saveToLocalStorage();\n-            }\n+            const docContainer = document.createElement('div');\n+            docContainer.className = 'document-container';\n \n-            // Add createDocumentFunc inside init\n-            function createDocumentFunc(event) {\n-                event.preventDefault();\n-                // ... rest of your document creation code ...\n+            // Add title\n+            const docTitle = document.createElement('h2');\n+            docTitle.textContent = doc.title;\n+            docTitle.style.fontWeight = 'bold';\n+            docTitle.addEventListener(\"dblclick\", () => edit(docTitle));\n+            docContainer.appendChild(docTitle);\n+\n+            // Add description\n+            const docDescription = document.createElement('p');\n+            docDescription.textContent = doc.description;\n+            docDescription.addEventListener(\"dblclick\", () => edit(docDescription));\n+            docContainer.appendChild(docDescription);\n+\n+            // Add color picker\n+            const colorPicker = document.createElement('input');\n+            colorPicker.type = 'color';\n+            colorPicker.className = 'document-color-picker';\n+            colorPicker.value = doc.backgroundColor || '#08CF65';\n+            colorPicker.style.position = 'absolute';\n+            colorPicker.style.right = '40px';\n+            colorPicker.style.top = '10px';\n+            colorPicker.addEventListener('input', (e) => {\n+                documentLineItem.style.backgroundColor = e.target.value;\n                 saveToLocalStorage();\n-            }\n+            });\n+            docContainer.appendChild(colorPicker);\n \n-            // Add event listeners\n-            createColumnForm.addEventListener('submit', createColumnFunc);\n-            createDocumentForm.addEventListener('submit', createDocumentFunc);\n+            // Add delete button\n+            const deleteMe = document.createElement(\"button\");\n+            deleteMe.className = 'deleteButton';\n+            deleteMe.dataset.document = documentLineItem.id;\n+            deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.document));\n+            docContainer.appendChild(deleteMe);\n \n-            // Initialize dragula\n-            initDragula();\n-\n-            // Load saved data\n-            loadFromLocalStorage();\n+            documentLineItem.appendChild(docContainer);\n+            return documentLineItem;\n         }\n \n-        // Keep these functions outside init\n-        function deleteDocument(docID) {\n-            // Move these functions to be accessible in the entire init scope\n-            function initDragula() {\n-                // Initialize column dragula\n-                if (columnDrake) {\n-                    columnDrake.destroy();\n-                }\n-                \n-                columnDrake = dragula([dragparent], {\n-                    moves: function (el, container, handle) {\n-                        return el.classList.contains('dragColumn') && \n-                               (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');\n-                    },\n-                    accepts: function (el, target) {\n-                        return el.classList.contains('dragColumn') && target === dragparent;\n-                    },\n-                    direction: 'horizontal'\n-                });\n+        function createColumnFromSaved(column) {\n+            const newColumn = document.createElement('ul');\n+            newColumn.className = 'dragColumn';\n+            newColumn.id = column.id;\n+            newColumn.style.backgroundColor = column.backgroundColor;\n \n-                // Save column order after drag\n-                columnDrake.on('drop', function() {\n-                    saveToLocalStorage();\n-                });\n+            const columnNav = document.createElement('nav');\n+            columnNav.className = 'columnNav';\n+            const buttonContainer = document.createElement('div');\n+            buttonContainer.className = 'button-container';\n \n-                // Initialize document dragula with updated column list\n-                if (documentDrake) {\n-                    documentDrake.destroy();\n-                }\n+            // Add document button\n+            const newDocPopup = document.createElement(\"button\");\n+            newDocPopup.className = 'newDocPopupButton';\n+            newDocPopup.dataset.column = newColumn.id;\n+            newDocPopup.addEventListener(\"click\", () => createDocumentPopup(newDocPopup.dataset.column));\n+            buttonContainer.appendChild(newDocPopup);\n \n-                // Get fresh list of columns\n-                listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n-                \n-                documentDrake = dragula(listOfColumn, {\n-                    moves: function (el, container, handle) {\n-                        return el.classList.contains('dragDocument');\n-                    },\n-                    accepts: function (el, target) {\n-                        return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n-                    },\n-                    revertOnSpill: true,\n-                    removeOnSpill: false\n-                });\n+            // Add color picker\n+            const colorPicker = document.createElement(\"input\");\n+            colorPicker.type = \"color\";\n+            colorPicker.className = 'column-color-picker';\n+            colorPicker.value = column.backgroundColor || '#f9f9f9';\n+            colorPicker.addEventListener('input', (e) => {\n+                newColumn.style.backgroundColor = e.target.value;\n+                saveToLocalStorage();\n+            });\n+            buttonContainer.appendChild(colorPicker);\n \n-                documentDrake.on('drop', function(el, target, source) {\n-                    if (target !== source) {\n-                        const documentId = el.id;\n-                        const newColumnId = target.id;\n-                        const oldColumnId = source.id;\n-                        updateDocumentColumn(documentId, newColumnId, oldColumnId);\n-                    }\n-                    saveToLocalStorage();\n-                });\n-            }\n+            // Delete button\n+            const deleteMe = document.createElement(\"button\");\n+            deleteMe.className = 'deleteButton';\n+            deleteMe.dataset.column = newColumn.id;\n+            deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.column));\n+            buttonContainer.appendChild(deleteMe);\n \n-            function loadFromLocalStorage() {\n-                const savedData = localStorage.getItem('kanbanBoard');\n-                if (!savedData) return;\n+            columnNav.appendChild(buttonContainer);\n \n-                const boardState = JSON.parse(savedData);\n-                \n-                // Clear existing columns\n-                dragparent.innerHTML = '';\n-                listOfColumn = [];\n+            // Add title\n+            const title = document.createElement('h1');\n+            title.className = 'title';\n+            title.textContent = column.title;\n+            title.addEventListener(\"dblclick\", () => edit(title));\n+            columnNav.appendChild(title);\n \n-                boardState.columns.forEach(column => {\n-                    createColumnFromSaved(column);\n-                });\n+            newColumn.appendChild(columnNav);\n \n-                // Reinitialize dragula after loading\n-                initDragula();\n-            }\n-\n-            function createColumnFromSaved(column) {\n-                const newColumn = document.createElement('ul');\n-                newColumn.className = 'dragColumn';\n-                newColumn.id = column.id;\n-                newColumn.style.backgroundColor = column.backgroundColor;\n-\n-                // Create column structure (nav, buttons, etc.)\n-                const columnNav = document.createElement('nav');\n-                const buttonContainer = document.createElement('div');\n-                buttonContainer.className = 'button-container';\n-\n-                // Add document button\n-                const newDocPopup = document.createElement(\"button\");\n-                newDocPopup.className = 'newDocPopupButton';\n-                newDocPopup.dataset.column = newColumn.id;\n-                newDocPopup.addEventListener(\"click\", () => createDocumentPopup(newDocPopup.dataset.column));\n-                buttonContainer.appendChild(newDocPopup);\n-\n-                // Add color picker\n-                const colorPicker = document.createElement(\"input\");\n-                colorPicker.type = \"color\";\n-                colorPicker.className = 'column-color-picker';\n-                colorPicker.value = column.colorPickerValue;\n-                colorPicker.addEventListener('input', (e) => {\n-                    newColumn.style.backgroundColor = e.target.value;\n-                    saveToLocalStorage();\n-                });\n-                buttonContainer.appendChild(colorPicker);\n-\n-                // Delete button\n-                const deleteMe = document.createElement(\"button\");\n-                deleteMe.className = 'deleteButton';\n-                deleteMe.dataset.column = newColumn.id;\n-                deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.column));\n-                buttonContainer.appendChild(deleteMe);\n-\n-                columnNav.appendChild(buttonContainer);\n-\n-                // Add title\n-                const title = document.createElement('h1');\n-                title.className = 'title';\n-                title.textContent = column.title;\n-                title.addEventListener(\"dblclick\", () => edit(title));\n-                columnNav.appendChild(title);\n-\n-                newColumn.appendChild(columnNav);\n-\n-                // Create saved documents\n+            // Create saved documents\n+            if (column.documents) {\n                 column.documents.forEach(doc => {\n                     const documentLineItem = createDocumentFromSaved(doc);\n                     newColumn.appendChild(documentLineItem);\n                 });\n-\n-                dragparent.appendChild(newColumn);\n-                listOfColumn.push(newColumn);\n             }\n \n-            function createDocumentFromSaved(doc) {\n-                const documentLineItem = document.createElement('li');\n-                documentLineItem.className = 'dragDocument';\n-                documentLineItem.id = doc.id;\n-                documentLineItem.style.backgroundColor = doc.backgroundColor;\n+            return newColumn;\n+        }\n \n-                const docContainer = document.createElement('div');\n-                docContainer.className = 'document-container';\n+        function loadFromLocalStorage() {\n+            const savedData = localStorage.getItem('kanbanBoard');\n+            if (!savedData) return;\n \n-                // Add title\n-                const docTitle = document.createElement('h2');\n-                docTitle.textContent = doc.title;\n-                docTitle.style.fontWeight = 'bold';\n-                docTitle.addEventListener(\"dblclick\", () => edit(docTitle));\n-                docContainer.appendChild(docTitle);\n+            const boardState = JSON.parse(savedData);\n+            const dragparent = document.getElementById('dragparent');\n+            \n+            // Clear existing columns\n+            dragparent.innerHTML = '';\n+            listOfColumn = [];\n \n-                // Add description\n-                const docDescription = document.createElement('p');\n-                docDescription.textContent = doc.description;\n-                docDescription.addEventListener(\"dblclick\", () => edit(docDescription));\n-                docContainer.appendChild(docDescription);\n+            boardState.columns.forEach(column => {\n+                const newColumn = createColumnFromSaved(column);\n+                dragparent.appendChild(newColumn);\n+                listOfColumn.push(newColumn);\n+            });\n+        }\n \n-                // Add color picker\n-                const colorPicker = document.createElement('input');\n-                colorPicker.type = 'color';\n-                colorPicker.className = 'document-color-picker';\n-                colorPicker.value = doc.colorPickerValue;\n-                colorPicker.style.position = 'absolute';\n-                colorPicker.style.right = '40px';\n-                colorPicker.style.top = '10px';\n-                colorPicker.addEventListener('input', (e) => {\n-                    documentLineItem.style.backgroundColor = e.target.value;\n+        function deleteDocument(docID) {\n+            const theDoomedDocument = document.getElementById(docID);\n+            if(theDoomedDocument) {\n+                theDoomedDocument.parentNode.removeChild(theDoomedDocument);\n+                saveToLocalStorage();\n+            }\n+        }\n+\n+        function edit(element) {\n+            let text = element.textContent;\n+            element.textContent = '';\n+            const rewrite = document.createElement('input');\n+            rewrite.classList.add('form-control');\n+            rewrite.id = \"editInput\";\n+            rewrite.type = \"textbox\";\n+            rewrite.placeholder = text;\n+            rewrite.value = text;\n+            \n+            rewrite.addEventListener(\"keydown\", function(event) {\n+                if (event.key === \"Enter\") {\n+                    event.preventDefault();\n+                    element.textContent = rewrite.value || rewrite.placeholder;\n+                    rewrite.remove();\n                     saveToLocalStorage();\n-                });\n-                docContainer.appendChild(colorPicker);\n+                } else if (event.key === \"Escape\") {\n+                    element.textContent = text;\n+                    rewrite.remove();\n+                }\n+            });\n \n-                // Add delete button\n-                const deleteMe = document.createElement(\"button\");\n-                deleteMe.className = 'deleteButton';\n-                deleteMe.dataset.document = documentLineItem.id;\n-                deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.document));\n-                docContainer.appendChild(deleteMe);\n+            rewrite.addEventListener(\"blur\", function(event) {\n+                element.textContent = text;\n+                rewrite.remove();\n+            });\n \n-                documentLineItem.appendChild(docContainer);\n-                return documentLineItem;\n-            }\n+            element.appendChild(rewrite);\n+            rewrite.focus();\n+        }\n \n-            // Without this event listener: document form submission not handled\n-            createDocumentForm.addEventListener('submit', createDocumentFunc);\n+        function createDocumentPopup(columnData) {\n+            const theDocPopupForm = document.getElementById('createDocumentForm');\n+            theDocPopupForm.toggleAttribute(\"hidden\");\n+            const popupButton = document.getElementById('createDoc');\n+            popupButton.setAttribute('data-id', columnData);\n+            const documentTitle = document.getElementById('documentTitle');\n+            documentTitle.focus();\n+        }\n \n-            // Without this event listener: columns can't be created\n-                // Add to column\n-                const parentColumn = document.getElementById(`${columnID}`);\n-                parentColumn.appendChild(documentLineItem);\n+        function init() {\n+            const createColumnForm = document.getElementById('createColumnForm');\n+            const createDocumentForm = document.getElementById('createDocumentForm');\n+            const dragparent = document.getElementById('dragparent');\n+            let columnDrake;\n+            let documentDrake;\n \n-                // Reset and close form\n-                createDocumentForm.reset();\n-                createDocumentPopup(null);\n+            // Load saved data first\n+            loadFromLocalStorage();\n \n-                // Add this at the end of the function\n-                saveToLocalStorage();\n-            }\n+            // Initialize dragula\n+            columnDrake = dragula([dragparent], {\n+                moves: function (el, container, handle) {\n+                    return el.classList.contains('dragColumn') && \n+                           (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');\n+                },\n+                accepts: function (el, target) {\n+                    return el.classList.contains('dragColumn') && target === dragparent;\n+                },\n+                direction: 'horizontal'\n+            });\n \n-            // Function to update document's column in database\n-            async function updateDocumentColumn(documentId, newColumnId, oldColumnId) {\n-                try {\n-                    const response = await fetch(`/projects/documents/${documentId}/move`, {\n-                        method: 'PUT',\n-                        headers: {\n-                            'Content-Type': 'application/json'\n-                        },\n-                        body: JSON.stringify({\n-                            newColumnId: newColumnId,\n-                            oldColumnId: oldColumnId\n-                        })\n-                    });\n-\n-                    if (!response.ok) {\n-                        console.error('Failed to update document column');\n-                    }\n-                } catch (error) {\n-                    console.error('Error updating document column:', error);\n+            // Update listOfColumn\n+            listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n+            \n+            documentDrake = dragula(listOfColumn, {\n+                moves: function (el, container, handle) {\n+                    return el.classList.contains('dragDocument');\n+                },\n+                accepts: function (el, target) {\n+                    return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n                 }\n-            }\n+            });\n \n-            // Call loadFromLocalStorage when page loads\n-            loadFromLocalStorage();\n+            // Event Listeners\n+            columnDrake.on('drop', saveToLocalStorage);\n+            documentDrake.on('drop', saveToLocalStorage);\n \n-            // Load saved state when page loads\n-            loadFromLocalStorage();\n+            createColumnForm.addEventListener('submit', function(event) {\n+                event.preventDefault();\n+                const columnContent = document.getElementById('columnContent').value;\n+                const column = {\n+                    id: `column-${Date.now()}`,\n+                    title: columnContent,\n+                    backgroundColor: '#f9f9f9',\n+                    documents: []\n+                };\n+                const newColumn = createColumnFromSaved(column);\n+                dragparent.appendChild(newColumn);\n+                listOfColumn.push(newColumn);\n+                createColumnForm.reset();\n+                saveToLocalStorage();\n+            });\n \n-            // Add save to localStorage after drag operations\n-            documentDrake.on('drop', function(el, target, source) {\n-                // ... existing drop code ...\n+            createDocumentForm.addEventListener('submit', function(event) {\n+                event.preventDefault();\n+                const columnID = document.getElementById(\"createDoc\").dataset.id;\n+                const doc = {\n+                    id: `doc-${Date.now()}`,\n+                    title: document.getElementById('documentTitle').value,\n+                    description: document.getElementById('documentDescription').value,\n+                    backgroundColor: '#08CF65'\n+                };\n+                const documentLineItem = createDocumentFromSaved(doc);\n+                const parentColumn = document.getElementById(columnID);\n+                parentColumn.appendChild(documentLineItem);\n+                createDocumentForm.reset();\n+                createDocumentForm.setAttribute('hidden', '');\n                 saveToLocalStorage();\n             });\n-        }\n \n-        function deleteDocument(docID){\n-            const theDoomedDocument = document.getElementById(docID)\n-            if(theDoomedDocument){\n-                theDoomedDocument.parentNode.removeChild(theDoomedDocument)\n-            }\n-\n-            // Add save to localStorage after deletion\n-            saveToLocalStorage();\n+            // Close button for document form\n+            const closeBtn = document.querySelector('.close-btn');\n+            closeBtn.addEventListener('click', function() {\n+                createDocumentForm.setAttribute('hidden', '');\n+            });\n         }\n-        function edit(element){\n-            let text = element.textContent\n-            element.textContent = ''\n-            const rewrite =document.createElement('input');\n-            rewrite.classList.add('form-control');\n-            rewrite.id = \"editInput\";\n-            rewrite.type =\"textbox\";\n-            rewrite.placeholder = text\n-            rewrite.addEventListener(\"keydown\", function(event) {\n-                if (event.key === \"Enter\") {\n-                  event.preventDefault(); // the page would reload otherwise.\n-                  console.log(rewrite.value||\"it's empty\")\n-                  element.textContent = rewrite.value||rewrite.placeholder\n-                  delete rewrite\n-                }if (event.key === \"Escape\") {\n-                    console.log('escape')\n-                    element.textContent = text;\n-                    rewrite.remove(); // Properly remove the input element from the DOM\n-                }\n-            })\n-            rewrite.addEventListener(\"blur\",  function(event) {\n-                element.textContent = text;\n-                rewrite.remove(); // Properly remove the input element from the DOM\n-            })\n-            element.appendChild(rewrite).focus();\n-\n-            // Add save to localStorage after editing\n-            saveToLocalStorage();\n-        }\n     </script>\n   </body>\n </html>\n"
                },
                {
                    "date": 1741897773534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -533,77 +533,79 @@\n             const dragparent = document.getElementById('dragparent');\n             let columnDrake;\n             let documentDrake;\n \n-            // Load saved data first\n-            loadFromLocalStorage();\n+            // Load saved data first and wait for it to complete\n+            window.addEventListener('DOMContentLoaded', function() {\n+                loadFromLocalStorage();\n+                \n+                // Initialize dragula only after loading is complete\n+                columnDrake = dragula([dragparent], {\n+                    moves: function (el, container, handle) {\n+                        return el.classList.contains('dragColumn') && \n+                               (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');\n+                    },\n+                    accepts: function (el, target) {\n+                        return el.classList.contains('dragColumn') && target === dragparent;\n+                    },\n+                    direction: 'horizontal'\n+                });\n \n-            // Initialize dragula\n-            columnDrake = dragula([dragparent], {\n-                moves: function (el, container, handle) {\n-                    return el.classList.contains('dragColumn') && \n-                           (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');\n-                },\n-                accepts: function (el, target) {\n-                    return el.classList.contains('dragColumn') && target === dragparent;\n-                },\n-                direction: 'horizontal'\n-            });\n+                // Update listOfColumn\n+                listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n+                \n+                documentDrake = dragula(listOfColumn, {\n+                    moves: function (el, container, handle) {\n+                        return el.classList.contains('dragDocument');\n+                    },\n+                    accepts: function (el, target) {\n+                        return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n+                    }\n+                });\n \n-            // Update listOfColumn\n-            listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n-            \n-            documentDrake = dragula(listOfColumn, {\n-                moves: function (el, container, handle) {\n-                    return el.classList.contains('dragDocument');\n-                },\n-                accepts: function (el, target) {\n-                    return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n-                }\n-            });\n+                // Event Listeners\n+                columnDrake.on('drop', saveToLocalStorage);\n+                documentDrake.on('drop', saveToLocalStorage);\n \n-            // Event Listeners\n-            columnDrake.on('drop', saveToLocalStorage);\n-            documentDrake.on('drop', saveToLocalStorage);\n+                createColumnForm.addEventListener('submit', function(event) {\n+                    event.preventDefault();\n+                    const columnContent = document.getElementById('columnContent').value;\n+                    const column = {\n+                        id: `column-${Date.now()}`,\n+                        title: columnContent,\n+                        backgroundColor: '#f9f9f9',\n+                        documents: []\n+                    };\n+                    const newColumn = createColumnFromSaved(column);\n+                    dragparent.appendChild(newColumn);\n+                    listOfColumn.push(newColumn);\n+                    createColumnForm.reset();\n+                    saveToLocalStorage();\n+                });\n \n-            createColumnForm.addEventListener('submit', function(event) {\n-                event.preventDefault();\n-                const columnContent = document.getElementById('columnContent').value;\n-                const column = {\n-                    id: `column-${Date.now()}`,\n-                    title: columnContent,\n-                    backgroundColor: '#f9f9f9',\n-                    documents: []\n-                };\n-                const newColumn = createColumnFromSaved(column);\n-                dragparent.appendChild(newColumn);\n-                listOfColumn.push(newColumn);\n-                createColumnForm.reset();\n-                saveToLocalStorage();\n-            });\n+                createDocumentForm.addEventListener('submit', function(event) {\n+                    event.preventDefault();\n+                    const columnID = document.getElementById(\"createDoc\").dataset.id;\n+                    const doc = {\n+                        id: `doc-${Date.now()}`,\n+                        title: document.getElementById('documentTitle').value,\n+                        description: document.getElementById('documentDescription').value,\n+                        backgroundColor: '#08CF65'\n+                    };\n+                    const documentLineItem = createDocumentFromSaved(doc);\n+                    const parentColumn = document.getElementById(columnID);\n+                    parentColumn.appendChild(documentLineItem);\n+                    createDocumentForm.reset();\n+                    createDocumentForm.setAttribute('hidden', '');\n+                    saveToLocalStorage();\n+                });\n \n-            createDocumentForm.addEventListener('submit', function(event) {\n-                event.preventDefault();\n-                const columnID = document.getElementById(\"createDoc\").dataset.id;\n-                const doc = {\n-                    id: `doc-${Date.now()}`,\n-                    title: document.getElementById('documentTitle').value,\n-                    description: document.getElementById('documentDescription').value,\n-                    backgroundColor: '#08CF65'\n-                };\n-                const documentLineItem = createDocumentFromSaved(doc);\n-                const parentColumn = document.getElementById(columnID);\n-                parentColumn.appendChild(documentLineItem);\n-                createDocumentForm.reset();\n-                createDocumentForm.setAttribute('hidden', '');\n-                saveToLocalStorage();\n+                // Close button for document form\n+                const closeBtn = document.querySelector('.close-btn');\n+                closeBtn.addEventListener('click', function() {\n+                    createDocumentForm.setAttribute('hidden', '');\n+                });\n             });\n-\n-            // Close button for document form\n-            const closeBtn = document.querySelector('.close-btn');\n-            closeBtn.addEventListener('click', function() {\n-                createDocumentForm.setAttribute('hidden', '');\n-            });\n         }\n     </script>\n   </body>\n </html>\n"
                },
                {
                    "date": 1741897839954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -533,78 +533,89 @@\n             const dragparent = document.getElementById('dragparent');\n             let columnDrake;\n             let documentDrake;\n \n-            // Load saved data first and wait for it to complete\n-            window.addEventListener('DOMContentLoaded', function() {\n-                loadFromLocalStorage();\n+            // Load saved data first\n+            loadFromLocalStorage();\n+            \n+            // Initialize dragula\n+            columnDrake = dragula([dragparent], {\n+                moves: function (el, container, handle) {\n+                    return el.classList.contains('dragColumn') && \n+                           (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');\n+                },\n+                accepts: function (el, target) {\n+                    return el.classList.contains('dragColumn') && target === dragparent;\n+                },\n+                direction: 'horizontal'\n+            });\n+\n+            // Update listOfColumn\n+            listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n+            \n+            documentDrake = dragula(listOfColumn, {\n+                moves: function (el, container, handle) {\n+                    return el.classList.contains('dragDocument');\n+                },\n+                accepts: function (el, target) {\n+                    return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n+                }\n+            });\n+\n+            // Event Listeners\n+            columnDrake.on('drop', saveToLocalStorage);\n+            documentDrake.on('drop', saveToLocalStorage);\n+\n+            createColumnForm.addEventListener('submit', function(event) {\n+                event.preventDefault();\n+                const columnContent = document.getElementById('columnContent').value;\n+                const column = {\n+                    id: `column-${Date.now()}`,\n+                    title: columnContent,\n+                    backgroundColor: '#f9f9f9',\n+                    documents: []\n+                };\n+                const newColumn = createColumnFromSaved(column);\n+                dragparent.appendChild(newColumn);\n+                listOfColumn.push(newColumn);\n+                createColumnForm.reset();\n+                saveToLocalStorage();\n                 \n-                // Initialize dragula only after loading is complete\n-                columnDrake = dragula([dragparent], {\n-                    moves: function (el, container, handle) {\n-                        return el.classList.contains('dragColumn') && \n-                               (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');\n-                    },\n-                    accepts: function (el, target) {\n-                        return el.classList.contains('dragColumn') && target === dragparent;\n-                    },\n-                    direction: 'horizontal'\n-                });\n-\n-                // Update listOfColumn\n+                // Reinitialize dragula for documents with new column\n+                documentDrake.destroy();\n                 listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n-                \n                 documentDrake = dragula(listOfColumn, {\n                     moves: function (el, container, handle) {\n                         return el.classList.contains('dragDocument');\n                     },\n                     accepts: function (el, target) {\n                         return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n                     }\n                 });\n-\n-                // Event Listeners\n-                columnDrake.on('drop', saveToLocalStorage);\n                 documentDrake.on('drop', saveToLocalStorage);\n+            });\n \n-                createColumnForm.addEventListener('submit', function(event) {\n-                    event.preventDefault();\n-                    const columnContent = document.getElementById('columnContent').value;\n-                    const column = {\n-                        id: `column-${Date.now()}`,\n-                        title: columnContent,\n-                        backgroundColor: '#f9f9f9',\n-                        documents: []\n-                    };\n-                    const newColumn = createColumnFromSaved(column);\n-                    dragparent.appendChild(newColumn);\n-                    listOfColumn.push(newColumn);\n-                    createColumnForm.reset();\n-                    saveToLocalStorage();\n-                });\n+            createDocumentForm.addEventListener('submit', function(event) {\n+                event.preventDefault();\n+                const columnID = document.getElementById(\"createDoc\").dataset.id;\n+                const doc = {\n+                    id: `doc-${Date.now()}`,\n+                    title: document.getElementById('documentTitle').value,\n+                    description: document.getElementById('documentDescription').value,\n+                    backgroundColor: '#08CF65'\n+                };\n+                const documentLineItem = createDocumentFromSaved(doc);\n+                const parentColumn = document.getElementById(columnID);\n+                parentColumn.appendChild(documentLineItem);\n+                createDocumentForm.reset();\n+                createDocumentForm.setAttribute('hidden', '');\n+                saveToLocalStorage();\n+            });\n \n-                createDocumentForm.addEventListener('submit', function(event) {\n-                    event.preventDefault();\n-                    const columnID = document.getElementById(\"createDoc\").dataset.id;\n-                    const doc = {\n-                        id: `doc-${Date.now()}`,\n-                        title: document.getElementById('documentTitle').value,\n-                        description: document.getElementById('documentDescription').value,\n-                        backgroundColor: '#08CF65'\n-                    };\n-                    const documentLineItem = createDocumentFromSaved(doc);\n-                    const parentColumn = document.getElementById(columnID);\n-                    parentColumn.appendChild(documentLineItem);\n-                    createDocumentForm.reset();\n-                    createDocumentForm.setAttribute('hidden', '');\n-                    saveToLocalStorage();\n-                });\n-\n-                // Close button for document form\n-                const closeBtn = document.querySelector('.close-btn');\n-                closeBtn.addEventListener('click', function() {\n-                    createDocumentForm.setAttribute('hidden', '');\n-                });\n+            // Close button for document form\n+            const closeBtn = document.querySelector('.close-btn');\n+            closeBtn.addEventListener('click', function() {\n+                createDocumentForm.setAttribute('hidden', '');\n             });\n         }\n     </script>\n   </body>\n"
                },
                {
                    "date": 1741898104950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,23 +59,23 @@\n         .dragDocument {\n             padding: 12px 45px 12px 12px; /* Add padding on the right for icons */\n             margin: 8px 0;\n             border-radius: 4px;\n-            background-color: #08CF65;\n+           background-color: #08CF65;\n             position: relative;\n             cursor: move;\n         }\n         .document-container {\n-            position: relative;\n+           position: relative;\n             width: 100%;\n         }\n         /* Create a container for the icons */\n         .document-icons {\n             position: absolute;\n             top: 50%;\n             right: -35px; /* Adjust based on padding */\n             transform: translateY(-50%);\n-            display: flex;\n+           display: flex;\n             gap: 8px;\n             align-items: center;\n         }\n         .deleteButton {\n@@ -333,8 +333,64 @@\n \n     <script>\n         let listOfColumn = [];\n \n+        function createColumnFunc(event) {\n+            event.preventDefault();\n+            const dragparent = document.getElementById('dragparent');\n+            const columnContent = document.getElementById('columnContent').value;\n+\n+            const newColumn = document.createElement('ul');\n+            const columnNav = document.createElement('nav');\n+            columnNav.className = 'columnNav';\n+\n+            newColumn.className = 'dragColumn';\n+            newColumn.id = `column-${Math.random()}`;\n+\n+            // Create a container for buttons\n+            const buttonContainer = document.createElement('div');\n+            buttonContainer.className = 'button-container';\n+\n+            // Add document button\n+            const newDocPopup = document.createElement(\"button\");\n+            newDocPopup.className = 'newDocPopupButton';\n+            newDocPopup.dataset.column = newColumn.id;\n+            newDocPopup.addEventListener(\"click\", () => createDocumentPopup(newDocPopup.dataset.column));\n+            buttonContainer.appendChild(newDocPopup);\n+\n+            // Add color picker\n+            const colorPicker = document.createElement(\"input\");\n+            colorPicker.type = \"color\";\n+            colorPicker.className = 'column-color-picker';\n+            colorPicker.value = '#f9f9f9';\n+            colorPicker.addEventListener('input', async (e) => {\n+                newColumn.style.backgroundColor = e.target.value;\n+                await saveToLocalStorage();\n+            });\n+            buttonContainer.appendChild(colorPicker);\n+\n+            // Delete button\n+            const deleteMe = document.createElement(\"button\");\n+            deleteMe.className = 'deleteButton';\n+            deleteMe.addEventListener(\"click\", () => deleteDocument(newColumn.id));\n+            buttonContainer.appendChild(deleteMe);\n+\n+            // Add the button container to nav\n+            columnNav.appendChild(buttonContainer);\n+\n+            // Add title\n+            const title = document.createElement('h1');\n+            title.className = 'title';\n+            title.textContent = columnContent;\n+            title.addEventListener(\"dblclick\", () => edit(title));\n+            columnNav.appendChild(title);\n+\n+            newColumn.appendChild(columnNav);\n+            dragparent.appendChild(newColumn);\n+            listOfColumn.push(newColumn);\n+            document.getElementById('createColumnForm').reset();\n+        }\n+\n         function saveToLocalStorage() {\n             const boardState = {\n                 columns: Array.from(document.querySelectorAll('.dragColumn')).map(column => {\n                     const documents = Array.from(column.querySelectorAll('.dragDocument')).map(doc => ({\n@@ -457,77 +513,14 @@\n                     newColumn.appendChild(documentLineItem);\n                 });\n             }\n \n-            return newColumn;\n+            newColumn.appendChild(columnNav);\n+            dragparent.appendChild(newColumn);\n+            listOfColumn.push(newColumn);\n+            document.getElementById('createColumnForm').reset();\n         }\n \n-        function loadFromLocalStorage() {\n-            const savedData = localStorage.getItem('kanbanBoard');\n-            if (!savedData) return;\n-\n-            const boardState = JSON.parse(savedData);\n-            const dragparent = document.getElementById('dragparent');\n-            \n-            // Clear existing columns\n-            dragparent.innerHTML = '';\n-            listOfColumn = [];\n-\n-            boardState.columns.forEach(column => {\n-                const newColumn = createColumnFromSaved(column);\n-                dragparent.appendChild(newColumn);\n-                listOfColumn.push(newColumn);\n-            });\n-        }\n-\n-        function deleteDocument(docID) {\n-            const theDoomedDocument = document.getElementById(docID);\n-            if(theDoomedDocument) {\n-                theDoomedDocument.parentNode.removeChild(theDoomedDocument);\n-                saveToLocalStorage();\n-            }\n-        }\n-\n-        function edit(element) {\n-            let text = element.textContent;\n-            element.textContent = '';\n-            const rewrite = document.createElement('input');\n-            rewrite.classList.add('form-control');\n-            rewrite.id = \"editInput\";\n-            rewrite.type = \"textbox\";\n-            rewrite.placeholder = text;\n-            rewrite.value = text;\n-            \n-            rewrite.addEventListener(\"keydown\", function(event) {\n-                if (event.key === \"Enter\") {\n-                    event.preventDefault();\n-                    element.textContent = rewrite.value || rewrite.placeholder;\n-                    rewrite.remove();\n-                    saveToLocalStorage();\n-                } else if (event.key === \"Escape\") {\n-                    element.textContent = text;\n-                    rewrite.remove();\n-                }\n-            });\n-\n-            rewrite.addEventListener(\"blur\", function(event) {\n-                element.textContent = text;\n-                rewrite.remove();\n-            });\n-\n-            element.appendChild(rewrite);\n-            rewrite.focus();\n-        }\n-\n-        function createDocumentPopup(columnData) {\n-            const theDocPopupForm = document.getElementById('createDocumentForm');\n-            theDocPopupForm.toggleAttribute(\"hidden\");\n-            const popupButton = document.getElementById('createDoc');\n-            popupButton.setAttribute('data-id', columnData);\n-            const documentTitle = document.getElementById('documentTitle');\n-            documentTitle.focus();\n-        }\n-\n         function init() {\n             const createColumnForm = document.getElementById('createColumnForm');\n             const createDocumentForm = document.getElementById('createDocumentForm');\n             const dragparent = document.getElementById('dragparent');\n@@ -564,51 +557,14 @@\n             // Event Listeners\n             columnDrake.on('drop', saveToLocalStorage);\n             documentDrake.on('drop', saveToLocalStorage);\n \n-            createColumnForm.addEventListener('submit', function(event) {\n-                event.preventDefault();\n-                const columnContent = document.getElementById('columnContent').value;\n-                const column = {\n-                    id: `column-${Date.now()}`,\n-                    title: columnContent,\n-                    backgroundColor: '#f9f9f9',\n-                    documents: []\n-                };\n-                const newColumn = createColumnFromSaved(column);\n-                dragparent.appendChild(newColumn);\n-                listOfColumn.push(newColumn);\n-                createColumnForm.reset();\n+            // Add event listeners for drag operations\n+            columnDrake.on('drop', () => {\n                 saveToLocalStorage();\n-                \n-                // Reinitialize dragula for documents with new column\n-                documentDrake.destroy();\n-                listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n-                documentDrake = dragula(listOfColumn, {\n-                    moves: function (el, container, handle) {\n-                        return el.classList.contains('dragDocument');\n-                    },\n-                    accepts: function (el, target) {\n-                        return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n-                    }\n-                });\n-                documentDrake.on('drop', saveToLocalStorage);\n             });\n-\n-            createDocumentForm.addEventListener('submit', function(event) {\n-                event.preventDefault();\n-                const columnID = document.getElementById(\"createDoc\").dataset.id;\n-                const doc = {\n-                    id: `doc-${Date.now()}`,\n-                    title: document.getElementById('documentTitle').value,\n-                    description: document.getElementById('documentDescription').value,\n-                    backgroundColor: '#08CF65'\n-                };\n-                const documentLineItem = createDocumentFromSaved(doc);\n-                const parentColumn = document.getElementById(columnID);\n-                parentColumn.appendChild(documentLineItem);\n-                createDocumentForm.reset();\n-                createDocumentForm.setAttribute('hidden', '');\n+            \n+            documentDrake.on('drop', () => {\n                 saveToLocalStorage();\n             });\n \n             // Close button for document form\n@@ -616,7 +572,129 @@\n             closeBtn.addEventListener('click', function() {\n                 createDocumentForm.setAttribute('hidden', '');\n             });\n         }\n+\n+        function createDocumentPopup(columnData) {\n+            const theDocPopupForm = document.getElementById('createDocumentForm');\n+                 theDocPopupForm.toggleAttribute(\"hidden\");\n+                 const popupButton = document.getElementById('createDoc');\n+                 popupButton.setAttribute('data-id', columnData);\n+            const documentTitle = document.getElementById('documentTitle');\n+            documentTitle.focus();\n+            }\n+\n+            function createDocumentFunc(event) {\n+                event.preventDefault();\n+            const columnID = document.getElementById(\"createDoc\").dataset.id;\n+                const documentLineItem = document.createElement('li');\n+                documentLineItem.className = 'dragDocument';\n+            documentLineItem.id = `doc-${Math.random()}`;\n+\n+            // Create document container\n+            const docContainer = document.createElement('div');\n+            docContainer.className = 'document-container';\n+\n+            // Add title\n+                const docTitle = document.createElement('h2');\n+                const documentTitle = document.getElementById('documentTitle').value;\n+                docTitle.textContent = documentTitle;\n+            docTitle.style.fontWeight = 'bold';\n+            docTitle.addEventListener(\"dblclick\", () => edit(docTitle));\n+            docContainer.appendChild(docTitle);\n+                \n+            // Add description\n+                const docDescription = document.createElement('p');\n+                const documentDescription = document.getElementById('documentDescription').value;\n+            docDescription.textContent = documentDescription;\n+            docDescription.addEventListener(\"dblclick\", () => edit(docDescription));\n+            docContainer.appendChild(docDescription);\n+\n+            // Add color picker\n+            const colorPicker = document.createElement('input');\n+            colorPicker.type = 'color';\n+            colorPicker.className = 'document-color-picker';\n+            colorPicker.value = '#08CF65';\n+            colorPicker.style.position = 'absolute';\n+            colorPicker.style.right = '40px';\n+            colorPicker.style.top = '10px';\n+            colorPicker.addEventListener('input', (e) => {\n+                documentLineItem.style.backgroundColor = e.target.value;\n+                saveToLocalStorage();\n+            });\n+            docContainer.appendChild(colorPicker);\n+            \n+            // Add delete button\n+            const deleteMe = document.createElement(\"button\");\n+            deleteMe.className = 'deleteButton';\n+            deleteMe.dataset.document = documentLineItem.id;\n+            deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.document));\n+            docContainer.appendChild(deleteMe);\n+\n+            // Add container to document\n+            documentLineItem.appendChild(docContainer);\n+\n+            // Add to column\n+                const parentColumn = document.getElementById(`${columnID}`);\n+                parentColumn.appendChild(documentLineItem);\n+\n+            // Reset and close form\n+            document.getElementById('createDocumentForm').reset();\n+            createDocumentPopup(null);\n+\n+            // Save to localStorage\n+            saveToLocalStorage();\n+        }\n+\n+        function deleteDocument(id) {\n+            const element = document.getElementById(id);\n+            if (!element) return;\n+\n+            // Check if it's a column or document\n+            const isColumn = element.classList.contains('dragColumn');\n+            \n+            if (confirm(`Are you sure you want to delete this ${isColumn ? 'column' : 'document'}?`)) {\n+                if (isColumn) {\n+                    // Remove from listOfColumn array\n+                    const index = listOfColumn.indexOf(element);\n+                    if (index > -1) {\n+                        listOfColumn.splice(index, 1);\n+                    }\n+                }\n+                \n+                // Remove the element\n+                element.remove();\n+                \n+                // Save changes\n+                saveToLocalStorage();\n+            }\n+        }\n+\n+        function edit(element){\n+            let text = element.textContent\n+            element.textContent = ''\n+            const rewrite =document.createElement('input');\n+            rewrite.classList.add('form-control');\n+            rewrite.id = \"editInput\";\n+            rewrite.type =\"textbox\";\n+            rewrite.placeholder = text\n+            rewrite.addEventListener(\"keydown\", function(event) {\n+                if (event.key === \"Enter\") {\n+                  event.preventDefault(); // the page would reload otherwise.\n+                  console.log(rewrite.value||\"it's empty\")\n+                  element.textContent = rewrite.value||rewrite.placeholder\n+                  delete rewrite\n+                }if (event.key === \"Escape\") {\n+                    console.log('escape')\n+                    element.textContent = text;\n+                    rewrite.remove(); // Properly remove the input element from the DOM\n+                }\n+            })\n+            rewrite.addEventListener(\"blur\",  function(event) {\n+                element.textContent = text;\n+                rewrite.remove(); // Properly remove the input element from the DOM\n+            })\n+            element.appendChild(rewrite).focus();\n+        }\n     </script>\n   </body>\n </html>\n"
                },
                {
                    "date": 1741898183418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -389,9 +389,34 @@\n             listOfColumn.push(newColumn);\n             document.getElementById('createColumnForm').reset();\n         }\n \n+        function loadFromLocalStorage() {\n+            // Get project ID from URL\n+            const projectId = window.location.pathname.split('/project/')[1];\n+            \n+            // Try to get saved data specific to this project\n+            const savedData = localStorage.getItem(`kanbanBoard_${projectId}`);\n+            if (!savedData) return;\n+\n+            const boardState = JSON.parse(savedData);\n+            const dragparent = document.getElementById('dragparent');\n+            \n+            // Clear existing columns\n+            dragparent.innerHTML = '';\n+            listOfColumn = [];\n+\n+            boardState.columns.forEach(column => {\n+                const newColumn = createColumnFromSaved(column);\n+                dragparent.appendChild(newColumn);\n+                listOfColumn.push(newColumn);\n+            });\n+        }\n+\n         function saveToLocalStorage() {\n+            // Get project ID from URL\n+            const projectId = window.location.pathname.split('/project/')[1];\n+            \n             const boardState = {\n                 columns: Array.from(document.querySelectorAll('.dragColumn')).map(column => {\n                     const documents = Array.from(column.querySelectorAll('.dragDocument')).map(doc => ({\n                         id: doc.id,\n@@ -408,9 +433,10 @@\n                     };\n                 })\n             };\n \n-            localStorage.setItem('kanbanBoard', JSON.stringify(boardState));\n+            // Save with project-specific key\n+            localStorage.setItem(`kanbanBoard_${projectId}`, JSON.stringify(boardState));\n         }\n \n         function createDocumentFromSaved(doc) {\n             const documentLineItem = document.createElement('li');\n"
                },
                {
                    "date": 1741898229392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -545,60 +545,103 @@\n             listOfColumn.push(newColumn);\n             document.getElementById('createColumnForm').reset();\n         }\n \n+        function initializeProject(projectData) {\n+            // Parse the project data if it's a string\n+            if (typeof projectData === 'string') {\n+                projectData = JSON.parse(projectData);\n+            }\n+\n+            // Store project ID globally\n+            window.projectId = projectData._id;\n+\n+            // Check localStorage first\n+            const savedData = localStorage.getItem(`kanbanBoard_${projectId}`);\n+            if (savedData) {\n+                // If we have localStorage data, use that\n+                loadFromLocalStorage();\n+            } else if (projectData.columns && projectData.columns.length > 0) {\n+                // If we have database columns but no localStorage, initialize from database\n+                const dragparent = document.getElementById('dragparent');\n+                dragparent.innerHTML = '';\n+                listOfColumn = [];\n+\n+                projectData.columns.forEach(column => {\n+                    const columnData = {\n+                        id: column._id,\n+                        title: column.name || 'New Column',\n+                        backgroundColor: column.backgroundColor || '#f9f9f9',\n+                        documents: column.documents || []\n+                    };\n+                    const newColumn = createColumnFromSaved(columnData);\n+                    dragparent.appendChild(newColumn);\n+                    listOfColumn.push(newColumn);\n+                });\n+\n+                // Save initial state to localStorage\n+                saveToLocalStorage();\n+            }\n+        }\n+\n         function init() {\n             const createColumnForm = document.getElementById('createColumnForm');\n             const createDocumentForm = document.getElementById('createDocumentForm');\n             const dragparent = document.getElementById('dragparent');\n             let columnDrake;\n             let documentDrake;\n \n-            // Load saved data first\n-            loadFromLocalStorage();\n-            \n-            // Initialize dragula\n-            columnDrake = dragula([dragparent], {\n-                moves: function (el, container, handle) {\n-                    return el.classList.contains('dragColumn') && \n-                           (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');\n-                },\n-                accepts: function (el, target) {\n-                    return el.classList.contains('dragColumn') && target === dragparent;\n-                },\n-                direction: 'horizontal'\n-            });\n+            // Get the project data from the server\n+            const projectId = window.location.pathname.split('/project/')[1];\n+            fetch(`/api/projects/${projectId}`)\n+                .then(response => response.json())\n+                .then(projectData => {\n+                    initializeProject(projectData);\n+                    \n+                    // Initialize dragula\n+                    columnDrake = dragula([dragparent], {\n+                        moves: function (el, container, handle) {\n+                            return el.classList.contains('dragColumn') && \n+                                   (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');\n+                        },\n+                        accepts: function (el, target) {\n+                            return el.classList.contains('dragColumn') && target === dragparent;\n+                        },\n+                        direction: 'horizontal'\n+                    });\n \n-            // Update listOfColumn\n-            listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n-            \n-            documentDrake = dragula(listOfColumn, {\n-                moves: function (el, container, handle) {\n-                    return el.classList.contains('dragDocument');\n-                },\n-                accepts: function (el, target) {\n-                    return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n-                }\n-            });\n+                    // Update listOfColumn\n+                    listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n+                    \n+                    documentDrake = dragula(listOfColumn, {\n+                        moves: function (el, container, handle) {\n+                            return el.classList.contains('dragDocument');\n+                        },\n+                        accepts: function (el, target) {\n+                            return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n+                        }\n+                    });\n \n-            // Event Listeners\n-            columnDrake.on('drop', saveToLocalStorage);\n-            documentDrake.on('drop', saveToLocalStorage);\n+                    // Event Listeners\n+                    columnDrake.on('drop', saveToLocalStorage);\n+                    documentDrake.on('drop', saveToLocalStorage);\n \n-            // Add event listeners for drag operations\n-            columnDrake.on('drop', () => {\n-                saveToLocalStorage();\n-            });\n-            \n-            documentDrake.on('drop', () => {\n-                saveToLocalStorage();\n-            });\n+                    // Add event listeners for drag operations\n+                    columnDrake.on('drop', () => {\n+                        saveToLocalStorage();\n+                    });\n+                    \n+                    documentDrake.on('drop', () => {\n+                        saveToLocalStorage();\n+                    });\n \n-            // Close button for document form\n-            const closeBtn = document.querySelector('.close-btn');\n-            closeBtn.addEventListener('click', function() {\n-                createDocumentForm.setAttribute('hidden', '');\n-            });\n+                    // Close button for document form\n+                    const closeBtn = document.querySelector('.close-btn');\n+                    closeBtn.addEventListener('click', function() {\n+                        createDocumentForm.setAttribute('hidden', '');\n+                    });\n+                })\n+                .catch(error => console.error('Error loading project:', error));\n         }\n \n         function createDocumentPopup(columnData) {\n             const theDocPopupForm = document.getElementById('createDocumentForm');\n"
                },
                {
                    "date": 1741898249437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,23 +59,23 @@\n         .dragDocument {\n             padding: 12px 45px 12px 12px; /* Add padding on the right for icons */\n             margin: 8px 0;\n             border-radius: 4px;\n-           background-color: #08CF65;\n+            background-color: #08CF65;\n             position: relative;\n             cursor: move;\n         }\n         .document-container {\n-           position: relative;\n+            position: relative;\n             width: 100%;\n         }\n         /* Create a container for the icons */\n         .document-icons {\n             position: absolute;\n             top: 50%;\n             right: -35px; /* Adjust based on padding */\n             transform: translateY(-50%);\n-           display: flex;\n+            display: flex;\n             gap: 8px;\n             align-items: center;\n         }\n         .deleteButton {\n@@ -333,90 +333,9 @@\n \n     <script>\n         let listOfColumn = [];\n \n-        function createColumnFunc(event) {\n-            event.preventDefault();\n-            const dragparent = document.getElementById('dragparent');\n-            const columnContent = document.getElementById('columnContent').value;\n-\n-            const newColumn = document.createElement('ul');\n-            const columnNav = document.createElement('nav');\n-            columnNav.className = 'columnNav';\n-\n-            newColumn.className = 'dragColumn';\n-            newColumn.id = `column-${Math.random()}`;\n-\n-            // Create a container for buttons\n-            const buttonContainer = document.createElement('div');\n-            buttonContainer.className = 'button-container';\n-\n-            // Add document button\n-            const newDocPopup = document.createElement(\"button\");\n-            newDocPopup.className = 'newDocPopupButton';\n-            newDocPopup.dataset.column = newColumn.id;\n-            newDocPopup.addEventListener(\"click\", () => createDocumentPopup(newDocPopup.dataset.column));\n-            buttonContainer.appendChild(newDocPopup);\n-\n-            // Add color picker\n-            const colorPicker = document.createElement(\"input\");\n-            colorPicker.type = \"color\";\n-            colorPicker.className = 'column-color-picker';\n-            colorPicker.value = '#f9f9f9';\n-            colorPicker.addEventListener('input', async (e) => {\n-                newColumn.style.backgroundColor = e.target.value;\n-                await saveToLocalStorage();\n-            });\n-            buttonContainer.appendChild(colorPicker);\n-\n-            // Delete button\n-            const deleteMe = document.createElement(\"button\");\n-            deleteMe.className = 'deleteButton';\n-            deleteMe.addEventListener(\"click\", () => deleteDocument(newColumn.id));\n-            buttonContainer.appendChild(deleteMe);\n-\n-            // Add the button container to nav\n-            columnNav.appendChild(buttonContainer);\n-\n-            // Add title\n-            const title = document.createElement('h1');\n-            title.className = 'title';\n-            title.textContent = columnContent;\n-            title.addEventListener(\"dblclick\", () => edit(title));\n-            columnNav.appendChild(title);\n-\n-            newColumn.appendChild(columnNav);\n-            dragparent.appendChild(newColumn);\n-            listOfColumn.push(newColumn);\n-            document.getElementById('createColumnForm').reset();\n-        }\n-\n-        function loadFromLocalStorage() {\n-            // Get project ID from URL\n-            const projectId = window.location.pathname.split('/project/')[1];\n-            \n-            // Try to get saved data specific to this project\n-            const savedData = localStorage.getItem(`kanbanBoard_${projectId}`);\n-            if (!savedData) return;\n-\n-            const boardState = JSON.parse(savedData);\n-            const dragparent = document.getElementById('dragparent');\n-            \n-            // Clear existing columns\n-            dragparent.innerHTML = '';\n-            listOfColumn = [];\n-\n-            boardState.columns.forEach(column => {\n-                const newColumn = createColumnFromSaved(column);\n-                dragparent.appendChild(newColumn);\n-                listOfColumn.push(newColumn);\n-            });\n-        }\n-\n         function saveToLocalStorage() {\n-            // Get project ID from URL\n-            const projectId = window.location.pathname.split('/project/')[1];\n-            \n             const boardState = {\n                 columns: Array.from(document.querySelectorAll('.dragColumn')).map(column => {\n                     const documents = Array.from(column.querySelectorAll('.dragDocument')).map(doc => ({\n                         id: doc.id,\n@@ -433,10 +352,9 @@\n                     };\n                 })\n             };\n \n-            // Save with project-specific key\n-            localStorage.setItem(`kanbanBoard_${projectId}`, JSON.stringify(boardState));\n+            localStorage.setItem('kanbanBoard', JSON.stringify(boardState));\n         }\n \n         function createDocumentFromSaved(doc) {\n             const documentLineItem = document.createElement('li');\n@@ -485,53 +403,53 @@\n             return documentLineItem;\n         }\n \n         function createColumnFromSaved(column) {\n-            const newColumn = document.createElement('ul');\n-            newColumn.className = 'dragColumn';\n+                const newColumn = document.createElement('ul');\n+                newColumn.className = 'dragColumn';\n             newColumn.id = column.id;\n             newColumn.style.backgroundColor = column.backgroundColor;\n \n             const columnNav = document.createElement('nav');\n             columnNav.className = 'columnNav';\n-            const buttonContainer = document.createElement('div');\n-            buttonContainer.className = 'button-container';\n+                const buttonContainer = document.createElement('div');\n+                buttonContainer.className = 'button-container';\n \n-            // Add document button\n-            const newDocPopup = document.createElement(\"button\");\n-            newDocPopup.className = 'newDocPopupButton';\n-            newDocPopup.dataset.column = newColumn.id;\n-            newDocPopup.addEventListener(\"click\", () => createDocumentPopup(newDocPopup.dataset.column));\n-            buttonContainer.appendChild(newDocPopup);\n+                // Add document button\n+                const newDocPopup = document.createElement(\"button\");\n+                newDocPopup.className = 'newDocPopupButton';\n+                newDocPopup.dataset.column = newColumn.id;\n+                newDocPopup.addEventListener(\"click\", () => createDocumentPopup(newDocPopup.dataset.column));\n+                buttonContainer.appendChild(newDocPopup);\n \n-            // Add color picker\n-            const colorPicker = document.createElement(\"input\");\n-            colorPicker.type = \"color\";\n-            colorPicker.className = 'column-color-picker';\n+                // Add color picker\n+                const colorPicker = document.createElement(\"input\");\n+                colorPicker.type = \"color\";\n+                colorPicker.className = 'column-color-picker';\n             colorPicker.value = column.backgroundColor || '#f9f9f9';\n             colorPicker.addEventListener('input', (e) => {\n-                newColumn.style.backgroundColor = e.target.value;\n+                    newColumn.style.backgroundColor = e.target.value;\n                 saveToLocalStorage();\n-            });\n-            buttonContainer.appendChild(colorPicker);\n+                });\n+                buttonContainer.appendChild(colorPicker);\n \n-            // Delete button\n-            const deleteMe = document.createElement(\"button\");\n-            deleteMe.className = 'deleteButton';\n-            deleteMe.dataset.column = newColumn.id;\n-            deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.column));\n-            buttonContainer.appendChild(deleteMe);\n+                // Delete button\n+                const deleteMe = document.createElement(\"button\");\n+                deleteMe.className = 'deleteButton';\n+                deleteMe.dataset.column = newColumn.id;\n+                deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.column));\n+                buttonContainer.appendChild(deleteMe);\n \n-            columnNav.appendChild(buttonContainer);\n+                columnNav.appendChild(buttonContainer);\n \n-            // Add title\n-            const title = document.createElement('h1');\n-            title.className = 'title';\n+                // Add title\n+                const title = document.createElement('h1');\n+                title.className = 'title';\n             title.textContent = column.title;\n-            title.addEventListener(\"dblclick\", () => edit(title));\n-            columnNav.appendChild(title);\n+                title.addEventListener(\"dblclick\", () => edit(title));\n+                columnNav.appendChild(title);\n \n-            newColumn.appendChild(columnNav);\n+                newColumn.appendChild(columnNav);\n \n             // Create saved documents\n             if (column.documents) {\n                 column.documents.forEach(doc => {\n@@ -539,231 +457,166 @@\n                     newColumn.appendChild(documentLineItem);\n                 });\n             }\n \n-            newColumn.appendChild(columnNav);\n-            dragparent.appendChild(newColumn);\n-            listOfColumn.push(newColumn);\n-            document.getElementById('createColumnForm').reset();\n+            return newColumn;\n         }\n \n-        function initializeProject(projectData) {\n-            // Parse the project data if it's a string\n-            if (typeof projectData === 'string') {\n-                projectData = JSON.parse(projectData);\n-            }\n+        function loadFromLocalStorage() {\n+            const savedData = localStorage.getItem('kanbanBoard');\n+            if (!savedData) return;\n \n-            // Store project ID globally\n-            window.projectId = projectData._id;\n+            const boardState = JSON.parse(savedData);\n+            const dragparent = document.getElementById('dragparent');\n+            \n+            // Clear existing columns\n+            dragparent.innerHTML = '';\n+            listOfColumn = [];\n \n-            // Check localStorage first\n-            const savedData = localStorage.getItem(`kanbanBoard_${projectId}`);\n-            if (savedData) {\n-                // If we have localStorage data, use that\n-                loadFromLocalStorage();\n-            } else if (projectData.columns && projectData.columns.length > 0) {\n-                // If we have database columns but no localStorage, initialize from database\n-                const dragparent = document.getElementById('dragparent');\n-                dragparent.innerHTML = '';\n-                listOfColumn = [];\n+            boardState.columns.forEach(column => {\n+                const newColumn = createColumnFromSaved(column);\n+                dragparent.appendChild(newColumn);\n+                listOfColumn.push(newColumn);\n+            });\n+        }\n \n-                projectData.columns.forEach(column => {\n-                    const columnData = {\n-                        id: column._id,\n-                        title: column.name || 'New Column',\n-                        backgroundColor: column.backgroundColor || '#f9f9f9',\n-                        documents: column.documents || []\n-                    };\n-                    const newColumn = createColumnFromSaved(columnData);\n-                    dragparent.appendChild(newColumn);\n-                    listOfColumn.push(newColumn);\n-                });\n-\n-                // Save initial state to localStorage\n+        function deleteDocument(docID) {\n+            const theDoomedDocument = document.getElementById(docID);\n+            if(theDoomedDocument) {\n+                theDoomedDocument.parentNode.removeChild(theDoomedDocument);\n                 saveToLocalStorage();\n             }\n         }\n \n-        function init() {\n-            const createColumnForm = document.getElementById('createColumnForm');\n-            const createDocumentForm = document.getElementById('createDocumentForm');\n-            const dragparent = document.getElementById('dragparent');\n-            let columnDrake;\n-            let documentDrake;\n+        function edit(element) {\n+            let text = element.textContent;\n+            element.textContent = '';\n+            const rewrite = document.createElement('input');\n+            rewrite.classList.add('form-control');\n+            rewrite.id = \"editInput\";\n+            rewrite.type = \"textbox\";\n+            rewrite.placeholder = text;\n+            rewrite.value = text;\n+            \n+            rewrite.addEventListener(\"keydown\", function(event) {\n+                if (event.key === \"Enter\") {\n+                    event.preventDefault();\n+                    element.textContent = rewrite.value || rewrite.placeholder;\n+                    rewrite.remove();\n+                    saveToLocalStorage();\n+                } else if (event.key === \"Escape\") {\n+                    element.textContent = text;\n+                    rewrite.remove();\n+                }\n+            });\n \n-            // Get the project data from the server\n-            const projectId = window.location.pathname.split('/project/')[1];\n-            fetch(`/api/projects/${projectId}`)\n-                .then(response => response.json())\n-                .then(projectData => {\n-                    initializeProject(projectData);\n-                    \n-                    // Initialize dragula\n-                    columnDrake = dragula([dragparent], {\n-                        moves: function (el, container, handle) {\n-                            return el.classList.contains('dragColumn') && \n-                                   (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');\n-                        },\n-                        accepts: function (el, target) {\n-                            return el.classList.contains('dragColumn') && target === dragparent;\n-                        },\n-                        direction: 'horizontal'\n-                    });\n+            rewrite.addEventListener(\"blur\", function(event) {\n+                element.textContent = text;\n+                rewrite.remove();\n+            });\n \n-                    // Update listOfColumn\n-                    listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n-                    \n-                    documentDrake = dragula(listOfColumn, {\n-                        moves: function (el, container, handle) {\n-                            return el.classList.contains('dragDocument');\n-                        },\n-                        accepts: function (el, target) {\n-                            return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n-                        }\n-                    });\n-\n-                    // Event Listeners\n-                    columnDrake.on('drop', saveToLocalStorage);\n-                    documentDrake.on('drop', saveToLocalStorage);\n-\n-                    // Add event listeners for drag operations\n-                    columnDrake.on('drop', () => {\n-                        saveToLocalStorage();\n-                    });\n-                    \n-                    documentDrake.on('drop', () => {\n-                        saveToLocalStorage();\n-                    });\n-\n-                    // Close button for document form\n-                    const closeBtn = document.querySelector('.close-btn');\n-                    closeBtn.addEventListener('click', function() {\n-                        createDocumentForm.setAttribute('hidden', '');\n-                    });\n-                })\n-                .catch(error => console.error('Error loading project:', error));\n+            element.appendChild(rewrite);\n+            rewrite.focus();\n         }\n \n         function createDocumentPopup(columnData) {\n             const theDocPopupForm = document.getElementById('createDocumentForm');\n-                 theDocPopupForm.toggleAttribute(\"hidden\");\n-                 const popupButton = document.getElementById('createDoc');\n-                 popupButton.setAttribute('data-id', columnData);\n+            theDocPopupForm.toggleAttribute(\"hidden\");\n+            const popupButton = document.getElementById('createDoc');\n+            popupButton.setAttribute('data-id', columnData);\n             const documentTitle = document.getElementById('documentTitle');\n             documentTitle.focus();\n-            }\n+        }\n \n-            function createDocumentFunc(event) {\n-                event.preventDefault();\n-            const columnID = document.getElementById(\"createDoc\").dataset.id;\n-                const documentLineItem = document.createElement('li');\n-                documentLineItem.className = 'dragDocument';\n-            documentLineItem.id = `doc-${Math.random()}`;\n+        function init() {\n+            const createColumnForm = document.getElementById('createColumnForm');\n+            const createDocumentForm = document.getElementById('createDocumentForm');\n+            const dragparent = document.getElementById('dragparent');\n+            let columnDrake;\n+            let documentDrake;\n \n-            // Create document container\n-            const docContainer = document.createElement('div');\n-            docContainer.className = 'document-container';\n+            // Load saved data first\n+            loadFromLocalStorage();\n+            \n+            // Initialize dragula\n+                columnDrake = dragula([dragparent], {\n+                    moves: function (el, container, handle) {\n+                        return el.classList.contains('dragColumn') && \n+                               (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');\n+                    },\n+                    accepts: function (el, target) {\n+                        return el.classList.contains('dragColumn') && target === dragparent;\n+                    },\n+                    direction: 'horizontal'\n+                });\n \n-            // Add title\n-                const docTitle = document.createElement('h2');\n-                const documentTitle = document.getElementById('documentTitle').value;\n-                docTitle.textContent = documentTitle;\n-            docTitle.style.fontWeight = 'bold';\n-            docTitle.addEventListener(\"dblclick\", () => edit(docTitle));\n-            docContainer.appendChild(docTitle);\n-                \n-            // Add description\n-                const docDescription = document.createElement('p');\n-                const documentDescription = document.getElementById('documentDescription').value;\n-            docDescription.textContent = documentDescription;\n-            docDescription.addEventListener(\"dblclick\", () => edit(docDescription));\n-            docContainer.appendChild(docDescription);\n+            // Update listOfColumn\n+            listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n+            \n+            documentDrake = dragula(listOfColumn, {\n+                moves: function (el, container, handle) {\n+                    return el.classList.contains('dragDocument');\n+                },\n+                accepts: function (el, target) {\n+                    return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n+                }\n+            });\n \n-            // Add color picker\n-            const colorPicker = document.createElement('input');\n-            colorPicker.type = 'color';\n-            colorPicker.className = 'document-color-picker';\n-            colorPicker.value = '#08CF65';\n-            colorPicker.style.position = 'absolute';\n-            colorPicker.style.right = '40px';\n-            colorPicker.style.top = '10px';\n-            colorPicker.addEventListener('input', (e) => {\n-                documentLineItem.style.backgroundColor = e.target.value;\n+            // Event Listeners\n+            columnDrake.on('drop', saveToLocalStorage);\n+            documentDrake.on('drop', saveToLocalStorage);\n+\n+            createColumnForm.addEventListener('submit', function(event) {\n+                event.preventDefault();\n+                const columnContent = document.getElementById('columnContent').value;\n+                const column = {\n+                    id: `column-${Date.now()}`,\n+                    title: columnContent,\n+                    backgroundColor: '#f9f9f9',\n+                    documents: []\n+                };\n+                const newColumn = createColumnFromSaved(column);\n+                dragparent.appendChild(newColumn);\n+                listOfColumn.push(newColumn);\n+                createColumnForm.reset();\n                 saveToLocalStorage();\n+                \n+                // Reinitialize dragula for documents with new column\n+                documentDrake.destroy();\n+                listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n+                documentDrake = dragula(listOfColumn, {\n+                    moves: function (el, container, handle) {\n+                        return el.classList.contains('dragDocument');\n+                    },\n+                    accepts: function (el, target) {\n+                        return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n+                    }\n+                });\n+                documentDrake.on('drop', saveToLocalStorage);\n             });\n-            docContainer.appendChild(colorPicker);\n-            \n-            // Add delete button\n-            const deleteMe = document.createElement(\"button\");\n-            deleteMe.className = 'deleteButton';\n-            deleteMe.dataset.document = documentLineItem.id;\n-            deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.document));\n-            docContainer.appendChild(deleteMe);\n \n-            // Add container to document\n-            documentLineItem.appendChild(docContainer);\n-\n-            // Add to column\n-                const parentColumn = document.getElementById(`${columnID}`);\n+            createDocumentForm.addEventListener('submit', function(event) {\n+                event.preventDefault();\n+                const columnID = document.getElementById(\"createDoc\").dataset.id;\n+                const doc = {\n+                    id: `doc-${Date.now()}`,\n+                    title: document.getElementById('documentTitle').value,\n+                    description: document.getElementById('documentDescription').value,\n+                    backgroundColor: '#08CF65'\n+                };\n+                const documentLineItem = createDocumentFromSaved(doc);\n+                const parentColumn = document.getElementById(columnID);\n                 parentColumn.appendChild(documentLineItem);\n-\n-            // Reset and close form\n-            document.getElementById('createDocumentForm').reset();\n-            createDocumentPopup(null);\n-\n-            // Save to localStorage\n-            saveToLocalStorage();\n-        }\n-\n-        function deleteDocument(id) {\n-            const element = document.getElementById(id);\n-            if (!element) return;\n-\n-            // Check if it's a column or document\n-            const isColumn = element.classList.contains('dragColumn');\n-            \n-            if (confirm(`Are you sure you want to delete this ${isColumn ? 'column' : 'document'}?`)) {\n-                if (isColumn) {\n-                    // Remove from listOfColumn array\n-                    const index = listOfColumn.indexOf(element);\n-                    if (index > -1) {\n-                        listOfColumn.splice(index, 1);\n-                    }\n-                }\n-                \n-                // Remove the element\n-                element.remove();\n-                \n-                // Save changes\n+                createDocumentForm.reset();\n+                createDocumentForm.setAttribute('hidden', '');\n                 saveToLocalStorage();\n-            }\n-        }\n+            });\n \n-        function edit(element){\n-            let text = element.textContent\n-            element.textContent = ''\n-            const rewrite =document.createElement('input');\n-            rewrite.classList.add('form-control');\n-            rewrite.id = \"editInput\";\n-            rewrite.type =\"textbox\";\n-            rewrite.placeholder = text\n-            rewrite.addEventListener(\"keydown\", function(event) {\n-                if (event.key === \"Enter\") {\n-                  event.preventDefault(); // the page would reload otherwise.\n-                  console.log(rewrite.value||\"it's empty\")\n-                  element.textContent = rewrite.value||rewrite.placeholder\n-                  delete rewrite\n-                }if (event.key === \"Escape\") {\n-                    console.log('escape')\n-                    element.textContent = text;\n-                    rewrite.remove(); // Properly remove the input element from the DOM\n-                }\n-            })\n-            rewrite.addEventListener(\"blur\",  function(event) {\n-                element.textContent = text;\n-                rewrite.remove(); // Properly remove the input element from the DOM\n-            })\n-            element.appendChild(rewrite).focus();\n+            // Close button for document form\n+            const closeBtn = document.querySelector('.close-btn');\n+            closeBtn.addEventListener('click', function() {\n+                createDocumentForm.setAttribute('hidden', '');\n+            });\n         }\n     </script>\n   </body>\n </html>\n"
                },
                {
                    "date": 1741898302569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -533,12 +533,13 @@\n             const dragparent = document.getElementById('dragparent');\n             let columnDrake;\n             let documentDrake;\n \n-            // Load saved data first\n-            loadFromLocalStorage();\n-            \n-            // Initialize dragula\n+            // Load saved data first and wait for it to complete\n+            window.addEventListener('DOMContentLoaded', function() {\n+                loadFromLocalStorage();\n+                \n+                // Initialize dragula only after loading is complete\n                 columnDrake = dragula([dragparent], {\n                     moves: function (el, container, handle) {\n                         return el.classList.contains('dragColumn') && \n                                (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');\n@@ -548,74 +549,62 @@\n                     },\n                     direction: 'horizontal'\n                 });\n \n-            // Update listOfColumn\n-            listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n-            \n-            documentDrake = dragula(listOfColumn, {\n+                // Update listOfColumn\n+                listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n+                \n+                documentDrake = dragula(listOfColumn, {\n                 moves: function (el, container, handle) {\n                     return el.classList.contains('dragDocument');\n                 },\n                 accepts: function (el, target) {\n                     return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n-                }\n-            });\n-\n-            // Event Listeners\n-            columnDrake.on('drop', saveToLocalStorage);\n-            documentDrake.on('drop', saveToLocalStorage);\n-\n-            createColumnForm.addEventListener('submit', function(event) {\n-                event.preventDefault();\n-                const columnContent = document.getElementById('columnContent').value;\n-                const column = {\n-                    id: `column-${Date.now()}`,\n-                    title: columnContent,\n-                    backgroundColor: '#f9f9f9',\n-                    documents: []\n-                };\n-                const newColumn = createColumnFromSaved(column);\n-                dragparent.appendChild(newColumn);\n-                listOfColumn.push(newColumn);\n-                createColumnForm.reset();\n-                saveToLocalStorage();\n-                \n-                // Reinitialize dragula for documents with new column\n-                documentDrake.destroy();\n-                listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n-                documentDrake = dragula(listOfColumn, {\n-                    moves: function (el, container, handle) {\n-                        return el.classList.contains('dragDocument');\n-                    },\n-                    accepts: function (el, target) {\n-                        return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n                     }\n                 });\n+\n+                // Event Listeners\n+                columnDrake.on('drop', saveToLocalStorage);\n                 documentDrake.on('drop', saveToLocalStorage);\n-            });\n \n-            createDocumentForm.addEventListener('submit', function(event) {\n-                event.preventDefault();\n-                const columnID = document.getElementById(\"createDoc\").dataset.id;\n-                const doc = {\n-                    id: `doc-${Date.now()}`,\n-                    title: document.getElementById('documentTitle').value,\n-                    description: document.getElementById('documentDescription').value,\n-                    backgroundColor: '#08CF65'\n-                };\n-                const documentLineItem = createDocumentFromSaved(doc);\n-                const parentColumn = document.getElementById(columnID);\n-                parentColumn.appendChild(documentLineItem);\n-                createDocumentForm.reset();\n-                createDocumentForm.setAttribute('hidden', '');\n-                saveToLocalStorage();\n-            });\n+                createColumnForm.addEventListener('submit', function(event) {\n+                    event.preventDefault();\n+                    const columnContent = document.getElementById('columnContent').value;\n+                    const column = {\n+                        id: `column-${Date.now()}`,\n+                        title: columnContent,\n+                        backgroundColor: '#f9f9f9',\n+                        documents: []\n+                    };\n+                    const newColumn = createColumnFromSaved(column);\n+                    dragparent.appendChild(newColumn);\n+                    listOfColumn.push(newColumn);\n+                    createColumnForm.reset();\n+                    saveToLocalStorage();\n+                });\n \n-            // Close button for document form\n-            const closeBtn = document.querySelector('.close-btn');\n-            closeBtn.addEventListener('click', function() {\n-                createDocumentForm.setAttribute('hidden', '');\n+                createDocumentForm.addEventListener('submit', function(event) {\n+                    event.preventDefault();\n+                    const columnID = document.getElementById(\"createDoc\").dataset.id;\n+                    const doc = {\n+                        id: `doc-${Date.now()}`,\n+                        title: document.getElementById('documentTitle').value,\n+                        description: document.getElementById('documentDescription').value,\n+                        backgroundColor: '#08CF65'\n+                    };\n+                    const documentLineItem = createDocumentFromSaved(doc);\n+                    const parentColumn = document.getElementById(columnID);\n+                    parentColumn.appendChild(documentLineItem);\n+                    createDocumentForm.reset();\n+                    createDocumentForm.setAttribute('hidden', '');\n+                    saveToLocalStorage();\n+                });\n+\n+                // Close button for document form\n+                const closeBtn = document.querySelector('.close-btn');\n+                closeBtn.addEventListener('click', function() {\n+                    createDocumentForm.setAttribute('hidden', '');\n+                });\n             });\n         }\n     </script>\n   </body>\n"
                },
                {
                    "date": 1741898518343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -403,53 +403,53 @@\n             return documentLineItem;\n         }\n \n         function createColumnFromSaved(column) {\n-                const newColumn = document.createElement('ul');\n-                newColumn.className = 'dragColumn';\n+            const newColumn = document.createElement('ul');\n+            newColumn.className = 'dragColumn';\n             newColumn.id = column.id;\n             newColumn.style.backgroundColor = column.backgroundColor;\n \n             const columnNav = document.createElement('nav');\n             columnNav.className = 'columnNav';\n-                const buttonContainer = document.createElement('div');\n-                buttonContainer.className = 'button-container';\n+            const buttonContainer = document.createElement('div');\n+            buttonContainer.className = 'button-container';\n \n-                // Add document button\n-                const newDocPopup = document.createElement(\"button\");\n-                newDocPopup.className = 'newDocPopupButton';\n-                newDocPopup.dataset.column = newColumn.id;\n-                newDocPopup.addEventListener(\"click\", () => createDocumentPopup(newDocPopup.dataset.column));\n-                buttonContainer.appendChild(newDocPopup);\n+            // Add document button\n+            const newDocPopup = document.createElement(\"button\");\n+            newDocPopup.className = 'newDocPopupButton';\n+            newDocPopup.dataset.column = newColumn.id;\n+            newDocPopup.addEventListener(\"click\", () => createDocumentPopup(newDocPopup.dataset.column));\n+            buttonContainer.appendChild(newDocPopup);\n \n-                // Add color picker\n-                const colorPicker = document.createElement(\"input\");\n-                colorPicker.type = \"color\";\n-                colorPicker.className = 'column-color-picker';\n+            // Add color picker\n+            const colorPicker = document.createElement(\"input\");\n+            colorPicker.type = \"color\";\n+            colorPicker.className = 'column-color-picker';\n             colorPicker.value = column.backgroundColor || '#f9f9f9';\n             colorPicker.addEventListener('input', (e) => {\n-                    newColumn.style.backgroundColor = e.target.value;\n+                newColumn.style.backgroundColor = e.target.value;\n                 saveToLocalStorage();\n-                });\n-                buttonContainer.appendChild(colorPicker);\n+            });\n+            buttonContainer.appendChild(colorPicker);\n \n-                // Delete button\n-                const deleteMe = document.createElement(\"button\");\n-                deleteMe.className = 'deleteButton';\n-                deleteMe.dataset.column = newColumn.id;\n-                deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.column));\n-                buttonContainer.appendChild(deleteMe);\n+            // Delete button\n+            const deleteMe = document.createElement(\"button\");\n+            deleteMe.className = 'deleteButton';\n+            deleteMe.dataset.column = newColumn.id;\n+            deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.column));\n+            buttonContainer.appendChild(deleteMe);\n \n-                columnNav.appendChild(buttonContainer);\n+            columnNav.appendChild(buttonContainer);\n \n-                // Add title\n-                const title = document.createElement('h1');\n-                title.className = 'title';\n+            // Add title\n+            const title = document.createElement('h1');\n+            title.className = 'title';\n             title.textContent = column.title;\n-                title.addEventListener(\"dblclick\", () => edit(title));\n-                columnNav.appendChild(title);\n+            title.addEventListener(\"dblclick\", () => edit(title));\n+            columnNav.appendChild(title);\n \n-                newColumn.appendChild(columnNav);\n+            newColumn.appendChild(columnNav);\n \n             // Create saved documents\n             if (column.documents) {\n                 column.documents.forEach(doc => {\n@@ -533,78 +533,89 @@\n             const dragparent = document.getElementById('dragparent');\n             let columnDrake;\n             let documentDrake;\n \n-            // Load saved data first and wait for it to complete\n-            window.addEventListener('DOMContentLoaded', function() {\n-                loadFromLocalStorage();\n-                \n-                // Initialize dragula only after loading is complete\n-                columnDrake = dragula([dragparent], {\n-                    moves: function (el, container, handle) {\n-                        return el.classList.contains('dragColumn') && \n-                               (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');\n-                    },\n-                    accepts: function (el, target) {\n-                        return el.classList.contains('dragColumn') && target === dragparent;\n-                    },\n-                    direction: 'horizontal'\n-                });\n+            // Load saved data first\n+            loadFromLocalStorage();\n+            \n+            // Initialize dragula\n+            columnDrake = dragula([dragparent], {\n+                moves: function (el, container, handle) {\n+                    return el.classList.contains('dragColumn') && \n+                           (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');\n+                },\n+                accepts: function (el, target) {\n+                    return el.classList.contains('dragColumn') && target === dragparent;\n+                },\n+                direction: 'horizontal'\n+            });\n \n-                // Update listOfColumn\n-                listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n-                \n-                documentDrake = dragula(listOfColumn, {\n+            // Update listOfColumn\n+            listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n+            \n+            documentDrake = dragula(listOfColumn, {\n                 moves: function (el, container, handle) {\n                     return el.classList.contains('dragDocument');\n                 },\n                 accepts: function (el, target) {\n                     return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n+                }\n+            });\n+\n+            // Event Listeners\n+            columnDrake.on('drop', saveToLocalStorage);\n+            documentDrake.on('drop', saveToLocalStorage);\n+\n+            createColumnForm.addEventListener('submit', function(event) {\n+                event.preventDefault();\n+                const columnContent = document.getElementById('columnContent').value;\n+                const column = {\n+                    id: `column-${Date.now()}`,\n+                    title: columnContent,\n+                    backgroundColor: '#f9f9f9',\n+                    documents: []\n+                };\n+                const newColumn = createColumnFromSaved(column);\n+                dragparent.appendChild(newColumn);\n+                listOfColumn.push(newColumn);\n+                createColumnForm.reset();\n+                saveToLocalStorage();\n+                \n+                // Reinitialize dragula for documents with new column\n+                documentDrake.destroy();\n+                listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n+                documentDrake = dragula(listOfColumn, {\n+                    moves: function (el, container, handle) {\n+                        return el.classList.contains('dragDocument');\n+                    },\n+                    accepts: function (el, target) {\n+                        return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n                     }\n                 });\n-\n-                // Event Listeners\n-                columnDrake.on('drop', saveToLocalStorage);\n                 documentDrake.on('drop', saveToLocalStorage);\n+            });\n \n-                createColumnForm.addEventListener('submit', function(event) {\n-                    event.preventDefault();\n-                    const columnContent = document.getElementById('columnContent').value;\n-                    const column = {\n-                        id: `column-${Date.now()}`,\n-                        title: columnContent,\n-                        backgroundColor: '#f9f9f9',\n-                        documents: []\n-                    };\n-                    const newColumn = createColumnFromSaved(column);\n-                    dragparent.appendChild(newColumn);\n-                    listOfColumn.push(newColumn);\n-                    createColumnForm.reset();\n-                    saveToLocalStorage();\n-                });\n+            createDocumentForm.addEventListener('submit', function(event) {\n+                event.preventDefault();\n+                const columnID = document.getElementById(\"createDoc\").dataset.id;\n+                const doc = {\n+                    id: `doc-${Date.now()}`,\n+                    title: document.getElementById('documentTitle').value,\n+                    description: document.getElementById('documentDescription').value,\n+                    backgroundColor: '#08CF65'\n+                };\n+                const documentLineItem = createDocumentFromSaved(doc);\n+                const parentColumn = document.getElementById(columnID);\n+                parentColumn.appendChild(documentLineItem);\n+                createDocumentForm.reset();\n+                createDocumentForm.setAttribute('hidden', '');\n+                saveToLocalStorage();\n+            });\n \n-                createDocumentForm.addEventListener('submit', function(event) {\n-                    event.preventDefault();\n-                    const columnID = document.getElementById(\"createDoc\").dataset.id;\n-                    const doc = {\n-                        id: `doc-${Date.now()}`,\n-                        title: document.getElementById('documentTitle').value,\n-                        description: document.getElementById('documentDescription').value,\n-                        backgroundColor: '#08CF65'\n-                    };\n-                    const documentLineItem = createDocumentFromSaved(doc);\n-                    const parentColumn = document.getElementById(columnID);\n-                    parentColumn.appendChild(documentLineItem);\n-                    createDocumentForm.reset();\n-                    createDocumentForm.setAttribute('hidden', '');\n-                    saveToLocalStorage();\n-                });\n-\n-                // Close button for document form\n-                const closeBtn = document.querySelector('.close-btn');\n-                closeBtn.addEventListener('click', function() {\n-                    createDocumentForm.setAttribute('hidden', '');\n-                });\n+            // Close button for document form\n+            const closeBtn = document.querySelector('.close-btn');\n+            closeBtn.addEventListener('click', function() {\n+                createDocumentForm.setAttribute('hidden', '');\n             });\n         }\n     </script>\n   </body>\n"
                }
            ],
            "date": 1741897495743,
            "name": "Commit-0",
            "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <!-- Without reset.css: inconsistent element styling across browsers -->\n    <link rel=\"stylesheet\" href=\"/css/reset.css\" />\n    <link rel=\"stylesheet\" href=\"/css/style.css\" />\n    <link rel=\"stylesheet\" href=\"/css/dragula.css\"/>\n    <!-- Without font preconnect: slow font loading and page render -->\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,400;0,700;0,900;1,400;1,700&display=swap\" rel=\"stylesheet\">\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap\" rel=\"stylesheet\">\n    \n    <title>Project Template</title>\n    <style>\n        .drag-container {\n            display: flex;\n            flex-wrap: wrap;\n            height: fit-content;\n            overflow-y: auto;\n        }\n        .dragColumn {\n            border: 1px solid #ccc;\n            padding: 10px;\n            background-color: #f9f9f9;\n            box-sizing: border-box;\n            word-wrap: break-word;\n            margin: 10px;\n            flex: 1 0 10%;\n            position: relative;\n           display: flex;\n           position: relative;\n\n           flex-flow: column nowrap;\n           align-items: inherit;\n           justify-content: flex-start;\n        }\n        .gu-mirror{\n            /*this was required to flip right-side -up the dragged objects.  */\n            transform: rotate(0deg);\n        }\n        .handle, .bar{\n            border:  1px solid #ccc;\n            font-size: 1.5rem;\n            width: 3vh;\n            height: 3vh;\n            padding: 0.1vh 0 0 0;\n            display: inline-block;\n            text-align: center;\n            background-image: url(/images/Icons2.webp);\n            background-color: goldenrod;\n            background-size: 1155%;\n            background-position: 90.5% 37%;\n            border-radius: 22%;\n        }\n        .dragDocument {\n            padding: 12px 45px 12px 12px; /* Add padding on the right for icons */\n            margin: 8px 0;\n            border-radius: 4px;\n            background-color: #08CF65;\n            position: relative;\n            cursor: move;\n        }\n        .document-container {\n            position: relative;\n            width: 100%;\n        }\n        /* Create a container for the icons */\n        .document-icons {\n            position: absolute;\n            top: 50%;\n            right: -35px; /* Adjust based on padding */\n            transform: translateY(-50%);\n            display: flex;\n            gap: 8px;\n            align-items: center;\n        }\n        .deleteButton {\n            border: 1px solid #ccc;\n            width: 24px;\n            height: 24px;\n            padding: 0;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            background-image: url(/images/Icons1.webp);\n            background-color: transparent;\n            background-size: 1300%;\n            background-position: 63% 37%;\n            border-radius: 4px;\n            position: absolute;\n            top: 8px;\n            right: 8px;\n            cursor: pointer;\n            transition: all 0.2s ease;\n        }\n        .deleteButton:hover {\n            background-color: #ff4444;\n            border-color: #ff0000;\n            background-image: url(/images/Icons1.webp);\n        }\n        .dragDocument .deleteButton{\n            align-self: flex-end;\n        }\n        .newDocPopupButton {\n            border: 1px solid #ccc;\n            font-size: 1.5rem;\n            width: 3vw;\n            height: 3vh;\n            padding: 0.1vh 0 0 0;\n            display: flex\n;       \n            text-align: center;\n            background-image: url(/images/Icons1.webp);\n            background-color: lightgrey;\n            background-size: 1000%;\n            background-position: 36% 63%;\n            border-radius: 22%;\n            position: relative;\n            margin: 1% 1%;\n            \n        }\n         nav.columnNav{\n            display: flex;\n            flex-flow: row nowrap;\n            justify-content: space-between;\n            position: relative;\n            align-items: baseline;\n        }\n        #createDocumentForm{\n            border: 1px solid black;\n            position: fixed;\n            width: 30%;\n            z-index: 2;\n            background-color: white;\n            top: 50%;\n            left: calc(50% + 400px);\n            transform: translate(-50%, -50%);\n        }\n        body{\n            position: relative;\n            height: 100vh;\n        }\n        footer{\n            position: sticky;\n            top: 100vh;\n        }\n        .close-btn {\n            position: absolute;\n            right: 10px;\n            top: 10px;\n            font-size: 24px;\n            cursor: pointer;\n            color: #666;\n            transition: color 0.2s;\n        }\n        \n        .close-btn:hover {\n            color: #000;\n        }\n\n        .form-header {\n            position: relative;\n            padding: 15px;\n            border-bottom: 1px solid #ddd;\n            margin-bottom: 15px;\n        }\n\n        .column-color-picker,\n        .document-color-picker {\n            width: 25px;\n            height: 25px;\n            padding: 0;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            cursor: pointer;\n            background-color: transparent;\n            transition: transform 0.2s ease;\n        }\n\n        .column-color-picker:hover,\n        .document-color-picker:hover {\n            transform: scale(1.1);\n        }\n\n        .column-color-picker::-webkit-color-swatch-wrapper,\n        .document-color-picker::-webkit-color-swatch-wrapper {\n            padding: 0;\n        }\n\n        .column-color-picker::-webkit-color-swatch,\n        .document-color-picker::-webkit-color-swatch {\n            border: none;\n            border-radius: 3px;\n        }\n\n        .column-color-picker::-moz-color-swatch,\n        .document-color-picker::-moz-color-swatch {\n            border: none;\n            border-radius: 3px;\n        }\n\n        .dragColumn {\n            transition: background-color 0.3s ease;\n            min-height: 50px; /* Ensure columns are droppable when empty */\n        }\n\n        nav.columnNav {\n            display: flex;\n            flex-flow: row nowrap;\n            justify-content: flex-start;\n            position: relative;\n            align-items: center;\n            gap: 8px;\n            padding: 5px;\n        }\n\n        .button-container {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            margin-bottom: 10px;\n        }\n\n        .dragDocument:hover {\n            transform: translateY(-2px);\n        }\n\n        .gu-mirror {\n            cursor: grabbing;\n        }\n\n        .gu-transit {\n            opacity: 0.4;\n            background-color: #f0f0f0;\n        }\n\n        .document-color-picker {\n            width: 24px;\n            height: 24px;\n            padding: 0;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n\n        .document-content {\n            margin-right: 30px; /* Space for delete button */\n        }\n\n        .document-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 8px;\n        }\n\n        .document-header h2 {\n            margin: 0;\n            font-size: 16px;\n            font-weight: bold;\n            color: #333;\n            flex-grow: 1;\n        }\n\n        .dragDocument p {\n            margin: 5px 0 0 0;\n            font-size: 14px;\n            color: #333;\n        }\n\n        .deleteButton {\n            position: absolute;\n            top: 8px;\n            right: 8px;\n            width: 24px;\n            height: 24px;\n        }\n    </style>\n  </head>\n\n  <body onload=\"init()\">\n    <!-- Without header: navigation missing -->\n    <%- include('partials/header') %>\n\n    <!-- Without this form: no way to c\n     new columns -->\n    <form id=\"createColumnForm\">\n        <div class=\"form-group\">\n            <label for=\"columnContent\">Column Content</label>\n            <input type=\"text\" id=\"columnContent\" class=\"form-control\" required>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Create Column</button>\n    </form>\n\n    <!-- Without hidden attribute: form shows before any columns exist -->\n    <form id=\"createDocumentForm\" hidden class=\"document-form\">\n        <div class=\"form-header\">\n        <h2>Create Document</h2>\n            <span class=\"close-btn\">&times;</span>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"documentTitle\">Document Title</label>\n            <input type=\"text\" id=\"documentTitle\" class=\"form-control\" required>\n            \n            <label for=\"documentDescription\">Document Description</label>\n            <textarea id=\"documentDescription\" class=\"form-control\"></textarea>\n            \n            <div class=\"form-buttons\">\n                <input type=\"button\" id=\"documentColumn\" class=\"form-control btn-secondary\" value=\"Column\">\n                <input type=\"button\" id=\"documentAssignee\" class=\"form-control btn-secondary\" value=\"Assignee\">\n                <input type=\"button\" id=\"documentLabel\" class=\"form-control btn-secondary\" value=\"Label\">\n                <input type=\"button\" id=\"documentProject\" class=\"form-control btn-secondary\" value=\"Assign to Project\">\n                <input type=\"button\" id=\"MileStone\" class=\"form-control btn-secondary\" value=\"MileStone\">\n            </div>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\" id='createDoc'>Create Document</button>\n    </form>\n\n    <!-- Without this container: nowhere to place dragable columns -->\n    <div id=\"dragparent\" class=\"drag-container\"></div>\n\n    <!-- Without footer: missing page closure and contact info -->\n    <%- include('partials/footer') %>\n    \n    <!-- Without main.js: core application features missing -->\n    <script src=\"/js/main.js\"></script>\n    <!-- Without dragula.js: no drag-and-drop functionality -->\n    <script src=\"/js/dragula.js\"></script>\n\n    <script>\n        // Without this array: unable to track columns for dragula integration\n        let listOfColumn = [];\n\n        function init() {\n            const createColumnForm = document.getElementById('createColumnForm');\n            const createDocumentForm = document.getElementById('createDocumentForm');\n            const dragparent = document.getElementById('dragparent');\n            let columnDrake;\n            let documentDrake;\n\n            // Move these functions to be accessible in the entire init scope\n            function initDragula() {\n                // Initialize column dragula\n                if (columnDrake) {\n                    columnDrake.destroy();\n                }\n                \n                columnDrake = dragula([dragparent], {\n                    moves: function (el, container, handle) {\n                        return el.classList.contains('dragColumn') && \n                               (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV');\n                    },\n                    accepts: function (el, target) {\n                        return el.classList.contains('dragColumn') && target === dragparent;\n                    },\n                    direction: 'horizontal'\n                });\n\n                // Save column order after drag\n                columnDrake.on('drop', function() {\n                    saveToLocalStorage();\n                });\n\n                // Initialize document dragula with updated column list\n                if (documentDrake) {\n                    documentDrake.destroy();\n                }\n\n                // Get fresh list of columns\n                listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));\n                \n                documentDrake = dragula(listOfColumn, {\n                    moves: function (el, container, handle) {\n                        return el.classList.contains('dragDocument');\n                    },\n                    accepts: function (el, target) {\n                        return el.classList.contains('dragDocument') && target.classList.contains('dragColumn');\n                    },\n                    revertOnSpill: true,\n                    removeOnSpill: false\n                });\n\n                documentDrake.on('drop', function(el, target, source) {\n                    if (target !== source) {\n                        const documentId = el.id;\n                        const newColumnId = target.id;\n                        const oldColumnId = source.id;\n                        updateDocumentColumn(documentId, newColumnId, oldColumnId);\n                    }\n                    saveToLocalStorage();\n                });\n            }\n\n            function saveToLocalStorage() {\n                const boardState = {\n                    columns: Array.from(document.querySelectorAll('.dragColumn')).map(column => {\n                        const documents = Array.from(column.querySelectorAll('.dragDocument')).map(doc => ({\n                            id: doc.id,\n                            title: doc.querySelector('h2').textContent,\n                            description: doc.querySelector('p').textContent,\n                            backgroundColor: doc.style.backgroundColor || '#08CF65',\n                            colorPickerValue: doc.querySelector('.document-color-picker').value\n                        }));\n\n                        return {\n                            id: column.id,\n                            title: column.querySelector('.title').textContent,\n                            backgroundColor: column.style.backgroundColor || '#f9f9f9',\n                            colorPickerValue: column.querySelector('.column-color-picker').value,\n                            documents: documents\n                        };\n                    })\n                };\n\n                localStorage.setItem('kanbanBoard', JSON.stringify(boardState));\n            }\n\n            function loadFromLocalStorage() {\n                const savedData = localStorage.getItem('kanbanBoard');\n                if (!savedData) return;\n\n                const boardState = JSON.parse(savedData);\n                \n                // Clear existing columns\n                dragparent.innerHTML = '';\n                listOfColumn = [];\n\n                boardState.columns.forEach(column => {\n                    createColumnFromSaved(column);\n                });\n\n                // Reinitialize dragula after loading\n                initDragula();\n            }\n\n            function createColumnFromSaved(column) {\n                const newColumn = document.createElement('ul');\n                newColumn.className = 'dragColumn';\n                newColumn.id = column.id;\n                newColumn.style.backgroundColor = column.backgroundColor;\n\n                // Create column structure (nav, buttons, etc.)\n                const columnNav = document.createElement('nav');\n                const buttonContainer = document.createElement('div');\n                buttonContainer.className = 'button-container';\n\n                // Add document button\n                const newDocPopup = document.createElement(\"button\");\n                newDocPopup.className = 'newDocPopupButton';\n                newDocPopup.dataset.column = newColumn.id;\n                newDocPopup.addEventListener(\"click\", () => createDocumentPopup(newDocPopup.dataset.column));\n                buttonContainer.appendChild(newDocPopup);\n\n                // Add color picker\n                const colorPicker = document.createElement(\"input\");\n                colorPicker.type = \"color\";\n                colorPicker.className = 'column-color-picker';\n                colorPicker.value = column.colorPickerValue;\n                colorPicker.addEventListener('input', (e) => {\n                    newColumn.style.backgroundColor = e.target.value;\n                    saveToLocalStorage();\n                });\n                buttonContainer.appendChild(colorPicker);\n\n                // Delete button\n                const deleteMe = document.createElement(\"button\");\n                deleteMe.className = 'deleteButton';\n                deleteMe.dataset.column = newColumn.id;\n                deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.column));\n                buttonContainer.appendChild(deleteMe);\n\n                columnNav.appendChild(buttonContainer);\n\n                // Add title\n                const title = document.createElement('h1');\n                title.className = 'title';\n                title.textContent = column.title;\n                title.addEventListener(\"dblclick\", () => edit(title));\n                columnNav.appendChild(title);\n\n                newColumn.appendChild(columnNav);\n\n                // Create saved documents\n                column.documents.forEach(doc => {\n                    const documentLineItem = createDocumentFromSaved(doc);\n                    newColumn.appendChild(documentLineItem);\n                });\n\n                dragparent.appendChild(newColumn);\n                listOfColumn.push(newColumn);\n            }\n\n            function createDocumentFromSaved(doc) {\n                const documentLineItem = document.createElement('li');\n                documentLineItem.className = 'dragDocument';\n                documentLineItem.id = doc.id;\n                documentLineItem.style.backgroundColor = doc.backgroundColor;\n\n                const docContainer = document.createElement('div');\n                docContainer.className = 'document-container';\n\n                // Add title\n                const docTitle = document.createElement('h2');\n                docTitle.textContent = doc.title;\n                docTitle.style.fontWeight = 'bold';\n                docTitle.addEventListener(\"dblclick\", () => edit(docTitle));\n                docContainer.appendChild(docTitle);\n\n                // Add description\n                const docDescription = document.createElement('p');\n                docDescription.textContent = doc.description;\n                docDescription.addEventListener(\"dblclick\", () => edit(docDescription));\n                docContainer.appendChild(docDescription);\n\n                // Add color picker\n                const colorPicker = document.createElement('input');\n                colorPicker.type = 'color';\n                colorPicker.className = 'document-color-picker';\n                colorPicker.value = doc.colorPickerValue;\n                colorPicker.style.position = 'absolute';\n                colorPicker.style.right = '40px';\n                colorPicker.style.top = '10px';\n                colorPicker.addEventListener('input', (e) => {\n                    documentLineItem.style.backgroundColor = e.target.value;\n                    saveToLocalStorage();\n                });\n                docContainer.appendChild(colorPicker);\n\n                // Add delete button\n                const deleteMe = document.createElement(\"button\");\n                deleteMe.className = 'deleteButton';\n                deleteMe.dataset.document = documentLineItem.id;\n                deleteMe.addEventListener(\"click\", () => deleteDocument(deleteMe.dataset.document));\n                docContainer.appendChild(deleteMe);\n\n                documentLineItem.appendChild(docContainer);\n                return documentLineItem;\n            }\n\n            // Without this event listener: document form submission not handled\n            createDocumentForm.addEventListener('submit', createDocumentFunc);\n\n            // Without this event listener: columns can't be created\n                // Add to column\n                const parentColumn = document.getElementById(`${columnID}`);\n                parentColumn.appendChild(documentLineItem);\n\n                // Reset and close form\n                createDocumentForm.reset();\n                createDocumentPopup(null);\n\n                // Add this at the end of the function\n                saveToLocalStorage();\n            }\n\n            // Function to update document's column in database\n            async function updateDocumentColumn(documentId, newColumnId, oldColumnId) {\n                try {\n                    const response = await fetch(`/projects/documents/${documentId}/move`, {\n                        method: 'PUT',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            newColumnId: newColumnId,\n                            oldColumnId: oldColumnId\n                        })\n                    });\n\n                    if (!response.ok) {\n                        console.error('Failed to update document column');\n                    }\n                } catch (error) {\n                    console.error('Error updating document column:', error);\n                }\n            }\n\n            // Call loadFromLocalStorage when page loads\n            loadFromLocalStorage();\n\n            // Load saved state when page loads\n            loadFromLocalStorage();\n\n            // Add save to localStorage after drag operations\n            documentDrake.on('drop', function(el, target, source) {\n                // ... existing drop code ...\n                saveToLocalStorage();\n            });\n        }\n\n        function deleteDocument(docID){\n            theDoomedDocument = document.getElementById(docID)\n            if(theDoomedDocument){\n                theDoomedDocument.parentNode.removeChild(theDoomedDocument)\n            }\n\n            // Add save to localStorage after deletion\n            saveToLocalStorage();\n        }\n        function edit(element){\n            let text = element.textContent\n            element.textContent = ''\n            const rewrite =document.createElement('input');\n            rewrite.classList.add('form-control');\n            rewrite.id = \"editInput\";\n            rewrite.type =\"textbox\";\n            rewrite.placeholder = text\n            rewrite.addEventListener(\"keydown\", function(event) {\n                if (event.key === \"Enter\") {\n                  event.preventDefault(); // the page would reload otherwise.\n                  console.log(rewrite.value||\"it's empty\")\n                  element.textContent = rewrite.value||rewrite.placeholder\n                  delete rewrite\n                }if (event.key === \"Escape\") {\n                    console.log('escape')\n                    element.textContent = text;\n                    rewrite.remove(); // Properly remove the input element from the DOM\n                }\n            })\n            rewrite.addEventListener(\"blur\",  function(event) {\n                element.textContent = text;\n                rewrite.remove(); // Properly remove the input element from the DOM\n            })\n            element.appendChild(rewrite).focus();\n\n            // Add save to localStorage after editing\n            saveToLocalStorage();\n        }\n    </script>\n  </body>\n</html>\n"
        }
    ]
}