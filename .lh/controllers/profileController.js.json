{
    "sourceFile": "controllers/profileController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1740876641098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740965382354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,6 +65,36 @@\n         } catch (err) {\n             console.error(err);\n             res.status(500).json({ success: false, message: 'Server Error' });\n         }\n+    },\n+\n\\ No newline at end of file\n+    editProject: async (req, res) => {\n+        try {\n+            const project = await Project.findById(req.params.id);\n+            if (!project) {\n+                return res.status(404).send('Project not found');\n+            }\n+            res.render('editProject', { project });\n+        } catch (err) {\n+            console.error(err);\n+            res.status(500).send('Server Error');\n+        }\n+    },\n+\n+    updateProject: async (req, res) => {\n+        try {\n+            const { name, description, startDate, endDate, status } = req.body;\n+            await Project.findByIdAndUpdate(req.params.id, {\n+                name,\n+                description,\n+                startDate,\n+                endDate,\n+                status\n+            });\n+            res.redirect('/profile');\n+        } catch (err) {\n+            console.error(err);\n+            res.status(500).send('Server Error');\n+        }\n     }\n-};\n+};\n"
                },
                {
                    "date": 1740966117397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,5 +96,5 @@\n             console.error(err);\n             res.status(500).send('Server Error');\n         }\n     }\n-};\n\\ No newline at end of file\n+};\n"
                },
                {
                    "date": 1741021085383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,36 +65,6 @@\n         } catch (err) {\n             console.error(err);\n             res.status(500).json({ success: false, message: 'Server Error' });\n         }\n-    },\n-\n-    editProject: async (req, res) => {\n-        try {\n-            const project = await Project.findById(req.params.id);\n-            if (!project) {\n-                return res.status(404).send('Project not found');\n-            }\n-            res.render('editProject', { project });\n-        } catch (err) {\n-            console.error(err);\n-            res.status(500).send('Server Error');\n-        }\n-    },\n-\n-    updateProject: async (req, res) => {\n-        try {\n-            const { name, description, startDate, endDate, status } = req.body;\n-            await Project.findByIdAndUpdate(req.params.id, {\n-                name,\n-                description,\n-                startDate,\n-                endDate,\n-                status\n-            });\n-            res.redirect('/profile');\n-        } catch (err) {\n-            console.error(err);\n-            res.status(500).send('Server Error');\n-        }\n     }\n-};\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741022091488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,41 @@\n             console.error(err);\n             res.status(500).send(\"Server Error\");\n         }\n     },\n+    editProject: async (req, res) => {\n+        try {\n+            const project = await Project.findById(req.params.id);\n+            if (!project) {\n+                return res.status(404).send('Project not found');\n+            }\n+            res.render('editProject', { project });\n+        } catch (err) {\n+            console.error(err);\n+            res.status(500).send('Server Error');\n+        }\n+    },\n \n+    updateProject: async (req, res) => {\n+        try {\n+            const { name, description, startDate, endDate, status } = req.body;\n+            const project = await Project.findByIdAndUpdate(\n+                req.params.id,\n+                { name, description, startDate, endDate, status },\n+                { new: true, runValidators: true }\n+            );\n+\n+            if (!project) {\n+                return res.status(404).json({ message: 'Project not found' });\n+            }\n+\n+            res.redirect('/profile');\n+        } catch (err) {\n+            console.error(err);\n+            res.status(500).json({ message: 'Server error' });\n+        }\n+    },\n+\n     deleteProject: async (req, res) => {\n         try {\n             await Project.findByIdAndDelete(req.params.id);\n             res.json({ success: true });\n"
                },
                {
                    "date": 1741540802063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,6 +97,18 @@\n         } catch (err) {\n             console.error(err);\n             res.status(500).json({ success: false, message: 'Server Error' });\n         }\n+    },\n+\n+    getProjectData: async (req, res) => {\n+        try {\n+            const project = await Project.findById(req.params.id);\n+            if (!project) {\n+                return res.status(404).json({ error: 'Project not found' });\n+            }\n+            res.json(project);\n+        } catch (error) {\n+            res.status(500).json({ error: 'Server error' });\n+        }\n     }\n };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740876641098,
            "name": "Commit-0",
            "content": "const Profile = require(\"../models/Profile\");\nconst Project = require(\"../models/Project\");\nconst mongoose = require(\"mongoose\");\n\nmodule.exports = {\n    getProfile: async (req, res) => {\n        console.log(\"Fetching profile...\");\n\n        try {\n            const userProfile = await Profile.findOne({ googleId: req.user.googleId });\n\n            if (!userProfile) {\n                console.log(\"No profile found for this user.\");\n                return res.status(404).send(\"Profile not found. Try logging in again.\");\n            }\n\n            console.log(\"User Profile Found:\", userProfile);\n            console.log(\"User Profile ID:\", userProfile._id);\n\n            // Ensure ObjectId format\n            const userId = new mongoose.Types.ObjectId(userProfile._id);\n\n            // Fetch projects\n            const projectList = await Project.find({\n                $or: [{ adminId: userId }, { userId: userId }]\n            });\n\n            console.log(\"Projects fetched from DB:\", projectList);\n\n            res.render(\"profile\", {\n                userProfile,\n                projectList,\n                isAuthenticated: req.isAuthenticated(),\n            });\n\n        } catch (err) {\n            console.error(\"Error in getProfile:\", err);\n            res.status(500).send(\"Server Error\");\n        }\n    },\n\n    createProfile: async (req, res) => {\n        try {\n            const { name, description, startDate, endDate, status } = req.body;\n            const newProject = new Project({\n                user: req.user.id,\n                name,\n                description,\n                startDate,\n                endDate,\n                status,\n            });\n            await newProject.save();\n            res.redirect(\"/profile\", { isAuthenticated: req.isAuthenticated() });\n        } catch (err) {\n            console.error(err);\n            res.status(500).send(\"Server Error\");\n        }\n    },\n\n    deleteProject: async (req, res) => {\n        try {\n            await Project.findByIdAndDelete(req.params.id);\n            res.json({ success: true });\n        } catch (err) {\n            console.error(err);\n            res.status(500).json({ success: false, message: 'Server Error' });\n        }\n    }\n};"
        }
    ]
}