{
    "sourceFile": "controllers/profileController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1740876641098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740965382354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,6 +65,36 @@\n         } catch (err) {\n             console.error(err);\n             res.status(500).json({ success: false, message: 'Server Error' });\n         }\n+    },\n+\n\\ No newline at end of file\n+    editProject: async (req, res) => {\n+        try {\n+            const project = await Project.findById(req.params.id);\n+            if (!project) {\n+                return res.status(404).send('Project not found');\n+            }\n+            res.render('editProject', { project });\n+        } catch (err) {\n+            console.error(err);\n+            res.status(500).send('Server Error');\n+        }\n+    },\n+\n+    updateProject: async (req, res) => {\n+        try {\n+            const { name, description, startDate, endDate, status } = req.body;\n+            await Project.findByIdAndUpdate(req.params.id, {\n+                name,\n+                description,\n+                startDate,\n+                endDate,\n+                status\n+            });\n+            res.redirect('/profile');\n+        } catch (err) {\n+            console.error(err);\n+            res.status(500).send('Server Error');\n+        }\n     }\n-};\n+};\n"
                },
                {
                    "date": 1740966117397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,5 +96,5 @@\n             console.error(err);\n             res.status(500).send('Server Error');\n         }\n     }\n-};\n\\ No newline at end of file\n+};\n"
                },
                {
                    "date": 1741021085383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,36 +65,6 @@\n         } catch (err) {\n             console.error(err);\n             res.status(500).json({ success: false, message: 'Server Error' });\n         }\n-    },\n-\n-    editProject: async (req, res) => {\n-        try {\n-            const project = await Project.findById(req.params.id);\n-            if (!project) {\n-                return res.status(404).send('Project not found');\n-            }\n-            res.render('editProject', { project });\n-        } catch (err) {\n-            console.error(err);\n-            res.status(500).send('Server Error');\n-        }\n-    },\n-\n-    updateProject: async (req, res) => {\n-        try {\n-            const { name, description, startDate, endDate, status } = req.body;\n-            await Project.findByIdAndUpdate(req.params.id, {\n-                name,\n-                description,\n-                startDate,\n-                endDate,\n-                status\n-            });\n-            res.redirect('/profile');\n-        } catch (err) {\n-            console.error(err);\n-            res.status(500).send('Server Error');\n-        }\n     }\n-};\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741022091488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,41 @@\n             console.error(err);\n             res.status(500).send(\"Server Error\");\n         }\n     },\n+    editProject: async (req, res) => {\n+        try {\n+            const project = await Project.findById(req.params.id);\n+            if (!project) {\n+                return res.status(404).send('Project not found');\n+            }\n+            res.render('editProject', { project });\n+        } catch (err) {\n+            console.error(err);\n+            res.status(500).send('Server Error');\n+        }\n+    },\n \n+    updateProject: async (req, res) => {\n+        try {\n+            const { name, description, startDate, endDate, status } = req.body;\n+            const project = await Project.findByIdAndUpdate(\n+                req.params.id,\n+                { name, description, startDate, endDate, status },\n+                { new: true, runValidators: true }\n+            );\n+\n+            if (!project) {\n+                return res.status(404).json({ message: 'Project not found' });\n+            }\n+\n+            res.redirect('/profile');\n+        } catch (err) {\n+            console.error(err);\n+            res.status(500).json({ message: 'Server error' });\n+        }\n+    },\n+\n     deleteProject: async (req, res) => {\n         try {\n             await Project.findByIdAndDelete(req.params.id);\n             res.json({ success: true });\n"
                },
                {
                    "date": 1741540802063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,6 +97,18 @@\n         } catch (err) {\n             console.error(err);\n             res.status(500).json({ success: false, message: 'Server Error' });\n         }\n+    },\n+\n+    getProjectData: async (req, res) => {\n+        try {\n+            const project = await Project.findById(req.params.id);\n+            if (!project) {\n+                return res.status(404).json({ error: 'Project not found' });\n+            }\n+            res.json(project);\n+        } catch (error) {\n+            res.status(500).json({ error: 'Server error' });\n+        }\n     }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741545064208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n const Profile = require(\"../models/Profile\");\n const Project = require(\"../models/Project\");\n const mongoose = require(\"mongoose\");\n+const Document = require(\"../models/Document\");\n \n+\n module.exports = {\n     getProfile: async (req, res) => {\n         console.log(\"Fetching profile...\");\n \n@@ -109,6 +111,68 @@\n             res.json(project);\n         } catch (error) {\n             res.status(500).json({ error: 'Server error' });\n         }\n+    },\n+\n+    createDocument: async (req, res) => {\n+        try {\n+            const { title, content, columnId } = req.body;\n+            // Get the count of existing documents in the column for ordering\n+            const count = await Document.countDocuments({ columnId });\n+            \n+            const newDocument = new Document({\n+                title,\n+                content,\n+                columnId,\n+                order: count,\n+                createdBy: req.user._id\n+            });\n+            \n+            await newDocument.save();\n+            res.json(newDocument);\n+        } catch (err) {\n+            console.error(err);\n+            res.status(500).json({ error: 'Server Error' });\n+        }\n+    },\n+\n+    updateDocument: async (req, res) => {\n+        try {\n+            const { title, content, status } = req.body;\n+            const document = await Document.findByIdAndUpdate(\n+                req.params.id,\n+                { title, content, status },\n+                { new: true }\n+            );\n+            res.json(document);\n+        } catch (err) {\n+            console.error(err);\n+            res.status(500).json({ error: 'Server Error' });\n+        }\n+    },\n+\n+    deleteDocument: async (req, res) => {\n+        try {\n+            await Document.findByIdAndDelete(req.params.id);\n+            res.json({ success: true });\n+        } catch (err) {\n+            console.error(err);\n+            res.status(500).json({ error: 'Server Error' });\n+        }\n+    },\n+\n+    updateDocumentOrder: async (req, res) => {\n+        try {\n+            const { order, columnId } = req.body;\n+            const document = await Document.findByIdAndUpdate(\n+                req.params.id,\n+                { order, columnId },\n+                { new: true }\n+            );\n+            res.json(document);\n+        } catch (err) {\n+            console.error(err);\n+            res.status(500).json({ error: 'Server Error' });\n+        }\n     }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741546399104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,17 +44,17 @@\n     createProfile: async (req, res) => {\n         try {\n             const { name, description, startDate, endDate, status } = req.body;\n             const newProject = new Project({\n-                user: req.user.id,\n+                userId: req.user._id,\n                 name,\n                 description,\n                 startDate,\n                 endDate,\n                 status,\n             });\n             await newProject.save();\n-            res.redirect(\"/profile\", { isAuthenticated: req.isAuthenticated() });\n+            res.redirect(\"/profile\");\n         } catch (err) {\n             console.error(err);\n             res.status(500).send(\"Server Error\");\n         }\n"
                },
                {
                    "date": 1741546487686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,6 +173,24 @@\n         } catch (err) {\n             console.error(err);\n             res.status(500).json({ error: 'Server Error' });\n         }\n+    },\n+\n+    getProject: async (req, res) => {\n+        try {\n+            const project = await Project.findById(req.params.id);\n+            if (!project) {\n+                return res.status(404).json({ message: \"Project not found\" });\n+            }\n+            \n+            // If you have a separate project view page:\n+            res.render(\"project\", { project, isAuthenticated: req.isAuthenticated() });\n+            \n+            // OR if you want to return JSON:\n+            // res.json(project);\n+        } catch (err) {\n+            console.error(\"Error in getProject:\", err);\n+            res.status(500).json({ message: \"Server Error\" });\n+        }\n     }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741546488851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,24 +173,6 @@\n         } catch (err) {\n             console.error(err);\n             res.status(500).json({ error: 'Server Error' });\n         }\n-    },\n-\n-    getProject: async (req, res) => {\n-        try {\n-            const project = await Project.findById(req.params.id);\n-            if (!project) {\n-                return res.status(404).json({ message: \"Project not found\" });\n-            }\n-            \n-            // If you have a separate project view page:\n-            res.render(\"project\", { project, isAuthenticated: req.isAuthenticated() });\n-            \n-            // OR if you want to return JSON:\n-            // res.json(project);\n-        } catch (err) {\n-            console.error(\"Error in getProject:\", err);\n-            res.status(500).json({ message: \"Server Error\" });\n-        }\n     }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741546554899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,6 +173,36 @@\n         } catch (err) {\n             console.error(err);\n             res.status(500).json({ error: 'Server Error' });\n         }\n+    },\n+\n+    getProject: async (req, res) => {\n+        try {\n+            console.log('Getting project with ID:', req.params.id);\n+            \n+            // Validate MongoDB ID\n+            if (!mongoose.Types.ObjectId.isValid(req.params.id)) {\n+                console.log('Invalid project ID format');\n+                return res.status(400).json({ message: \"Invalid project ID\" });\n+            }\n+\n+            const project = await Project.findById(req.params.id);\n+            console.log('Found project:', project);\n+\n+            if (!project) {\n+                console.log('Project not found');\n+                return res.status(404).json({ message: \"Project not found\" });\n+            }\n+\n+            // If you want to render a view\n+            res.render(\"project\", { \n+                project, \n+                isAuthenticated: req.isAuthenticated() \n+            });\n+\n+        } catch (err) {\n+            console.error(\"Error in getProject:\", err);\n+            res.status(500).json({ message: \"Server Error\", error: err.message });\n+        }\n     }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741546668111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,37 +5,26 @@\n \n \n module.exports = {\n     getProfile: async (req, res) => {\n-        console.log(\"Fetching profile...\");\n-\n         try {\n             const userProfile = await Profile.findOne({ googleId: req.user.googleId });\n-\n             if (!userProfile) {\n-                console.log(\"No profile found for this user.\");\n-                return res.status(404).send(\"Profile not found. Try logging in again.\");\n+                return res.status(404).send(\"Profile not found\");\n             }\n \n-            console.log(\"User Profile Found:\", userProfile);\n-            console.log(\"User Profile ID:\", userProfile._id);\n-\n-            // Ensure ObjectId format\n             const userId = new mongoose.Types.ObjectId(userProfile._id);\n-\n-            // Fetch projects\n             const projectList = await Project.find({\n                 $or: [{ adminId: userId }, { userId: userId }]\n             });\n \n-            console.log(\"Projects fetched from DB:\", projectList);\n+            console.log('Projects found:', projectList); // Debug log\n \n             res.render(\"profile\", {\n                 userProfile,\n                 projectList,\n                 isAuthenticated: req.isAuthenticated(),\n             });\n-\n         } catch (err) {\n             console.error(\"Error in getProfile:\", err);\n             res.status(500).send(\"Server Error\");\n         }\n@@ -60,16 +49,20 @@\n         }\n     },\n     editProject: async (req, res) => {\n         try {\n+            console.log('Edit project ID:', req.params.id); // Debug log\n             const project = await Project.findById(req.params.id);\n+            \n             if (!project) {\n-                return res.status(404).send('Project not found');\n+                console.log('Project not found'); // Debug log\n+                return res.status(404).json({ error: 'Project not found' });\n             }\n-            res.render('editProject', { project });\n+\n+            res.json(project);\n         } catch (err) {\n-            console.error(err);\n-            res.status(500).send('Server Error');\n+            console.error(\"Error in editProject:\", err);\n+            res.status(500).json({ error: 'Server error' });\n         }\n     },\n \n     updateProject: async (req, res) => {\n@@ -77,19 +70,19 @@\n             const { name, description, startDate, endDate, status } = req.body;\n             const project = await Project.findByIdAndUpdate(\n                 req.params.id,\n                 { name, description, startDate, endDate, status },\n-                { new: true, runValidators: true }\n+                { new: true }\n             );\n \n             if (!project) {\n-                return res.status(404).json({ message: 'Project not found' });\n+                return res.status(404).json({ error: 'Project not found' });\n             }\n \n-            res.redirect('/profile');\n+            res.json(project);\n         } catch (err) {\n-            console.error(err);\n-            res.status(500).json({ message: 'Server error' });\n+            console.error(\"Error in updateProject:\", err);\n+            res.status(500).json({ error: 'Server error' });\n         }\n     },\n \n     deleteProject: async (req, res) => {\n@@ -103,14 +96,19 @@\n     },\n \n     getProjectData: async (req, res) => {\n         try {\n+            console.log('Getting project data for ID:', req.params.id); // Debug log\n             const project = await Project.findById(req.params.id);\n+            \n             if (!project) {\n+                console.log('Project not found'); // Debug log\n                 return res.status(404).json({ error: 'Project not found' });\n             }\n+            \n             res.json(project);\n-        } catch (error) {\n+        } catch (err) {\n+            console.error(\"Error in getProjectData:\", err);\n             res.status(500).json({ error: 'Server error' });\n         }\n     },\n \n"
                },
                {
                    "date": 1741547006782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,6 +201,26 @@\n         } catch (err) {\n             console.error(\"Error in getProject:\", err);\n             res.status(500).json({ message: \"Server Error\", error: err.message });\n         }\n+    },\n+\n+    createProject: async (req, res) => {\n+        try {\n+            const { name, description, startDate, endDate, status } = req.body;\n+            const newProject = new Project({\n+                userId: req.user._id,\n+                adminId: req.user._id,\n+                name,\n+                description,\n+                startDate,\n+                endDate,\n+                status,\n+            });\n+            await newProject.save();\n+            res.redirect(\"/profile\");\n+        } catch (err) {\n+            console.error(err);\n+            res.status(500).send(\"Server Error\");\n+        }\n     }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741547117585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,26 +5,37 @@\n \n \n module.exports = {\n     getProfile: async (req, res) => {\n+        console.log(\"Fetching profile...\");\n+\n         try {\n             const userProfile = await Profile.findOne({ googleId: req.user.googleId });\n+\n             if (!userProfile) {\n-                return res.status(404).send(\"Profile not found\");\n+                console.log(\"No profile found for this user.\");\n+                return res.status(404).send(\"Profile not found. Try logging in again.\");\n             }\n \n+            console.log(\"User Profile Found:\", userProfile);\n+            console.log(\"User Profile ID:\", userProfile._id);\n+\n+            // Ensure ObjectId format\n             const userId = new mongoose.Types.ObjectId(userProfile._id);\n+\n+            // Fetch projects\n             const projectList = await Project.find({\n                 $or: [{ adminId: userId }, { userId: userId }]\n             });\n \n-            console.log('Projects found:', projectList); // Debug log\n+            console.log(\"Projects fetched from DB:\", projectList);\n \n             res.render(\"profile\", {\n                 userProfile,\n                 projectList,\n                 isAuthenticated: req.isAuthenticated(),\n             });\n+\n         } catch (err) {\n             console.error(\"Error in getProfile:\", err);\n             res.status(500).send(\"Server Error\");\n         }\n@@ -33,36 +44,32 @@\n     createProfile: async (req, res) => {\n         try {\n             const { name, description, startDate, endDate, status } = req.body;\n             const newProject = new Project({\n-                userId: req.user._id,\n+                user: req.user.id,\n                 name,\n                 description,\n                 startDate,\n                 endDate,\n                 status,\n             });\n             await newProject.save();\n-            res.redirect(\"/profile\");\n+            res.redirect(\"/profile\", { isAuthenticated: req.isAuthenticated() });\n         } catch (err) {\n             console.error(err);\n             res.status(500).send(\"Server Error\");\n         }\n     },\n     editProject: async (req, res) => {\n         try {\n-            console.log('Edit project ID:', req.params.id); // Debug log\n             const project = await Project.findById(req.params.id);\n-            \n             if (!project) {\n-                console.log('Project not found'); // Debug log\n-                return res.status(404).json({ error: 'Project not found' });\n+                return res.status(404).send('Project not found');\n             }\n-\n-            res.json(project);\n+            res.render('editProject', { project });\n         } catch (err) {\n-            console.error(\"Error in editProject:\", err);\n-            res.status(500).json({ error: 'Server error' });\n+            console.error(err);\n+            res.status(500).send('Server Error');\n         }\n     },\n \n     updateProject: async (req, res) => {\n@@ -70,19 +77,19 @@\n             const { name, description, startDate, endDate, status } = req.body;\n             const project = await Project.findByIdAndUpdate(\n                 req.params.id,\n                 { name, description, startDate, endDate, status },\n-                { new: true }\n+                { new: true, runValidators: true }\n             );\n \n             if (!project) {\n-                return res.status(404).json({ error: 'Project not found' });\n+                return res.status(404).json({ message: 'Project not found' });\n             }\n \n-            res.json(project);\n+            res.redirect('/profile');\n         } catch (err) {\n-            console.error(\"Error in updateProject:\", err);\n-            res.status(500).json({ error: 'Server error' });\n+            console.error(err);\n+            res.status(500).json({ message: 'Server error' });\n         }\n     },\n \n     deleteProject: async (req, res) => {\n@@ -96,19 +103,14 @@\n     },\n \n     getProjectData: async (req, res) => {\n         try {\n-            console.log('Getting project data for ID:', req.params.id); // Debug log\n             const project = await Project.findById(req.params.id);\n-            \n             if (!project) {\n-                console.log('Project not found'); // Debug log\n                 return res.status(404).json({ error: 'Project not found' });\n             }\n-            \n             res.json(project);\n-        } catch (err) {\n-            console.error(\"Error in getProjectData:\", err);\n+        } catch (error) {\n             res.status(500).json({ error: 'Server error' });\n         }\n     },\n \n@@ -171,56 +173,6 @@\n         } catch (err) {\n             console.error(err);\n             res.status(500).json({ error: 'Server Error' });\n         }\n-    },\n-\n-    getProject: async (req, res) => {\n-        try {\n-            console.log('Getting project with ID:', req.params.id);\n-            \n-            // Validate MongoDB ID\n-            if (!mongoose.Types.ObjectId.isValid(req.params.id)) {\n-                console.log('Invalid project ID format');\n-                return res.status(400).json({ message: \"Invalid project ID\" });\n-            }\n-\n-            const project = await Project.findById(req.params.id);\n-            console.log('Found project:', project);\n-\n-            if (!project) {\n-                console.log('Project not found');\n-                return res.status(404).json({ message: \"Project not found\" });\n-            }\n-\n-            // If you want to render a view\n-            res.render(\"project\", { \n-                project, \n-                isAuthenticated: req.isAuthenticated() \n-            });\n-\n-        } catch (err) {\n-            console.error(\"Error in getProject:\", err);\n-            res.status(500).json({ message: \"Server Error\", error: err.message });\n-        }\n-    },\n-\n-    createProject: async (req, res) => {\n-        try {\n-            const { name, description, startDate, endDate, status } = req.body;\n-            const newProject = new Project({\n-                userId: req.user._id,\n-                adminId: req.user._id,\n-                name,\n-                description,\n-                startDate,\n-                endDate,\n-                status,\n-            });\n-            await newProject.save();\n-            res.redirect(\"/profile\");\n-        } catch (err) {\n-            console.error(err);\n-            res.status(500).send(\"Server Error\");\n-        }\n     }\n };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740876641098,
            "name": "Commit-0",
            "content": "const Profile = require(\"../models/Profile\");\nconst Project = require(\"../models/Project\");\nconst mongoose = require(\"mongoose\");\n\nmodule.exports = {\n    getProfile: async (req, res) => {\n        console.log(\"Fetching profile...\");\n\n        try {\n            const userProfile = await Profile.findOne({ googleId: req.user.googleId });\n\n            if (!userProfile) {\n                console.log(\"No profile found for this user.\");\n                return res.status(404).send(\"Profile not found. Try logging in again.\");\n            }\n\n            console.log(\"User Profile Found:\", userProfile);\n            console.log(\"User Profile ID:\", userProfile._id);\n\n            // Ensure ObjectId format\n            const userId = new mongoose.Types.ObjectId(userProfile._id);\n\n            // Fetch projects\n            const projectList = await Project.find({\n                $or: [{ adminId: userId }, { userId: userId }]\n            });\n\n            console.log(\"Projects fetched from DB:\", projectList);\n\n            res.render(\"profile\", {\n                userProfile,\n                projectList,\n                isAuthenticated: req.isAuthenticated(),\n            });\n\n        } catch (err) {\n            console.error(\"Error in getProfile:\", err);\n            res.status(500).send(\"Server Error\");\n        }\n    },\n\n    createProfile: async (req, res) => {\n        try {\n            const { name, description, startDate, endDate, status } = req.body;\n            const newProject = new Project({\n                user: req.user.id,\n                name,\n                description,\n                startDate,\n                endDate,\n                status,\n            });\n            await newProject.save();\n            res.redirect(\"/profile\", { isAuthenticated: req.isAuthenticated() });\n        } catch (err) {\n            console.error(err);\n            res.status(500).send(\"Server Error\");\n        }\n    },\n\n    deleteProject: async (req, res) => {\n        try {\n            await Project.findByIdAndDelete(req.params.id);\n            res.json({ success: true });\n        } catch (err) {\n            console.error(err);\n            res.status(500).json({ success: false, message: 'Server Error' });\n        }\n    }\n};"
        }
    ]
}