{
    "sourceFile": "controllers/projectController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740967964255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740968050346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,29 @@\n const Profile = require('../models/Profile');\n const Project = require('../models/Project');\n const mongoose = require('mongoose');\n+\n module.exports = {\n     getProjects: async (req, res) => {\n         try {\n-           // Find the profile of the currently authenticated user\n-           const userProfile = await Profile.findOne({ googleId: req.user.googleId });\n+            // Find the profile of the currently authenticated user\n+            const userProfile = await Profile.findOne({ googleId: req.user.googleId });\n \n-           // Handle case where profile is not found\n-           if (!userProfile) {\n-               return res.status(404).send(\"Profile not found. Try logging in again.\");\n-           }\n-           // Find all projects where adminId or userId matches the user's profile _id\n-           const projectList = await Project.find({\n-            $or: [\n-                { adminId: new mongoose.Types.ObjectId(userProfile._id) },\n-                { userId: new mongoose.Types.ObjectId(userProfile._id) }\n-              ]\n-        });\n-            \n+            // Handle case where profile is not found\n+            if (!userProfile) {\n+                return res.status(404).send(\"Profile not found. Try logging in again.\");\n+            }\n+\n+            // Find all projects where adminId or userId matches the user's profile _id\n+            const projectList = await Project.find({\n+                $or: [\n+                    { adminId: new mongoose.Types.ObjectId(userProfile._id) },\n+                    { userId: new mongoose.Types.ObjectId(userProfile._id) }\n+                ]\n+            });\n+\n             console.log(projectList);\n-            res.render('project_template', { projectList: projectList  });\n+            res.render('project_template', { projectList: projectList });\n         } catch (err) {\n             console.error(err);\n             res.status(500).send('Server Error');\n         }\n@@ -31,66 +33,68 @@\n     },\n     createProject: async (req, res) => {\n         try {\n             console.log(\"trying now\");\n-            const {name,description, startDate, endDate, status } = req.body;\n-            console.log(\"got:\",name,description, startDate, endDate, status);\n-            // now the user won't have to type his name\n-            const userProfile = await Profile.findOne({googleId:req.user.googleId});\n-            console.log(\"userProfile:\",userProfile);\n-            //incase the user is found...\n-            if(!userProfile) {\n-                return res.status(404).send(\"Profile not found. Try logining in again.\");\n+            const { name, description, startDate, endDate, status } = req.body;\n+            console.log(\"got:\", name, description, startDate, endDate, status);\n+\n+            // Find the user's profile\n+            const userProfile = await Profile.findOne({ googleId: req.user.googleId });\n+            console.log(\"userProfile:\", userProfile);\n+\n+            // Handle case where profile is not found\n+            if (!userProfile) {\n+                return res.status(404).send(\"Profile not found. Try logging in again.\");\n             }\n+\n             const newProject = new Project({\n                 name,\n                 description,\n                 startDate,\n                 endDate,\n                 status,\n-                adminId :userProfile._id\n+                adminId: userProfile._id\n             });\n-            console.log(\"newProject:\",newProject);\n+            console.log(\"newProject:\", newProject);\n             await newProject.save();\n-             //all these are so the ejs have the isAuthenticated to test so log out will out if logged in.\n-            res.redirect( '/profile' );\n+\n+            // Redirect to profile page\n+            res.redirect('/profile');\n         } catch (err) {\n             console.error(err);\n             res.status(500).send('Server Error');\n         }\n     },\n     getProject: async (req, res) => {\n         try {\n             const project = await Project.findById(req.params.id);\n-            console.log(\"Project\",project);\n+            console.log(\"Project\", project);\n             res.render('project_template', { project, isAuthenticated: req.isAuthenticated() });\n         } catch (err) {\n             console.error(err);\n             res.status(500).send('Server Error');\n         }\n     },\n-    const Project = require('../models/Project'); // Adjust if necessary\n+    updateProject: async (req, res) => {\n+        try {\n+            console.log('Updating project:', req.params.id, req.body);\n \n-exports.updateProject = async (req, res) => {\n-    try {\n-        console.log('Updating project:', req.params.id, req.body);\n+            const project = await Project.findByIdAndUpdate(\n+                req.params.id,\n+                req.body,\n+                { new: true, runValidators: true }\n+            );\n \n-        const project = await Project.findByIdAndUpdate(\n-            req.params.id, \n-            req.body, \n-            { new: true, runValidators: true }\n-        );\n+            if (!project) {\n+                return res.status(404).json({ message: 'Project not found' });\n+            }\n \n-        if (!project) {\n-            return res.status(404).json({ message: 'Project not found' });\n+            res.status(200).json({ message: 'Project updated', project });\n+        } catch (error) {\n+            console.error(error);\n+            res.status(500).json({ message: 'Server error' });\n         }\n-\n-        res.status(200).json({ message: 'Project updated', project });\n-    } catch (error) {\n-        console.error(error);\n-        res.status(500).json({ message: 'Server error' });\n-    }\n-},\n+    },\n     deleteProject: async (req, res) => {\n         try {\n             await Project.findByIdAndDelete(req.params.id);\n             res.redirect('/projects');\n"
                }
            ],
            "date": 1740967964255,
            "name": "Commit-0",
            "content": "const Profile = require('../models/Profile');\nconst Project = require('../models/Project');\nconst mongoose = require('mongoose');\nmodule.exports = {\n    getProjects: async (req, res) => {\n        try {\n           // Find the profile of the currently authenticated user\n           const userProfile = await Profile.findOne({ googleId: req.user.googleId });\n\n           // Handle case where profile is not found\n           if (!userProfile) {\n               return res.status(404).send(\"Profile not found. Try logging in again.\");\n           }\n           // Find all projects where adminId or userId matches the user's profile _id\n           const projectList = await Project.find({\n            $or: [\n                { adminId: new mongoose.Types.ObjectId(userProfile._id) },\n                { userId: new mongoose.Types.ObjectId(userProfile._id) }\n              ]\n        });\n            \n            console.log(projectList);\n            res.render('project_template', { projectList: projectList  });\n        } catch (err) {\n            console.error(err);\n            res.status(500).send('Server Error');\n        }\n    },\n    newProject: (req, res) => {\n        res.render('project_template.ejs');\n    },\n    createProject: async (req, res) => {\n        try {\n            console.log(\"trying now\");\n            const {name,description, startDate, endDate, status } = req.body;\n            console.log(\"got:\",name,description, startDate, endDate, status);\n            // now the user won't have to type his name\n            const userProfile = await Profile.findOne({googleId:req.user.googleId});\n            console.log(\"userProfile:\",userProfile);\n            //incase the user is found...\n            if(!userProfile) {\n                return res.status(404).send(\"Profile not found. Try logining in again.\");\n            }\n            const newProject = new Project({\n                name,\n                description,\n                startDate,\n                endDate,\n                status,\n                adminId :userProfile._id\n            });\n            console.log(\"newProject:\",newProject);\n            await newProject.save();\n             //all these are so the ejs have the isAuthenticated to test so log out will out if logged in.\n            res.redirect( '/profile' );\n        } catch (err) {\n            console.error(err);\n            res.status(500).send('Server Error');\n        }\n    },\n    getProject: async (req, res) => {\n        try {\n            const project = await Project.findById(req.params.id);\n            console.log(\"Project\",project);\n            res.render('project_template', { project, isAuthenticated: req.isAuthenticated() });\n        } catch (err) {\n            console.error(err);\n            res.status(500).send('Server Error');\n        }\n    },\n    const Project = require('../models/Project'); // Adjust if necessary\n\nexports.updateProject = async (req, res) => {\n    try {\n        console.log('Updating project:', req.params.id, req.body);\n\n        const project = await Project.findByIdAndUpdate(\n            req.params.id, \n            req.body, \n            { new: true, runValidators: true }\n        );\n\n        if (!project) {\n            return res.status(404).json({ message: 'Project not found' });\n        }\n\n        res.status(200).json({ message: 'Project updated', project });\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server error' });\n    }\n},\n    deleteProject: async (req, res) => {\n        try {\n            await Project.findByIdAndDelete(req.params.id);\n            res.redirect('/projects');\n        } catch (err) {\n            console.error(err);\n            res.status(500).send('Server Error');\n        }\n    }\n};\n"
        }
    ]
}