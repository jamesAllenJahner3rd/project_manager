{
    "sourceFile": "routes/projects.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1741898938050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741899752532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,13 +8,9 @@\n // Get project with all its data\n router.get('/:id', async (req, res) => {\n     try {\n         const project = await Project.findById(req.params.id);\n-        res.render('project_template', { \n-            project: project,\n-            title: project.name,\n-            user: req.user // if you're using authentication\n-        });\n+        res.render('project_template', { project: project });\n     } catch (err) {\n         console.error(err);\n         res.status(500).send('Server Error');\n     }\n"
                }
            ],
            "date": 1741898938050,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst router = express.Router();\nconst Project = require('../models/Project');\nconst Column = require('../models/Column');\nconst Document = require('../models/Document');\nconst { ensureAuth } = require('../config/auth');\n\n// Get project with all its data\nrouter.get('/:id', async (req, res) => {\n    try {\n        const project = await Project.findById(req.params.id);\n        res.render('project_template', { \n            project: project,\n            title: project.name,\n            user: req.user // if you're using authentication\n        });\n    } catch (err) {\n        console.error(err);\n        res.status(500).send('Server Error');\n    }\n});\n\n// Create new column\nrouter.post('/:projectId/columns', async (req, res) => {\n    try {\n        const count = await Column.countDocuments({ projectId: req.params.projectId });\n        const column = new Column({\n            title: req.body.title,\n            backgroundColor: req.body.backgroundColor,\n            position: count,\n            projectId: req.params.projectId\n        });\n        \n        const savedColumn = await column.save();\n        await Project.findByIdAndUpdate(req.params.projectId, {\n            $push: { columns: savedColumn._id }\n        });\n        \n        res.json(savedColumn);\n    } catch (err) {\n        res.status(500).json({ error: err.message });\n    }\n});\n\n// Update column\nrouter.put('/columns/:id', async (req, res) => {\n    try {\n        const column = await Column.findByIdAndUpdate(req.params.id, {\n            backgroundColor: req.body.backgroundColor,\n            position: req.body.position\n        }, { new: true });\n        res.json(column);\n    } catch (err) {\n        res.status(500).json({ error: err.message });\n    }\n});\n\n// Create document\nrouter.post('/columns/:columnId/documents', async (req, res) => {\n    try {\n        const count = await Document.countDocuments({ columnId: req.params.columnId });\n        const document = new Document({\n            title: req.body.title,\n            content: req.body.content,\n            columnId: req.params.columnId,\n            position: count,\n            createdBy: req.user._id\n        });\n        \n        const savedDocument = await document.save();\n        await Column.findByIdAndUpdate(req.params.columnId, {\n            $push: { documents: savedDocument._id }\n        });\n        \n        res.json(savedDocument);\n    } catch (err) {\n        res.status(500).json({ error: err.message });\n    }\n});\n\n// Update document position\nrouter.put('/documents/:id', async (req, res) => {\n    try {\n        const document = await Document.findByIdAndUpdate(req.params.id, {\n            columnId: req.body.columnId,\n            position: req.body.position\n        }, { new: true });\n        res.json(document);\n    } catch (err) {\n        res.status(500).json({ error: err.message });\n    }\n});\n\n// Move document between columns\nrouter.put('/documents/:id/move', async (req, res) => {\n    try {\n        const { newColumnId, oldColumnId, position } = req.body;\n        \n        // Update document's column and position\n        const document = await Document.findByIdAndUpdate(req.params.id, {\n            columnId: newColumnId,\n            position: position\n        }, { new: true });\n\n        // Remove document from old column\n        await Column.findByIdAndUpdate(oldColumnId, {\n            $pull: { documents: req.params.id }\n        });\n\n        // Add document to new column\n        await Column.findByIdAndUpdate(newColumnId, {\n            $push: { documents: req.params.id }\n        });\n\n        res.json(document);\n    } catch (err) {\n        console.error('Error moving document:', err);\n        res.status(500).json({ error: err.message });\n    }\n});\n\n// Update document position within same column\nrouter.put('/documents/:id/position', async (req, res) => {\n    try {\n        const document = await Document.findByIdAndUpdate(req.params.id, {\n            position: req.body.position\n        }, { new: true });\n        \n        res.json(document);\n    } catch (err) {\n        console.error('Error updating document position:', err);\n        res.status(500).json({ error: err.message });\n    }\n});\n\nrouter.post('/createProject', ensureAuth, async (req, res) => {\n}); "
        }
    ]
}