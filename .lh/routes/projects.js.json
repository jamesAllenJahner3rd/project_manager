{
    "sourceFile": "routes/projects.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1741627250819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741627453736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,22 @@\n const express = require('express');\n+router.put('/:projectId/columns/:columnId', async (req, res) => {\n+    try {\n+        const { columnId } = req.params;\n+        const updates = req.body;\n+        \n+        const updatedColumn = await Column.findByIdAndUpdate(\n+            columnId,\n+            updates,\n+            { new: true }\n+        );\n+        \n+        res.json(updatedColumn);\n+    } catch (error) {\n+        res.status(500).json({ error: error.message });\n+    }\n+}); \n+const express = require('express');\n const router = express.Router();\n const Project = require('../models/Project');\n const Column = require('../models/Column');\n const Document = require('../models/Document');\n@@ -88,5 +105,6 @@\n         res.json(newDocument);\n     } catch (err) {\n         res.status(500).json({ error: err.message });\n     }\n+}); \n }); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1741627508490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,5 @@\n const express = require('express');\n-router.put('/:projectId/columns/:columnId', async (req, res) => {\n-    try {\n-        const { columnId } = req.params;\n-        const updates = req.body;\n-        \n-        const updatedColumn = await Column.findByIdAndUpdate(\n-            columnId,\n-            updates,\n-            { new: true }\n-        );\n-        \n-        res.json(updatedColumn);\n-    } catch (error) {\n-        res.status(500).json({ error: error.message });\n-    }\n-}); \n-const express = require('express');\n const router = express.Router();\n const Project = require('../models/Project');\n const Column = require('../models/Column');\n const Document = require('../models/Document');\n@@ -105,6 +88,5 @@\n         res.json(newDocument);\n     } catch (err) {\n         res.status(500).json({ error: err.message });\n     }\n-}); \n }); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1741627641564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,17 +3,16 @@\n const Project = require('../models/Project');\n const Column = require('../models/Column');\n const Document = require('../models/Document');\n \n-// Get project with all its columns and documents\n+// Get project with all its data\n router.get('/:id', async (req, res) => {\n     try {\n         const project = await Project.findById(req.params.id)\n             .populate({\n                 path: 'columns',\n                 populate: {\n-                    path: 'documents',\n-                    model: 'Document'\n+                    path: 'documents'\n                 }\n             });\n         res.json(project);\n     } catch (err) {\n@@ -23,70 +22,71 @@\n \n // Create new column\n router.post('/:projectId/columns', async (req, res) => {\n     try {\n-        const { title, backgroundColor } = req.body;\n-        const projectId = req.params.projectId;\n-        \n-        // Get the current highest order\n-        const highestOrder = await Column.findOne({ projectId })\n-            .sort('-order')\n-            .select('order');\n-        \n-        const newColumn = new Column({\n-            title,\n-            projectId,\n-            backgroundColor,\n-            order: (highestOrder?.order || 0) + 1\n+        const count = await Column.countDocuments({ projectId: req.params.projectId });\n+        const column = new Column({\n+            title: req.body.title,\n+            backgroundColor: req.body.backgroundColor,\n+            position: count,\n+            projectId: req.params.projectId\n         });\n         \n-        await newColumn.save();\n-        \n-        // Add column to project\n-        await Project.findByIdAndUpdate(projectId, {\n-            $push: { columns: newColumn._id }\n+        const savedColumn = await column.save();\n+        await Project.findByIdAndUpdate(req.params.projectId, {\n+            $push: { columns: savedColumn._id }\n         });\n         \n-        res.json(newColumn);\n+        res.json(savedColumn);\n     } catch (err) {\n         res.status(500).json({ error: err.message });\n     }\n });\n \n-// Update column (position, color, etc)\n-router.put('/columns/:columnId', async (req, res) => {\n+// Update column\n+router.put('/columns/:id', async (req, res) => {\n     try {\n-        const updatedColumn = await Column.findByIdAndUpdate(\n-            req.params.columnId,\n-            req.body,\n-            { new: true }\n-        );\n-        res.json(updatedColumn);\n+        const column = await Column.findByIdAndUpdate(req.params.id, {\n+            backgroundColor: req.body.backgroundColor,\n+            position: req.body.position\n+        }, { new: true });\n+        res.json(column);\n     } catch (err) {\n         res.status(500).json({ error: err.message });\n     }\n });\n \n-// Create new document in column\n+// Create document\n router.post('/columns/:columnId/documents', async (req, res) => {\n     try {\n-        const { title, content } = req.body;\n-        const columnId = req.params.columnId;\n-        \n-        const highestOrder = await Document.findOne({ columnId })\n-            .sort('-order')\n-            .select('order');\n-        \n-        const newDocument = new Document({\n-            title,\n-            content,\n-            columnId,\n-            order: (highestOrder?.order || 0) + 1,\n+        const count = await Document.countDocuments({ columnId: req.params.columnId });\n+        const document = new Document({\n+            title: req.body.title,\n+            content: req.body.content,\n+            columnId: req.params.columnId,\n+            position: count,\n             createdBy: req.user._id\n         });\n         \n-        await newDocument.save();\n-        res.json(newDocument);\n+        const savedDocument = await document.save();\n+        await Column.findByIdAndUpdate(req.params.columnId, {\n+            $push: { documents: savedDocument._id }\n+        });\n+        \n+        res.json(savedDocument);\n     } catch (err) {\n         res.status(500).json({ error: err.message });\n     }\n+});\n+\n+// Update document position\n+router.put('/documents/:id', async (req, res) => {\n+    try {\n+        const document = await Document.findByIdAndUpdate(req.params.id, {\n+            columnId: req.body.columnId,\n+            position: req.body.position\n+        }, { new: true });\n+        res.json(document);\n+    } catch (err) {\n+        res.status(500).json({ error: err.message });\n+    }\n }); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1741627866682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,107 @@\n+const express = require('express');\n+const router = express.Router();\n+const Project = require('../models/Project');\n+const Column = require('../models/Column');\n+const Document = require('../models/Document');\n+const { ensureAuth } = require('../config/auth');\n+\n+// Get project with all its data\n+router.get('/:id', ensureAuth, async (req, res) => {\n+    try {\n+        const project = await Project.findById(req.params.id)\n+            .populate({\n+                path: 'columns',\n+                populate: {\n+                    path: 'documents',\n+                    options: { sort: { 'position': 1 } }\n+                }\n+\n+            });\n+\n+        if (!project) {\n+            return res.render('error/404');\n+        }\n+\n+        res.render('project_template', {\n+            project,\n+            user: req.user\n+        });\n+    } catch (err) {\n+        console.error(err);\n+        res.render('error/404');\n+    }\n+});\n+\n+// Create new column\n+router.post('/:projectId/columns', async (req, res) => {\n+    try {\n+        const count = await Column.countDocuments({ projectId: req.params.projectId });\n+        const column = new Column({\n+            title: req.body.title,\n+            backgroundColor: req.body.backgroundColor,\n+            position: count,\n+            projectId: req.params.projectId\n+        });\n+        \n+        const savedColumn = await column.save();\n+        await Project.findByIdAndUpdate(req.params.projectId, {\n+            $push: { columns: savedColumn._id }\n+        });\n+        \n+        res.json(savedColumn);\n+    } catch (err) {\n+        res.status(500).json({ error: err.message });\n+    }\n+});\n+\n+// Update column\n+router.put('/columns/:id', async (req, res) => {\n+    try {\n+        const column = await Column.findByIdAndUpdate(req.params.id, {\n+            backgroundColor: req.body.backgroundColor,\n+            position: req.body.position\n+        }, { new: true });\n+        res.json(column);\n+    } catch (err) {\n+        res.status(500).json({ error: err.message });\n+    }\n+});\n+\n+// Create document\n+router.post('/columns/:columnId/documents', async (req, res) => {\n+    try {\n+        const count = await Document.countDocuments({ columnId: req.params.columnId });\n+        const document = new Document({\n+            title: req.body.title,\n+            content: req.body.content,\n+            columnId: req.params.columnId,\n+            position: count,\n+            createdBy: req.user._id\n+        });\n+        \n+        const savedDocument = await document.save();\n+        await Column.findByIdAndUpdate(req.params.columnId, {\n+            $push: { documents: savedDocument._id }\n+        });\n+        \n+        res.json(savedDocument);\n+    } catch (err) {\n+        res.status(500).json({ error: err.message });\n+    }\n+});\n+\n+// Update document position\n+router.put('/documents/:id', async (req, res) => {\n+    try {\n+        const document = await Document.findByIdAndUpdate(req.params.id, {\n+            columnId: req.body.columnId,\n+            position: req.body.position\n+        }, { new: true });\n+        res.json(document);\n+    } catch (err) {\n+        res.status(500).json({ error: err.message });\n+    }\n+});\n+\n+router.post('/createProject', ensureAuth, async (req, res) => {\n+}); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1741627999919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,17 +34,19 @@\n \n // Create new column\n router.post('/:projectId/columns', async (req, res) => {\n     try {\n-        const count = await Column.countDocuments({ projectId: req.params.projectId });\n         const column = new Column({\n             title: req.body.title,\n             backgroundColor: req.body.backgroundColor,\n-            position: count,\n-            projectId: req.params.projectId\n+            position: req.body.position,\n+            projectId: req.params.projectId,\n+            documents: []\n         });\n         \n         const savedColumn = await column.save();\n+        \n+        // Add column to project\n         await Project.findByIdAndUpdate(req.params.projectId, {\n             $push: { columns: savedColumn._id }\n         });\n         \n@@ -102,98 +104,26 @@\n         res.status(500).json({ error: err.message });\n     }\n });\n \n-router.post('/createProject', ensureAuth, async (req, res) => {\n-}); \n-const express = require('express');\n-const router = express.Router();\n-const Project = require('../models/Project');\n-const Column = require('../models/Column');\n-const Document = require('../models/Document');\n-\n-// Get project with all its data\n-router.get('/:id', async (req, res) => {\n+// Delete column\n+router.delete('/:projectId/columns/:columnId', async (req, res) => {\n     try {\n-        const project = await Project.findById(req.params.id)\n-            .populate({\n-                path: 'columns',\n-                populate: {\n-                    path: 'documents'\n-                }\n-            });\n-        res.json(project);\n-    } catch (err) {\n-        res.status(500).json({ error: err.message });\n-    }\n-});\n-\n-// Create new column\n-router.post('/:projectId/columns', async (req, res) => {\n-    try {\n-        const count = await Column.countDocuments({ projectId: req.params.projectId });\n-        const column = new Column({\n-            title: req.body.title,\n-            backgroundColor: req.body.backgroundColor,\n-            position: count,\n-            projectId: req.params.projectId\n-        });\n+        // Delete all documents in the column\n+        await Document.deleteMany({ columnId: req.params.columnId });\n         \n-        const savedColumn = await column.save();\n+        // Delete the column\n+        await Column.findByIdAndDelete(req.params.columnId);\n+        \n+        // Remove column reference from project\n         await Project.findByIdAndUpdate(req.params.projectId, {\n-            $push: { columns: savedColumn._id }\n+            $pull: { columns: req.params.columnId }\n         });\n         \n-        res.json(savedColumn);\n+        res.json({ success: true });\n     } catch (err) {\n         res.status(500).json({ error: err.message });\n     }\n });\n \n-// Update column\n-router.put('/columns/:id', async (req, res) => {\n-    try {\n-        const column = await Column.findByIdAndUpdate(req.params.id, {\n-            backgroundColor: req.body.backgroundColor,\n-            position: req.body.position\n-        }, { new: true });\n-        res.json(column);\n-    } catch (err) {\n-        res.status(500).json({ error: err.message });\n-    }\n-});\n-\n-// Create document\n-router.post('/columns/:columnId/documents', async (req, res) => {\n-    try {\n-        const count = await Document.countDocuments({ columnId: req.params.columnId });\n-        const document = new Document({\n-            title: req.body.title,\n-            content: req.body.content,\n-            columnId: req.params.columnId,\n-            position: count,\n-            createdBy: req.user._id\n-        });\n-        \n-        const savedDocument = await document.save();\n-        await Column.findByIdAndUpdate(req.params.columnId, {\n-            $push: { documents: savedDocument._id }\n-        });\n-        \n-        res.json(savedDocument);\n-    } catch (err) {\n-        res.status(500).json({ error: err.message });\n-    }\n-});\n-\n-// Update document position\n-router.put('/documents/:id', async (req, res) => {\n-    try {\n-        const document = await Document.findByIdAndUpdate(req.params.id, {\n-            columnId: req.body.columnId,\n-            position: req.body.position\n-        }, { new: true });\n-        res.json(document);\n-    } catch (err) {\n-        res.status(500).json({ error: err.message });\n-    }\n+router.post('/createProject', ensureAuth, async (req, res) => {\n }); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1741628069746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,19 +34,17 @@\n \n // Create new column\n router.post('/:projectId/columns', async (req, res) => {\n     try {\n+        const count = await Column.countDocuments({ projectId: req.params.projectId });\n         const column = new Column({\n             title: req.body.title,\n             backgroundColor: req.body.backgroundColor,\n-            position: req.body.position,\n-            projectId: req.params.projectId,\n-            documents: []\n+            position: count,\n+            projectId: req.params.projectId\n         });\n         \n         const savedColumn = await column.save();\n-        \n-        // Add column to project\n         await Project.findByIdAndUpdate(req.params.projectId, {\n             $push: { columns: savedColumn._id }\n         });\n         \n@@ -104,26 +102,6 @@\n         res.status(500).json({ error: err.message });\n     }\n });\n \n-// Delete column\n-router.delete('/:projectId/columns/:columnId', async (req, res) => {\n-    try {\n-        // Delete all documents in the column\n-        await Document.deleteMany({ columnId: req.params.columnId });\n-        \n-        // Delete the column\n-        await Column.findByIdAndDelete(req.params.columnId);\n-        \n-        // Remove column reference from project\n-        await Project.findByIdAndUpdate(req.params.projectId, {\n-            $pull: { columns: req.params.columnId }\n-        });\n-        \n-        res.json({ success: true });\n-    } catch (err) {\n-        res.status(500).json({ error: err.message });\n-    }\n-});\n-\n router.post('/createProject', ensureAuth, async (req, res) => {\n }); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1741628190192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,6 +102,48 @@\n         res.status(500).json({ error: err.message });\n     }\n });\n \n+// Move document between columns\n+router.put('/documents/:id/move', async (req, res) => {\n+    try {\n+        const { newColumnId, oldColumnId, position } = req.body;\n+        \n+        // Update document's column and position\n+        const document = await Document.findByIdAndUpdate(req.params.id, {\n+            columnId: newColumnId,\n+            position: position\n+        }, { new: true });\n+\n+        // Remove document from old column\n+        await Column.findByIdAndUpdate(oldColumnId, {\n+            $pull: { documents: req.params.id }\n+        });\n+\n+        // Add document to new column\n+        await Column.findByIdAndUpdate(newColumnId, {\n+            $push: { documents: req.params.id }\n+        });\n+\n+        res.json(document);\n+    } catch (err) {\n+        console.error('Error moving document:', err);\n+        res.status(500).json({ error: err.message });\n+    }\n+});\n+\n+// Update document position within same column\n+router.put('/documents/:id/position', async (req, res) => {\n+    try {\n+        const document = await Document.findByIdAndUpdate(req.params.id, {\n+            position: req.body.position\n+        }, { new: true });\n+        \n+        res.json(document);\n+    } catch (err) {\n+        console.error('Error updating document position:', err);\n+        res.status(500).json({ error: err.message });\n+    }\n+});\n+\n router.post('/createProject', ensureAuth, async (req, res) => {\n }); \n\\ No newline at end of file\n"
                }
            ],
            "date": 1741627250819,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst router = express.Router();\nconst Project = require('../models/Project');\nconst Column = require('../models/Column');\nconst Document = require('../models/Document');\n\n// Get project with all its columns and documents\nrouter.get('/:id', async (req, res) => {\n    try {\n        const project = await Project.findById(req.params.id)\n            .populate({\n                path: 'columns',\n                populate: {\n                    path: 'documents',\n                    model: 'Document'\n                }\n            });\n        res.json(project);\n    } catch (err) {\n        res.status(500).json({ error: err.message });\n    }\n});\n\n// Create new column\nrouter.post('/:projectId/columns', async (req, res) => {\n    try {\n        const { title, backgroundColor } = req.body;\n        const projectId = req.params.projectId;\n        \n        // Get the current highest order\n        const highestOrder = await Column.findOne({ projectId })\n            .sort('-order')\n            .select('order');\n        \n        const newColumn = new Column({\n            title,\n            projectId,\n            backgroundColor,\n            order: (highestOrder?.order || 0) + 1\n        });\n        \n        await newColumn.save();\n        \n        // Add column to project\n        await Project.findByIdAndUpdate(projectId, {\n            $push: { columns: newColumn._id }\n        });\n        \n        res.json(newColumn);\n    } catch (err) {\n        res.status(500).json({ error: err.message });\n    }\n});\n\n// Update column (position, color, etc)\nrouter.put('/columns/:columnId', async (req, res) => {\n    try {\n        const updatedColumn = await Column.findByIdAndUpdate(\n            req.params.columnId,\n            req.body,\n            { new: true }\n        );\n        res.json(updatedColumn);\n    } catch (err) {\n        res.status(500).json({ error: err.message });\n    }\n});\n\n// Create new document in column\nrouter.post('/columns/:columnId/documents', async (req, res) => {\n    try {\n        const { title, content } = req.body;\n        const columnId = req.params.columnId;\n        \n        const highestOrder = await Document.findOne({ columnId })\n            .sort('-order')\n            .select('order');\n        \n        const newDocument = new Document({\n            title,\n            content,\n            columnId,\n            order: (highestOrder?.order || 0) + 1,\n            createdBy: req.user._id\n        });\n        \n        await newDocument.save();\n        res.json(newDocument);\n    } catch (err) {\n        res.status(500).json({ error: err.message });\n    }\n}); "
        }
    ]
}