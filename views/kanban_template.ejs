<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Without reset.css: inconsistent element styling across browsers -->
    <link rel="stylesheet" href="/css/reset.css" />
    <link rel="stylesheet" href="/css/style.css" />
    <link rel="stylesheet" href="/css/dragula.css" />
    <!-- Without font preconnect: slow font loading and page render -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,400;0,700;0,900;1,400;1,700&display=swap"
        rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap"
        rel="stylesheet">

    <title>Kanban Template</title>
    <style>
        .drag-container {
            display: flex;
            flex-wrap: wrap;
            height: calc(100vh - 200px);
            overflow-x: hidden;
            overflow-y: auto;
            padding: 10px;
            gap: 10px;
            width: calc(100vw - 20px);
            box-sizing: border-box;
            margin: 0 auto;
        }

        .dragColumn {
            border: 1px solid #ccc;
            padding: 8px;
            background-color: #f9f9f9;
            box-sizing: border-box;
            word-wrap: break-word;
            width: 280px;
            flex: 0 0 280px;
            position: relative;
            display: flex;
            flex-flow: column nowrap;
            align-items: inherit;
            justify-content: flex-start;
            max-height: calc(100vh - 220px);
            overflow-y: auto;
            margin: 0;
        }

        .gu-mirror {
            /*this was required to flip right-side -up the dragged objects.  */
            transform: rotate(0deg);
        }

        .handle,
        .bar {
            border: 1px solid #ccc;
            font-size: 1.5rem;
            width: 3vh;
            height: 3vh;
            padding: 0.1vh 0 0 0;
            display: inline-block;
            text-align: center;
            background-image: url(/images/Icons2.webp);
            background-color: goldenrod;
            background-size: 1155%;
            background-position: 90.5% 37%;
            border-radius: 22%;
        }

        .dragDocument {
            padding: 8px 35px 8px 8px;
            margin: 6px 0;
            border-radius: 4px;
            background-color: #08CF65;
            position: relative;
            cursor: move;
            width: 100%;
            box-sizing: border-box;
            word-wrap: break-word;
        }

        .document-container {
            position: relative;
            width: 100%;
        }

        /* Create a container for the icons */
        .document-icons {
            position: absolute;
            top: 50%;
            right: -35px;
            /* Adjust based on padding */
            transform: translateY(-50%);
            display: flex;
            gap: 8px;
            align-items: center;
        }

        .deleteButton {
            border: 1px solid #ccc;
            width: 24px;
            height: 24px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background-image: url(/images/Icons1.webp);
            background-color: transparent;
            background-size: 1300%;
            background-position: 63% 37%;
            border-radius: 4px;
            position: absolute;
            top: 8px;
            right: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .deleteButton:hover {
            background-color: #ff4444;
            border-color: #ff0000;
            background-image: url(/images/Icons1.webp);
        }

        .dragDocument .deleteButton {
            align-self: flex-end;
        }

        .newDocPopupButton {
            border: 1px solid #ccc;
            font-size: 1.5rem;
            width: 3vw;
            height: 3vh;
            padding: 0.1vh 0 0 0;
            display: flex;
            text-align: center;
            background-image: url(/images/Icons1.webp);
            background-color: lightgrey;
            background-size: 1000%;
            background-position: 36% 63%;
            border-radius: 22%;
            position: relative;
            margin: 1% 1%;

        }

        nav.columnNav {
            display: flex;
            flex-flow: row nowrap;
            justify-content: space-between;
            position: relative;
            align-items: baseline;
        }

        #createDocumentForm {
            border: 1px solid #e0e0e0;
            position: fixed;
            width: 450px;
            max-height: 90vh;
            overflow-y: auto;
            z-index: 1000;
            background-color: #f9f9f9;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            border-radius: 12px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            display: none;
        }

        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 999;
            display: none;
        }

        body.modal-open {
            overflow: hidden;
        }

        body {
            position: relative;
            height: 100vh;
        }

        footer {
            position: sticky;
            top: 100vh;
        }

        .close-btn {
            position: relative;
            font-size: 1.5rem;
            cursor: pointer;
            color: white;
            transition: color 0.2s;
            padding: 0;
            background: none;
            border: none;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .close-btn:hover {
            color: #f0f0f0;
        }

        .form-header {
            position: relative;
            padding: 20px;
            border-bottom: 1px solid #e0e0e0;
            background-color: #8B0000;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-radius: 12px 12px 0 0;
        }

        .form-header h2 {
            margin: 0;
            font-size: 1.5rem;
            color: white;
            font-weight: 600;
        }

        .form-content {
            padding: 20px;
            background-color: #f9f9f9;
            max-height: 50vh;
            overflow-y: auto;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #444;
            font-size: 0.9rem;
        }

        .form-control {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #e0e0e0;
            border-radius: 6px;
            font-size: 0.95rem;
            transition: border-color 0.2s ease;
            background-color: #f8f9fa;
        }

        .form-control:focus {
            outline: none;
            border-color: #08CF65;
            background-color: #ffffff;
        }

        .form-buttons {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            margin: 20px 0;
        }

        .btn-secondary {
            background-color: #f0f0f0;
            border: 1px solid #e0e0e0;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.9rem;
            color: #444;
        }

        .btn-secondary:hover {
            background-color: #e0e0e0;
            border-color: #d0d0d0;
        }

        .btn-primary {
            background-color: #8B0000;
            color: white;
            border: 1px solid white;
            padding: 12px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s ease;
            font-size: 1rem;
        }

        .btn-primary:hover {
            background-color: #6B0000;
            transform: translateY(-1px);
        }

        textarea.form-control {
            min-height: 120px;
            resize: vertical;
        }

        .form-footer {
            padding: 20px;
            background-color: #8B0000;
            border-top: 1px solid #e0e0e0;
            text-align: center;
            border-radius: 0 0 12px 12px;
            position: relative;
            z-index: 1;
        }

        .form-footer .btn-primary {
            width: auto;
            min-width: 150px;
            display: inline-block;
            background-color: white;
            color: #8B0000;
            border: 1px solid #8B0000;
            margin: 0 auto;
        }

        .form-footer .btn-primary:hover {
            background-color: #f0f0f0;
            color: #8B0000;
        }

        .column-color-picker,
        .document-color-picker {
            width: 25px;
            height: 25px;
            padding: 0;
            border: 1px solid #ccc;
            border-radius: 4px;
            cursor: pointer;
            background-color: transparent;
            transition: transform 0.2s ease;
        }

        .column-color-picker:hover,
        .document-color-picker:hover {
            transform: scale(1.1);
        }

        .column-color-picker::-webkit-color-swatch-wrapper,
        .document-color-picker::-webkit-color-swatch-wrapper {
            padding: 0;
        }

        .column-color-picker::-webkit-color-swatch,
        .document-color-picker::-webkit-color-swatch {
            border: none;
            border-radius: 3px;
        }

        .column-color-picker::-moz-color-swatch,
        .document-color-picker::-moz-color-swatch {
            border: none;
            border-radius: 3px;
        }

        .dragColumn {
            transition: background-color 0.3s ease;
            min-height: 50px;
            /* Ensure columns are droppable when empty */
        }

        nav.columnNav {
            display: flex;
            flex-flow: row nowrap;
            justify-content: flex-start;
            position: relative;
            align-items: center;
            gap: 8px;
            padding: 5px;
        }

        .button-container {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 10px;
        }

        .dragDocument:hover {
            transform: translateY(-2px);
        }

        .gu-mirror {
            cursor: grabbing;
        }

        .gu-transit {
            opacity: 0.4;
            background-color: #f0f0f0;
        }

        .document-color-picker {
            width: 24px;
            height: 24px;
            padding: 0;
            border: 1px solid #ccc;
            border-radius: 4px;
            cursor: pointer;
        }

        .document-content {
            margin-right: 30px;
            /* Space for delete button */
        }

        .document-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .document-header h2 {
            margin: 0;
            font-size: 16px;
            font-weight: bold;
            color: #333;
            flex-grow: 1;
        }

        .dragDocument p {
            margin: 5px 0 0 0;
            font-size: 14px;
            color: #333;
        }

        .deleteButton {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 24px;
            height: 24px;
        }

        /* Add a media query for smaller screens */
        @media (max-width: 1200px) {
            .dragColumn {
                flex: 0 0 calc(50% - 40px);
                /* Two columns on medium screens */
            }
        }

        @media (max-width: 768px) {
            .dragColumn {
                flex: 0 0 100%;
                /* One column on small screens */
            }
        }

        .column-footer {
            position: sticky;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 8px;
            border-top: 1px solid #ccc;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #f0f0f0;
            margin-top: 8px;
            box-shadow: 0 -2px 4px rgba(0,0,0,0.05);
            z-index: 5;
        }

        .documents-container {
            display: flex;
            flex-direction: column;
            flex: 1;
            overflow-y: auto;
            min-height: 100px;
        }

        .document-count {
            font-size: 0.9rem;
            color: #666;
            font-weight: 500;
        }
    </style>
</head>

<body>
    <!-- onload="init()"> -->
    <!-- Without header: navigation missing -->
    <%- include('partials/header') %>

        <!-- Without this form: no way to c
     new columns -->
        <h1>
            <%= project.name %>
        </h1>
        <form id="createColumnForm">
            <div class="form-group">
                <label for="columnContent">Column Title</label>
                <input type="text" id="columnContent" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary">Create Column</button>
        </form>

        <!-- Without hidden attribute: form shows before any columns exist -->
        <form id="createDocumentForm" class="document-form" style="display: none;">
            <div class="form-header">
                <h2>Create Document</h2>
                <button type="button" class="close-btn">&times;</button>
            </div>
            <div class="form-content">
                <div class="form-group">
                    <label for="documentTitle">Document Title</label>
                    <input type="text" id="documentTitle" class="form-control" required placeholder="Enter document title">

                    <label for="documentDescription">Document Description</label>
                    <textarea id="documentDescription" class="form-control" placeholder="Enter document description"></textarea>

                    <div class="form-buttons">
                        <input type="button" id="documentColumn" class="btn-secondary" value="Column">
                        <input type="button" id="documentAssignee" class="btn-secondary" value="Assignee">
                        <input type="button" id="documentLabel" class="btn-secondary" value="Label">
                        <input type="button" id="documentProject" class="btn-secondary" value="Assign to Project">
                        <input type="button" id="MileStone" class="btn-secondary" value="MileStone">
                    </div>
                </div>
            </div>
            <div class="form-footer">
                <button type="submit" class="btn btn-primary" id='createDoc'>Create Document</button>
            </div>
        </form>

        <!-- Without this container: nowhere to place dragable columns -->
        <div id="dragparent" class="drag-container"></div>

        <!-- Without footer: missing page closure and contact info -->
        <%- include('partials/footer') %>

            <!-- Without main.js: core application features missing -->
            <script src="/js/main.js"></script>
            <!-- Without dragula.js: no drag-and-drop functionality -->
            <script src="/js/dragula.js"></script>
            <script src="/js/socket.io.js"></script>
            <script type="module">
                document.addEventListener("DOMContentLoaded", () => {
                    init();
                });

                let columnDrake;
                let documentDrake;
                let listOfColumn = [];
                const projectId = '<%= project._id %>';
                const socket = io('http://localhost:3000');
                const room = `chat<%= project._id %>`;
                const roomName = `<%= project.name %>`;

                socket.on('connect', () => {
                    socket.emit('join-room', roomName, room);
                });

                socket.on("board-updated", (updatedBoard) => {
                    init(updatedBoard, true);
                });

                function saveToLocalStorage() {
                    const boardState = {
                        projectId: projectId,
                        columns: Array.from(document.querySelectorAll('div ul.dragColumn')).map(column => {
                            const documents = Array.from(column.querySelectorAll('.dragDocument')).map(doc => ({
                                id: doc.id,
                                title: doc.querySelector('h2').textContent,
                                description: doc.querySelector('p').textContent,
                                backgroundColor: doc.style.backgroundColor || '#08CF65'
                            }));

                            return {
                                id: column.id,
                                title: column.querySelector('.title').textContent,
                                backgroundColor: column.style.backgroundColor || '#f9f9f9',
                                documents: documents
                            };
                        }),
                    };

                    // Update document counts
                    document.querySelectorAll('.dragColumn').forEach(column => {
                        updateDocumentCount(column);
                    });

                    socket.emit('updateBoard', boardState);
                    localStorage.setItem(`kanbanBoard`, JSON.stringify(boardState));
                }
                
                function createDocumentFromSaved(doc) {
                    const documentLineItem = document.createElement('li');
                    documentLineItem.className = 'dragDocument';
                    documentLineItem.id = doc.id;
                    documentLineItem.style.backgroundColor = doc.backgroundColor;

                    const docContainer = document.createElement('div');
                    docContainer.className = 'document-container';

                    // Add title
                    const docTitle = document.createElement('h2');
                    docTitle.textContent = doc.title;
                    docTitle.style.fontWeight = 'bold';
                    docTitle.addEventListener("dblclick", () => edit(docTitle));
                    docContainer.appendChild(docTitle);

                    // Add description
                    const docDescription = document.createElement('p');
                    docDescription.textContent = doc.description;
                    docDescription.addEventListener("dblclick", () => edit(docDescription));
                    docContainer.appendChild(docDescription);

                    // Add color picker
                    const colorPicker = document.createElement('input');
                    colorPicker.type = 'color';
                    colorPicker.className = 'document-color-picker';
                    colorPicker.value = doc.backgroundColor || '#08CF65';
                    colorPicker.style.position = 'absolute';
                    colorPicker.style.right = '40px';
                    colorPicker.style.top = '10px';
                    colorPicker.addEventListener('input', (e) => {
                        documentLineItem.style.backgroundColor = e.target.value;
                        saveToLocalStorage();
                    });
                    docContainer.appendChild(colorPicker);

                    // Add delete button
                    const deleteMe = document.createElement("button");
                    deleteMe.className = 'deleteButton';
                    deleteMe.dataset.document = documentLineItem.id;
                    deleteMe.addEventListener("click", () => deleteDocument(deleteMe.dataset.document));
                    docContainer.appendChild(deleteMe);

                    documentLineItem.appendChild(docContainer);
                    return documentLineItem;
                }

                function createColumnFromSaved(column) {
                    const newColumn = document.createElement('ul');
                    newColumn.className = 'dragColumn';
                    newColumn.id = column.id;
                    newColumn.style.backgroundColor = column.backgroundColor;

                    const columnNav = document.createElement('nav');
                    columnNav.className = 'columnNav';

                    // Create button container
                    const buttonContainer = document.createElement('div');
                    buttonContainer.className = 'button-container';

                    // Add document button
                    const newDocPopup = document.createElement("button");
                    newDocPopup.className = 'newDocPopupButton';
                    newDocPopup.dataset.column = newColumn.id;
                    newDocPopup.addEventListener("click", () => createDocumentPopup(newDocPopup.dataset.column));
                    buttonContainer.appendChild(newDocPopup);

                    // Add color picker
                    const colorPicker = document.createElement("input");
                    colorPicker.type = "color";
                    colorPicker.className = 'column-color-picker';
                    colorPicker.value = column.backgroundColor || '#f9f9f9';
                    colorPicker.addEventListener('input', (e) => {
                        newColumn.style.backgroundColor = e.target.value;
                        saveToLocalStorage();
                    });
                    buttonContainer.appendChild(colorPicker);

                    // Add delete button
                    const deleteMe = document.createElement("button");
                    deleteMe.className = 'deleteButton';
                    deleteMe.dataset.column = newColumn.id;
                    deleteMe.addEventListener("click", () => deleteDocument(deleteMe.dataset.column));
                    buttonContainer.appendChild(deleteMe);

                    columnNav.appendChild(buttonContainer);

                    // Add title
                    const title = document.createElement('h1');
                    title.className = 'title';
                    title.textContent = column.title;
                    title.addEventListener("dblclick", () => edit(title));
                    columnNav.appendChild(title);

                    newColumn.appendChild(columnNav);

                    // Create documents container
                    const documentsContainer = document.createElement('div');
                    documentsContainer.className = 'documents-container';
                    newColumn.appendChild(documentsContainer);
                    
                    // Add documents to the container
                    column.documents.forEach(document => {
                        const newDocument = createDocumentFromSaved(document);
                        documentsContainer.appendChild(newDocument);
                    });

                    // Add column footer with document count
                    const columnFooter = document.createElement('div');
                    columnFooter.className = 'column-footer';
                    
                    const documentCount = document.createElement('span');
                    documentCount.className = 'document-count';
                    documentCount.textContent = `Documents: ${column.documents.length}`;
                    columnFooter.appendChild(documentCount);
                    
                    newColumn.appendChild(columnFooter);

                    return newColumn;
                }

                function updateDocumentCount(column) {
                    const documentCount = column.querySelector('.document-count');
                    if (documentCount) {
                        const count = column.querySelectorAll('.dragDocument').length;
                        documentCount.textContent = `Documents: ${count}`;
                    }
                }

                function loadFromLocalStorage(emittedBoard, emitted) {
                    const kanban = JSON.parse('<%- JSON.stringify(kanban) %>')[0] ?? kanban;

                    if (!kanban || kanban === true) return;

                    const boardState = emittedBoard ?? kanban;

                    if (boardState.projectId !== projectId) {
                        console.log('No saved state for this project');
                        return;
                    }

                    const dragparent = document.getElementById('dragparent');
                    dragparent.innerHTML = '';
                    listOfColumn = [];

                    boardState.columns.forEach(column => {
                        const newColumn = createColumnFromSaved(column);
                        dragparent.appendChild(newColumn);
                        listOfColumn.push(newColumn);
                    });

                    reinitializeDragula(dragparent, listOfColumn);
                }

                function reinitializeDragula(dragparent, listOfColumn) {
                    if (columnDrake) columnDrake.destroy();

                    columnDrake = dragula([dragparent], {
                        moves: (el, container, handle) =>
                            el.classList.contains('dragColumn') &&
                            (handle.tagName === 'NAV' || handle.parentElement.tagName === 'NAV'),
                        accepts: (el, target) => el.classList.contains('dragColumn') && target === dragparent,
                        direction: 'horizontal',
                    });

                    if (documentDrake) documentDrake.destroy();

                    // Update to use document containers
                    const documentContainers = listOfColumn.map(column => 
                        column.querySelector('.documents-container')
                    ).filter(container => container !== null);

                    documentDrake = dragula(documentContainers, {
                        moves: (el, container, handle) => el.classList.contains('dragDocument'),
                        accepts: (el, target) => el.classList.contains('documents-container'),
                    });

                    columnDrake.on('drop', (el, target, source) => {
                        if (source && source !== target) source.removeChild(el);
                        saveToLocalStorage();
                    });

                    documentDrake.on('drop', saveToLocalStorage);
                }
                
                function deleteDocument(docID) {
                    const theDoomedDocument = document.getElementById(docID);
                    if (theDoomedDocument) {
                        theDoomedDocument.parentNode.removeChild(theDoomedDocument);
                        saveToLocalStorage();
                    }
                }

                function edit(element) {
                    let text = element.textContent;
                    element.textContent = '';
                    const rewrite = document.createElement('input');
                    rewrite.classList.add('form-control');
                    rewrite.id = "editInput";
                    rewrite.type = "textbox";
                    rewrite.placeholder = text;
                    rewrite.value = text;

                    rewrite.addEventListener("keydown", function (event) {
                        if (event.key === "Enter") {
                            event.preventDefault();
                            element.textContent = rewrite.value || rewrite.placeholder;
                            rewrite.remove();
                            saveToLocalStorage();
                        } else if (event.key === "Escape") {
                            element.textContent = text;
                            rewrite.remove();
                        }
                    });

                    rewrite.addEventListener("blur", function () {
                        element.textContent = text;
                        rewrite.remove();
                    });

                    element.appendChild(rewrite);
                    rewrite.focus();
                }

                function createDocumentPopup(columnData) {
                    const theDocPopupForm = document.getElementById('createDocumentForm');
                    const backdrop = document.createElement('div');
                    backdrop.className = 'modal-backdrop';
                    document.body.appendChild(backdrop);
                    backdrop.style.display = 'block';
                    theDocPopupForm.style.display = 'block';
                    document.body.classList.add('modal-open');
                    
                    const popupButton = document.getElementById('createDoc');
                    popupButton.setAttribute('data-id', columnData);
                    const documentTitle = document.getElementById('documentTitle');
                    documentTitle.focus();
                }
                
                function init(emittedBoard = null, emitted = false) {
                    const createColumnForm = document.getElementById('createColumnForm');
                    const createDocumentForm = document.getElementById('createDocumentForm');
                    const dragparent = document.getElementById('dragparent');

                    // Ensure form is hidden at startup
                    createDocumentForm.style.display = 'none';
                    
                    console.log("init started");

                    // Load saved data first
                    loadFromLocalStorage(emittedBoard, emitted);
                    reinitializeDragula(dragparent, listOfColumn);

                    // Column creation
                    createColumnForm.onsubmit = function(event) {
                        event.preventDefault();
                        const columnContent = document.getElementById('columnContent').value;
                        if (!columnContent) return;

                        const column = {
                            id: `column-${Date.now()}`,
                            title: columnContent,
                            backgroundColor: '#f9f9f9',
                            documents: []
                        };
                        const newColumn = createColumnFromSaved(column);
                        dragparent.appendChild(newColumn);
                        listOfColumn.push(newColumn);
                        createColumnForm.reset();
                        saveToLocalStorage();

                        // Reinitialize dragula for documents with new column
                        documentDrake.destroy();
                        listOfColumn = Array.from(document.querySelectorAll('.dragColumn'));
                        documentDrake = dragula(listOfColumn, {
                            moves: (el, container, handle) => el.classList.contains('dragDocument'),
                            accepts: (el, target) => el.classList.contains('dragDocument') && target.classList.contains('dragColumn')
                        });
                        documentDrake.on('drop', saveToLocalStorage);
                    };

                    // Document creation
                    createDocumentForm.onsubmit = function(event) {
                        event.preventDefault();
                        const columnID = document.getElementById("createDoc").dataset.id;
                        const documentTitle = document.getElementById('documentTitle').value;
                        const documentDescription = document.getElementById('documentDescription').value;

                        if (!columnID || !documentTitle) return;

                        const doc = {
                            id: `doc-${Date.now()}`,
                            title: documentTitle,
                            description: documentDescription,
                            backgroundColor: '#08CF65'
                        };
                        const documentLineItem = createDocumentFromSaved(doc);
                        const parentColumn = document.getElementById(columnID);
                        const documentsContainer = parentColumn.querySelector('.documents-container');
                        documentsContainer.appendChild(documentLineItem);
                        createDocumentForm.reset();
                        
                        // Hide form and backdrop, restore body scrolling
                        createDocumentForm.style.display = 'none';
                        const backdrop = document.querySelector('.modal-backdrop');
                        if (backdrop) {
                            backdrop.remove();
                        }
                        document.body.classList.remove('modal-open');
                        
                        saveToLocalStorage();
                    };

                    // Close button for document form
                    const closeBtn = document.querySelector('.close-btn');
                    closeBtn.onclick = function() {
                        createDocumentForm.style.display = 'none';
                        const backdrop = document.querySelector('.modal-backdrop');
                        if (backdrop) {
                            backdrop.remove();
                        }
                        document.body.classList.remove('modal-open');
                    };
                }    
                 </script>
</body>

</html>